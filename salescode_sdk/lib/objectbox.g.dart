// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'db/models/app/Popular_Question.dart';
import 'db/models/app/additional_mobile_number.dart';
import 'db/models/app/application_data.dart';
import 'db/models/app/attendance.dart';
import 'db/models/app/back_in_stock.dart';
import 'db/models/app/banded_pricing.dart';
import 'db/models/app/banner.dart';
import 'db/models/app/cart.dart';
import 'db/models/app/catalogue.dart';
import 'db/models/app/configuration.dart';
import 'db/models/app/consumer_catalog.dart';
import 'db/models/app/coupons.dart';
import 'db/models/app/credit_model.dart';
import 'db/models/app/data_sync.dart';
import 'db/models/app/delivery_pjp.dart';
import 'db/models/app/dynamic_pricing.dart';
import 'db/models/app/faq.dart';
import 'db/models/app/incentive.dart';
import 'db/models/app/intent.dart';
import 'db/models/app/inventory.dart';
import 'db/models/app/inventory_status.dart';
import 'db/models/app/kibana_logs.dart';
import 'db/models/app/kpi.dart';
import 'db/models/app/leaderboard_incentive.dart';
import 'db/models/app/locateMe.dart';
import 'db/models/app/metadata.dart';
import 'db/models/app/moenage.dart';
import 'db/models/app/monthly_incentive.dart';
import 'db/models/app/msl_tasks.dart';
import 'db/models/app/notification.dart';
import 'db/models/app/npd.dart';
import 'db/models/app/offline_sync.dart';
import 'db/models/app/order_details.dart';
import 'db/models/app/order_model.dart';
import 'db/models/app/order_tracking.dart';
import 'db/models/app/outlet.dart';
import 'db/models/app/outlet_mapping.dart';
import 'db/models/app/outlet_mapping_channel.dart';
import 'db/models/app/outlet_mapping_location.dart';
import 'db/models/app/outlet_pricing.dart';
import 'db/models/app/outlet_subscription.dart';
import 'db/models/app/outlet_survey_question.dart';
import 'db/models/app/outlet_survey_response.dart';
import 'db/models/app/outletwise_productInfo.dart';
import 'db/models/app/product.dart';
import 'db/models/app/product_attributes.dart';
import 'db/models/app/product_filters.dart';
import 'db/models/app/product_metadata.dart';
import 'db/models/app/product_pricing.dart';
import 'db/models/app/recommended_orders.dart';
import 'db/models/app/return.dart';
import 'db/models/app/rewards_disbursment.dart';
import 'db/models/app/salesrep_outlet_model.dart';
import 'db/models/app/schemes.dart';
import 'db/models/app/search_history_model.dart';
import 'db/models/app/secondary_product.dart';
import 'db/models/app/secondary_product_intent.dart';
import 'db/models/app/sku_description.dart';
import 'db/models/app/slack_alert.dart';
import 'db/models/app/stock_quantity.dart';
import 'db/models/app/supplier.dart';
import 'db/models/app/target.dart';
import 'db/models/app/unavailable_product.dart';
import 'db/models/app/user.dart';
import 'db/models/app/user_info.dart';
import 'db/models/app/work_with_survey_task.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5218618201660244845),
      name: 'AdditionalMobileNumber',
      lastPropertyId: const obx_int.IdUid(3, 7160262137713556013),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8463538989978454072),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5931518839536063982),
            name: 'mobileNumber',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(1, 5722415589837698134)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7160262137713556013),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5510197175794950841),
      name: 'ApplicationDataV1',
      lastPropertyId: const obx_int.IdUid(3, 5505568025299228692),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7094270092608637673),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6394655934013053616),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(2, 5182415177693545017)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5505568025299228692),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6540350933041350707),
      name: 'AttendanceModelV1',
      lastPropertyId: const obx_int.IdUid(7, 8034337126196560817),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8295443034915746567),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3530474213542520675),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1297506575992942290),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4722294181370595228),
            name: 'attendanceType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2835763620829003507),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4638147813539326655),
            name: 'extendedAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8034337126196560817),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3469990772010953403),
      name: 'BackInStock',
      lastPropertyId: const obx_int.IdUid(4, 8089346651817055993),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3416861655352050106),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9117421301406224166),
            name: 'skuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2438110805615498650),
            name: 'productPurchased',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8089346651817055993),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2244458190074969531),
      name: 'BandedPricingV1',
      lastPropertyId: const obx_int.IdUid(7, 6378205928304343880),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9088555955152467371),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1092803111712600587),
            name: 'batchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9001193833489953105),
            name: 'bandedGroupId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6690451204293209428),
            name: 'yd00',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 816824283428732922),
            name: 'yd01',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8678421069267074409),
            name: 'yd02',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6378205928304343880),
            name: 'yt01',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7894352166364279922),
      name: 'BannerV1',
      lastPropertyId: const obx_int.IdUid(18, 5926222271584221048),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8057025383401675912),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2765999205055189692),
            name: 'bannerName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6824728082796585945),
            name: 'bannerDesc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2133580381711221629),
            name: 'bannerId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(3, 8674011479021478296)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5690810714388386440),
            name: 'bannerSequence',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5751256361143541605),
            name: 'bannerType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4262481946020135020),
            name: 'bannerTemplate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8756325362730024592),
            name: 'mediaUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6648328230825471586),
            name: 'mediaName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 386760013303742428),
            name: 'fileName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3273441471540238725),
            name: 'blobKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5801699356956322131),
            name: 'batchCode',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8295671767381984311),
            name: 'elementComponents',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3444832975258915409),
            name: 'bankName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 2392335809995406513),
            name: 'lastModifiedTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 8206889481935891328),
            name: 'bannerParentId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4268436663132871077),
            name: 'extendedAttributesV2',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5926222271584221048),
            name: 'bannerPriority',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 3727718137245200679),
      name: 'CartV1',
      lastPropertyId: const obx_int.IdUid(27, 4546226587127759349),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8281944460341926629),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1307481002846824441),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1124863835261855420),
            name: 'manufacturingDateV1',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3142365562654165876),
            name: 'refId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(4, 6331318622887290967)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4040440652372777486),
            name: 'batchCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(5, 4695901933146639502)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4961186570141186615),
            name: 'outletCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(6, 1811992899118231292)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2828329920878548134),
            name: 'pieceQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4036293192196488035),
            name: 'caseQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8254314798153491344),
            name: 'otherUnitQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1439272719538556346),
            name: 'qtyUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6785266407623145176),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8213213293343387760),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5020266660327560082),
            name: 'margin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3182209145794935673),
            name: 'netPtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8697708620017150972),
            name: 'maxDiscount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3202508861623253758),
            name: 'volume',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4239768776205667072),
            name: 'savings',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8977902334809128286),
            name: 'skuDesc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3769838330283165663),
            name: 'visitedOffers',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 920397506525543681),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 9086109915561788772),
            name: 'itemDescV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 5323121952845253439),
            name: 'stockQtyV1',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 2307768671549977886),
            name: 'typeV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 4046404873091417089),
            name: 'buttonDescriptionV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 788795796404084935),
            name: 'creditQty',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 8003186090993510768),
            name: 'ssp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 4546226587127759349),
            name: 'discountMargin',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4504214050515389090),
      name: 'CatalogueV1',
      lastPropertyId: const obx_int.IdUid(71, 1721015704289909114),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8639427558152776609),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4337984133876488617),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6813810383391604476),
            name: 'manufacturingDateV1',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6535040867068718707),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(7, 7550077944172324771)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 725099258804054572),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3780723893301122630),
            name: 'productDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2714222161307658932),
            name: 'suggestedQty',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7157060679999173168),
            name: 'suggestedCaseQty',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8012304071221924793),
            name: 'case2Piece',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 815305375031881237),
            name: 'images',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4332297354597355247),
            name: 'category',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(8, 3314412185754418346)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2959744964470267206),
            name: 'subCategory',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(9, 7871139984304104268)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 9102451019763936744),
            name: 'brand',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(10, 5515425161979879841)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5689212773428049566),
            name: 'skuCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(11, 2901382480273842316)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4495229597153097774),
            name: 'batchCode',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(12, 7659302886251497482)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5191262829701526929),
            name: 'priority',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(13, 8613177576293243029)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 8047144334544799071),
            name: 'pieceSize',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(14, 119454886601555492)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 6054441973523283761),
            name: 'pieceSizeDesc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3915714100376241519),
            name: 'suggestionText',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(15, 6591222123501141876)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5188504414985902988),
            name: 'productTag',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(16, 4584119031086983739)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 3339640819394652740),
            name: 'itemClass',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(17, 2298396164013498667)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 4900474686812612380),
            name: 'packPtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 348475311506146301),
            name: 'casePtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 2834671435161579789),
            name: 'basePackPtrV1',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 5390974260795393861),
            name: 'baseCasePtrV1',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 8678255989865641619),
            name: 'packMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 2975512956478742090),
            name: 'mrp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 4802067719223117833),
            name: 'caseMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 2287281714582809715),
            name: 'feature',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 6583041622374237092),
            name: 'sellingStory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 2656715856747572821),
            name: 'subCategoryCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 3104387286728575705),
            name: 'recommendationPriority',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 5959632045462308092),
            name: 'customLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 1670724381115514012),
            name: 'level',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 760292528633251292),
            name: 'searchIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 6028741674823715853),
            name: 'isFavourite',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 5727576608666519443),
            name: 'recommendationType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 696201394385294452),
            name: 'isRecommended',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 6081958401753452810),
            name: 'offers',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 7968830761802282797),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 6888531875140123574),
            name: 'tax',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 7628625361339310969),
            name: 'marketSkuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 9174311561511987305),
            name: 'otherUnitMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 7889542965575491847),
            name: 'otherUnitToPieceQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 4047476408971781738),
            name: 'pieceToOtherUnitQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 6418897561933007353),
            name: 'otherUnitPtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 5552744466143772873),
            name: 'additionalSchemeDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 6722790353606447595),
            name: 'otherUnitName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 4740772546129165442),
            name: 'smartBuy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 8780688023854932686),
            name: 'stockQty',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(51, 6473953690102051784),
            name: 'groupIdV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(52, 1652493013208770146),
            name: 'recommendedAttributesV2',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(53, 2576168842589983013),
            name: 'maxBenefitStringV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(54, 7931905189736512654),
            name: 'itemDescV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(55, 1558296508616842327),
            name: 'uomV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(56, 4082676483695891993),
            name: 'buttonDescriptionV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(57, 7454248109437019980),
            name: 'pointsV1',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(58, 8679858958606574541),
            name: 'typeV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(59, 3442788286670607152),
            name: 'bandedMaxQuantityV1',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(60, 8724197272968592543),
            name: 'minQtyForEarnPoints',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(61, 7079850788869140941),
            name: 'recommendationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(62, 650545811924070265),
            name: 'translation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(63, 6195484915115783329),
            name: 'incentivePoints',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(64, 658800374719407393),
            name: 'productCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(65, 3938557034134417456),
            name: 'srp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(66, 9098571009220545118),
            name: 'returnCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(67, 836744914085767492),
            name: 'discountMargin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(68, 992565985127203363),
            name: 'outOfStock',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(69, 5465800914005343586),
            name: 'isNotify',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(70, 6656600440582285944),
            name: 'secondaryProductTag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(71, 1721015704289909114),
            name: 'eb2bCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 2720455540656148561),
      name: 'ConfigurationV1',
      lastPropertyId: const obx_int.IdUid(6, 5318289793339487410),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1029787228849708053),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7993482243489043215),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3907290757376657755),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5345402994575404269),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2297845894266039669),
            name: 'feature',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5318289793339487410),
            name: 'domainType',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 2768854835586820945),
      name: 'ConsumerCatalogV1',
      lastPropertyId: const obx_int.IdUid(3, 6352110940884996356),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 308632488394426551),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 896222326455193281),
            name: 'skuOrdered',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6352110940884996356),
            name: 'skuSelected',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 7691505899780370661),
      name: 'Coupons',
      lastPropertyId: const obx_int.IdUid(40, 2560667475628472811),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6412202822899125510),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8164089257674837996),
            name: 'discountId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5121557345490724304),
            name: 'batchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3166615649234509390),
            name: 'priority',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3823024912718408616),
            name: 'schemeDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3912492782389528181),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5968711593325004398),
            name: 'startDate',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2819961347844666065),
            name: 'endDate',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2569008375401845222),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4785720038368890298),
            name: 'criteria',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5714307220005294043),
            name: 'maxBudget',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7083979756455006956),
            name: 'maxTerm',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1662257827970559728),
            name: 'programLevel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3257615540002432565),
            name: 'mustBuyQty',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1087463031703062652),
            name: 'discountedBatchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7986981758851505082),
            name: 'programNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 545144112053411603),
            name: 'slabsInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8385706115332671079),
            name: 'minMaxCond',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 1907124322955346743),
            name: 'overNAbove',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 1764157894547417377),
            name: 'mustBuyAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2292832051606685068),
            name: 'channel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 5167626784932590211),
            name: 'distributionChannel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 3472341412873550560),
            name: 'subChannel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 5938531698665016659),
            name: 'outletType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 522671477827785755),
            name: 'outletCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 6537864211053537072),
            name: 'outletDivision',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 507289375631167858),
            name: 'outletClass',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 324997165768266101),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 2703646743654752113),
            name: 'marketId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 5733524412150564817),
            name: 'marketName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 237001043547518922),
            name: 'bannerBlob',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 8065522402263728474),
            name: 'bannerPriority',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 258677108802351748),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 5215568922325058158),
            name: 'color',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 8414920959325940919),
            name: 'outletExclusionKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 8154102010532699433),
            name: 'outletExclusionValues',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 377675928351954041),
            name: 'itemEach',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 6940167545881409717),
            name: 'extendedAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 1626871036102794049),
            name: 'activeStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 2560667475628472811),
            name: 'skuCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 2802582881239600435),
      name: 'CreditModel',
      lastPropertyId: const obx_int.IdUid(5, 4921618298864934916),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6194574565003616412),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 60429995325112259),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6766424651887540541),
            name: 'creditAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4503233045562270081),
            name: 'creditAvailable',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4921618298864934916),
            name: 'creditStatus',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 897233531818163258),
      name: 'DataSyncV1',
      lastPropertyId: const obx_int.IdUid(11, 3222083648657728319),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6798888061747842373),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1978006822588579718),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(18, 1268626925057877457)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5649472839416259718),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7552594690579480929),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4767719925367374166),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2019497667749174772),
            name: 'status',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(19, 5596476508035885405)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5114463279812887257),
            name: 'syncType',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(20, 3058216095128462878)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3494190838227675438),
            name: 'size',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 839264967162490707),
            name: 'records',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3445276427735518479),
            name: 'syncTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3222083648657728319),
            name: 'expiryTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 1457190812444676817),
      name: 'DeliveryPjpV1',
      lastPropertyId: const obx_int.IdUid(10, 1203647103037550720),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7828354278343721964),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4648838923874292439),
            name: 'pjpDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5464398210343584142),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4916606643701551250),
            name: 'deliveryPjpDateList',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6180205455458701901),
            name: 'month',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 681977298130424860),
            name: 'year',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8045764760683457840),
            name: 'expiryTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5763676498234144139),
            name: 'deliveryDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3114212194828863384),
            name: 'shippingAddressList',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1203647103037550720),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 7417953928496252142),
      name: 'DynamicPricingV1',
      lastPropertyId: const obx_int.IdUid(8, 1149994944521308331),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2171087870913435364),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2217476884331859684),
            name: 'skuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7417129074207305983),
            name: 'ysur',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8175942073137305817),
            name: 'ypp0',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 549888212870307921),
            name: 'ytdn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7805887166087547377),
            name: 'ytdr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5872514273679231735),
            name: 'yrrd',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1149994944521308331),
            name: 'yelp',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 2183756876822011544),
      name: 'FaqV1',
      lastPropertyId: const obx_int.IdUid(3, 5818515996730644765),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1197148725707326225),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7321100384910245306),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5818515996730644765),
            name: 'answer',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(19, 5377640031099814572),
      name: 'Incentive',
      lastPropertyId: const obx_int.IdUid(7, 4873809770017291972),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2563271147384255536),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7897100408754985071),
            name: 'outletCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(23, 6171190684963644591)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 786026563446431782),
            name: 'type',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(24, 870004390422266421)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5330698399718848916),
            name: 'typeCode',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(25, 2948012087500458670)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7476499718734216089),
            name: 'potentialPoints',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8283590542760395703),
            name: 'earnedPoints',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4873809770017291972),
            name: 'availablePoints',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(20, 4797616628224248040),
      name: 'IntentInfoV1',
      lastPropertyId: const obx_int.IdUid(8, 6132515672901415591),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7175282518603952530),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3526670003059741634),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3907155032632113829),
            name: 'intent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2658667332862350143),
            name: 'suggestions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3755186440699368321),
            name: 'template',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7253145573653286411),
            name: 'data',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2699348351774144872),
            name: 'templateAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6132515672901415591),
            name: 'queryName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(21, 6137815689059636498),
      name: 'InventoryModelV1',
      lastPropertyId: const obx_int.IdUid(10, 1792966061336243521),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1375035357870783504),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4632128295703635001),
            name: 'skuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 913994315622481871),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6173937274180376244),
            name: 'index',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6246502249711514656),
            name: 'csQty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1258956431773181886),
            name: 'pcQty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4031621033815087665),
            name: 'batchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6090203710029919709),
            name: 'expiryDateV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1731673945367411564),
            name: 'remainingShelfLifeV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1792966061336243521),
            name: 'mrpV1',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(22, 117043527900750212),
      name: 'InventoryStatus',
      lastPropertyId: const obx_int.IdUid(5, 767921850955165026),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6338771580158070097),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6705555897659146300),
            name: 'skuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4969538424529531230),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5185225811521910563),
            name: 'lastInvDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 767921850955165026),
            name: 'lastInvQty',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(23, 5231585324163966326),
      name: 'KibanaLog',
      lastPropertyId: const obx_int.IdUid(9, 1809232175431061948),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1768697385536227082),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8126311515322277575),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8954737316224027367),
            name: 'loginid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1591249118599372111),
            name: 'error',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2074846947251585859),
            name: 'stacktrace',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1092655275411435440),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2825029893326776067),
            name: 'severity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3135016696123890970),
            name: 'feature',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1809232175431061948),
            name: 'timestamp',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(24, 116733261816565596),
      name: 'KpiV1',
      lastPropertyId: const obx_int.IdUid(6, 5474473899965680317),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6391474866179617860),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 63682578941565904),
            name: 'kpiName',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(26, 2065761842865302099)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1457271706389376007),
            name: 'data',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6390267995670804281),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5295966734396809249),
            name: 'userDesignation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5474473899965680317),
            name: 'refKey',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(27, 6905010662269319650))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(25, 2939335341580712397),
      name: 'LeaderboardIncentiveModel',
      lastPropertyId: const obx_int.IdUid(7, 7073310257492235581),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4537920599811324279),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2184265113827934803),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2860183071470997579),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6193663991931365583),
            name: 'previousRank',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7664108203141776555),
            name: 'currentRank',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7825488863264627914),
            name: 'potentialPoints',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7073310257492235581),
            name: 'earnedPoints',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(26, 5919922934929255850),
      name: 'LocateMeV1',
      lastPropertyId: const obx_int.IdUid(8, 3106975794389841051),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7543899660228482239),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 639828566554094810),
            name: 'latitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5155471558104510265),
            name: 'longitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4222103124577942096),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5014891339150534122),
            name: 'pincode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2456668335985445633),
            name: 'landmark',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7907477742863068812),
            name: 'locality',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3106975794389841051),
            name: 'loginId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(27, 5340191368908246806),
      name: 'LoggerV1',
      lastPropertyId: const obx_int.IdUid(4, 7297506568906648250),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5378451208117734943),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1454800994097521941),
            name: 'info',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5308675082057124374),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7297506568906648250),
            name: 'logTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(30, 7800185591754280459),
      name: 'MetadataV1',
      lastPropertyId: const obx_int.IdUid(4, 8006033501249808061),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6073039980115651250),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6808629485243693530),
            name: 'domainName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5740963777959381547),
            name: 'domainType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8006033501249808061),
            name: 'domainValue',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(31, 8840626948135351074),
      name: 'MoengageV1',
      lastPropertyId: const obx_int.IdUid(1, 5179688041991360623),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5179688041991360623),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(32, 7313251552541695525),
      name: 'MonthlyIncentiveModel',
      lastPropertyId: const obx_int.IdUid(5, 4864678239940760953),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5989043703603680970),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4704470416856560151),
            name: 'taskName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2908914936468953834),
            name: 'period',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3327165692979196876),
            name: 'potentialPoints',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4864678239940760953),
            name: 'earnedPoints',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(33, 7541372069093560456),
      name: 'MslTasksModel',
      lastPropertyId: const obx_int.IdUid(6, 5824513212249652875),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2022256674810924953),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 458561712862604245),
            name: 'channel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1869260003369340528),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4056098183761932466),
            name: 'productCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 943355238006224916),
            name: 'skuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5824513212249652875),
            name: 'suggestedQty',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(34, 4685452226778083044),
      name: 'NotificationModelV1',
      lastPropertyId: const obx_int.IdUid(15, 248310249866717735),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2164106536417035532),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5863377592030169296),
            name: 'subject',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(28, 2950727039244529818)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1884262400145312720),
            name: 'description',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(29, 646310823334564477)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 806989247860981376),
            name: 'blobKey',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(30, 8968036096398692287)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2184744350343875671),
            name: 'creationTime',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(31, 5407372999744254854)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1884591933717255833),
            name: 'wasTapped',
            type: 1,
            flags: 8,
            indexId: const obx_int.IdUid(32, 3321472503413131228)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4688706505733568083),
            name: 'notificationId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(33, 6111381230295445448)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3692021520563955345),
            name: 'mediaUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3653060414555235540),
            name: 'subCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4643712940907494139),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6598196997893717968),
            name: 'productCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4867463038731793243),
            name: 'selectedSKU',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2575475833287864594),
            name: 'feature',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5630995915805259478),
            name: 'intentV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 248310249866717735),
            name: 'intentParamV1',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(35, 6823138254585297717),
      name: 'NpdV1',
      lastPropertyId: const obx_int.IdUid(2, 2299446527925524426),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3054377519967921668),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2299446527925524426),
            name: 'questionsList',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(36, 5567686493952868712),
      name: 'OfflineSyncV1',
      lastPropertyId: const obx_int.IdUid(17, 4398173231541722569),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1188502404030406859),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 676538503291946222),
            name: 'requestBodyV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7820388546375785576),
            name: 'api',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3706942381354691299),
            name: 'method',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3081682786891710319),
            name: 'lastModifiedTimeV1',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5412968579206417033),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1080072726511007417),
            name: 'transactionIdV1',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(34, 4453586999014800088)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7613309160179272989),
            name: 'referenceNumberV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 9131120921509270733),
            name: 'attempts',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4336572491169959696),
            name: 'response',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5652245178696505290),
            name: 'responseStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1587100276399465259),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 491052081876443091),
            name: 'outletId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8524274942640762391),
            name: 'featureV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6459179283699970248),
            name: 'creationTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 497836963213729255),
            name: 'editV1',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4398173231541722569),
            name: 'orderSeqNum',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(37, 3323808288249847376),
      name: 'OrderDetails',
      lastPropertyId: const obx_int.IdUid(23, 6638369204865528337),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 393122302716822849),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5777509741740915206),
            name: 'referenceNumber',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(35, 7024190743069505586)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8600259105905530449),
            name: 'extendedAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3525437696385773255),
            name: 'billAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1023631038685820529),
            name: 'netAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2504368255793504407),
            name: 'batchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2846098676298253981),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 660689712042407003),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6298872350538446340),
            name: 'normalizedQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6067284836325172219),
            name: 'initialAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5324654817684348040),
            name: 'initialQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1766254243202506210),
            name: 'mrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5004991122813323833),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8702246950163339831),
            name: 'casePrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 486570791099935487),
            name: 'productInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5398580299344461144),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3688708418751025333),
            name: 'discountInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 2123728897465894465),
            name: 'caseQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 4821726038545835424),
            name: 'pieceQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 6465386872233257603),
            name: 'otherUnitQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2100897985040839750),
            name: 'couponValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 6594015455326510542),
            name: 'discountValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6638369204865528337),
            name: 'orderNumber',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(38, 2418554910376172300),
      name: 'OrderModel',
      lastPropertyId: const obx_int.IdUid(27, 3833999307142308355),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 697277554200409118),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6203966920264980868),
            name: 'orderNumber',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(36, 2650681391288088104)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8873009214874050035),
            name: 'creationTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5351869214873408069),
            name: 'extendedAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 532479658739707567),
            name: 'billAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4592250710637600577),
            name: 'lineCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3965862183131288238),
            name: 'netAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 266342539757573789),
            name: 'referenceNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1621160923213387632),
            name: 'remarks',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 72770297332152340),
            name: 'source',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8353395741106419785),
            name: 'totalAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6684098000750206881),
            name: 'totalMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7178870248087291699),
            name: 'totalQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3415492479064021032),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8507638697186842743),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 244230819136323960),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1392541525463637480),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5819915236352838786),
            name: 'normalizedQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 787531912496411677),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 607353829739946015),
            name: 'discountInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2762659748150481793),
            name: 'supplierName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 246260623025922927),
            name: 'outletName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 1235256061204295041),
            name: 'totalCaseQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 1319971157519707150),
            name: 'totalPieceQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 4478213285699991182),
            name: 'totalOtherUnitQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 6610342108589563304),
            name: 'couponValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 3833999307142308355),
            name: 'discountValue',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(39, 1392738327719101806),
      name: 'OrderTrackingModelV1',
      lastPropertyId: const obx_int.IdUid(39, 6442637527297098528),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1476240159722117509),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6855951754878195211),
            name: 'orderNumber',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(37, 2568874839770890272)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9108710843206907928),
            name: 'creationTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1903357860599523236),
            name: 'lastModifiedTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2970324669211826273),
            name: 'extendedAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7682664809803599353),
            name: 'lob',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 358632394096199328),
            name: 'billAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 796865627560794676),
            name: 'lineCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5150472391974008141),
            name: 'netAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8808807447218161913),
            name: 'referenceNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 233507769334978910),
            name: 'remarks',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7327333260798334643),
            name: 'source',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1458979766589542003),
            name: 'totalAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6683768645132492816),
            name: 'totalInitialAmt',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4734714833352293977),
            name: 'totalInitialQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5061151869352621970),
            name: 'totalMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4344169570568471446),
            name: 'totalQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 2453613845135412857),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 1997635565285434567),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 8198690060665209142),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1820236547453895011),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 3468466995303250787),
            name: 'channel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6651704710585913110),
            name: 'normalizedQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 7961626558067665394),
            name: 'initialNormalizedQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 7851207015713241432),
            name: 'systemTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 72044027160934489),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8961570628224138183),
            name: 'discountInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8659272347677189011),
            name: 'normalizedVolume',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 7551920941319787040),
            name: 'processingStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 926703048124212990),
            name: 'supplierName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 4598734444576946121),
            name: 'outletName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 1250682628922449303),
            name: 'outletMobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 1487794661535357766),
            name: 'orderDetails',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 3291347560921896216),
            name: 'totalCaseQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 4713566701594645757),
            name: 'totalPieceQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 8187258281291558360),
            name: 'totalOtherUnitQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 2076934304614363886),
            name: 'orderHistory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 4742484480863696913),
            name: 'edit',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 6442637527297098528),
            name: 'statusReasonV1',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(41, 1674834549277504258),
      name: 'OutletMappingChannelV1',
      lastPropertyId: const obx_int.IdUid(3, 3130870507623574860),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2988351455832963949),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 304522888994079279),
            name: 'channel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3130870507623574860),
            name: 'subChannelV1',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(42, 4468957109427086260),
      name: 'OutletMappingLocation',
      lastPropertyId: const obx_int.IdUid(9, 3422643566254932877),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8404624830254464123),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 330616184159448155),
            name: 'region',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 290981188632580900),
            name: 'salesTeritory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2698361983347719290),
            name: 'state',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3753722163884342844),
            name: 'city',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8814248812564996330),
            name: 'district',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6712904119172914374),
            name: 'cityClassification',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7126264413334121122),
            name: 'cityCluster',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3422643566254932877),
            name: 'routeName',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(43, 8519319052519022323),
      name: 'OutletMappingV1',
      lastPropertyId: const obx_int.IdUid(19, 7313864999664518917),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 987963691825062517),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5908112573708007479),
            name: 'provinceV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2530799230618179576),
            name: 'cityV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6478330970666193732),
            name: 'districtV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4626201623490371153),
            name: 'customerChannel',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4157051939401136292),
            name: 'channelCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 462158551458389688),
            name: 'customerType',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5795751573874107338),
            name: 'outletType',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2165915084716007085),
            name: 'region',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8814352940384907789),
            name: 'salesTeritory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5213421539594651132),
            name: 'state',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7301427989351233052),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2276936116416147122),
            name: 'district',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 505435016253569360),
            name: 'cityClassification',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6875268040254688967),
            name: 'cityCluster',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7050265055078953619),
            name: 'routeName',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4407976243736337475),
            name: 'aseTerritory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 6871932318828870079),
            name: 'distributorId',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7313864999664518917),
            name: 'distributorName',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(44, 6149217180968881686),
      name: 'OutletPricing',
      lastPropertyId: const obx_int.IdUid(3, 1276276361385436258),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5834970953458254691),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8626657508211783466),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1276276361385436258),
            name: 'productInfo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(45, 7763136655794883989),
      name: 'OutletSubscriptionV1',
      lastPropertyId: const obx_int.IdUid(9, 1095134068528210480),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5957841585963017941),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5607862557126402883),
            name: 'activeStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3067676307585000732),
            name: 'activeStatusReason',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8204521129444453506),
            name: 'principalLoginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6506498946528626247),
            name: 'principalOutletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1230317233549544404),
            name: 'targetLob',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5228530789506378073),
            name: 'targetLoginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 486783453102660942),
            name: 'targetOutletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1095134068528210480),
            name: 'mobileNumber',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(46, 3537675275759299963),
      name: 'OutletSurveyQuestionModel',
      lastPropertyId: const obx_int.IdUid(8, 2937721131861595213),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5100342486686895859),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2147654446983098266),
            name: 'quesId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7512343764812162432),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 878343020115883256),
            name: 'options',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7099607927417986380),
            name: 'qid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8133050303349794220),
            name: 'eventId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1440866760072773038),
            name: 'responseType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2937721131861595213),
            name: 'eventType',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(47, 3916978522772788233),
      name: 'OutletSurveyResponseModel',
      lastPropertyId: const obx_int.IdUid(6, 5407925376681713049),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5814151652413237597),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3274672678008962997),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3265025689850575961),
            name: 'answerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 922162315215245965),
            name: 'answer',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7329625635681748015),
            name: 'responseType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5407925376681713049),
            name: 'lastModifiedTime',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(48, 5236657473282103666),
      name: 'OutletV1',
      lastPropertyId: const obx_int.IdUid(56, 1364574700939995978),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 429573138591336849),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2007102881782337949),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1702373847615574689),
            name: 'outletName',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(39, 3072437966833810930)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 626945618312677876),
            name: 'activeStatus',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(40, 1572563205571205710)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5117993102872043392),
            name: 'outletCode',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(41, 6502343295860545738)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7348195271006635601),
            name: 'beatName',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(42, 3025201459613934707)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2411721239421258326),
            name: 'beat',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(43, 5008960937231954030)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2847881581857054498),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6439720875257364547),
            name: 'contactno',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(44, 8610447665412900436)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3828493014906465099),
            name: 'displayAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5490355447257298883),
            name: 'channel',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(45, 1817399911222531613)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1669701533228908816),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4496225484960559672),
            name: 'hierarchy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1150273426658674161),
            name: 'subChannel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 815952011392088925),
            name: 'immediateParent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 8924852453942362551),
            name: 'userName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3736628485961101212),
            name: 'lastOrderDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8049658131814027000),
            name: 'outletType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 9129685549549759443),
            name: 'mapped',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 8767692084117789392),
            name: 'latitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2067993970662595365),
            name: 'longitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 9191486091566803800),
            name: 'ownerName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7883202543641774090),
            name: 'dob',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 5021756026589821386),
            name: 'doa',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 4104828819127771500),
            name: 'outletClass',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 6955359316011874316),
            name: 'foodsTier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 7119880512405930344),
            name: 'blobkey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8100564716682223740),
            name: 'recommendationData',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 9059848978711220180),
            name: 'pjp',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 8815189791225708094),
            name: 'crossSell',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 6741461615514718055),
            name: 'recover',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 1186545271558711214),
            name: 'mustOrder',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 5679084211160715310),
            name: 'focusProduct',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 8883101912863224606),
            name: 'searchableString',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 1331506105275448066),
            name: 'branch',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 4542901970263417566),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 1072133800734331338),
            name: 'outletCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 994262781422095991),
            name: 'outletProbabilityV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 3144697421790421302),
            name: 'marketIdV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 8205173740373427801),
            name: 'payoutSmsLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 1313774585797073651),
            name: 'expiryDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 3078647947059020783),
            name: 'ondcProvider',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 6355623783419237345),
            name: 'outletDivision',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 3505529932962456269),
            name: 'clientBe',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 298416556647364973),
            name: 'acoholCheck',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 8430015367582308529),
            name: 'distributionChannel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 8336950692822508778),
            name: 'incentivePoints',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 4016378389787444112),
            name: 'salesRep',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 1751222336593207592),
            name: 'availableCredit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 5451217826377608583),
            name: 'totalCredit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(51, 919212257735176685),
            name: 'creditStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(52, 7181820758477822456),
            name: 'customerType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(53, 3242595481061537356),
            name: 'deliveryplant',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(54, 3852286674882228449),
            name: 'srName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(55, 8716214553018934910),
            name: 'srId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(56, 1364574700939995978),
            name: 'emtDiscount',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(50, 8060974261396506469),
      name: 'OutletWiseProductInfo',
      lastPropertyId: const obx_int.IdUid(3, 7238568081245058742),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8471744310474129614),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 610940586641611760),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7238568081245058742),
            name: 'productInfo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(51, 4886962378194546022),
      name: 'PopularQuestionUIV1',
      lastPropertyId: const obx_int.IdUid(9, 25888826504295169),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7433538848688216420),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2530598008449281309),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5636703323391520084),
            name: 'answer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1892491748970718445),
            name: 'template',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6232903783509940302),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7809728551339733653),
            name: 'embedLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7923994956956792008),
            name: 'activeStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3201626158101862156),
            name: 'trainingText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 25888826504295169),
            name: 'intent',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(52, 3023085750311553256),
      name: 'ProductAttributes',
      lastPropertyId: const obx_int.IdUid(2, 6675737232284659078),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2627986659413093049),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6675737232284659078),
            name: 'productTypes',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(53, 2891238981541138990),
      name: 'ProductFiltersV1',
      lastPropertyId: const obx_int.IdUid(2, 2821950700317014820),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6864867606326384403),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2821950700317014820),
            name: 'filters',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(54, 7742342635655192440),
      name: 'ProductMetadataV1',
      lastPropertyId: const obx_int.IdUid(28, 8081838116843671605),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5988901198275751920),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4928747441208803546),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4718263003512706146),
            name: 'manufacturingDateV1',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8134089868655114790),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(47, 4337817202398068713)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6048715852607233055),
            name: 'packPtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5095365562698274096),
            name: 'casePtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1543623566249119710),
            name: 'packMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5933427280461946407),
            name: 'caseMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2284162390661475450),
            name: 'srp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3963744867625681565),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 710472740535663417),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7312585811299232527),
            name: 'case2Piece',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6826627845382847244),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2693007270983922014),
            name: 'activeStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1285221824459685295),
            name: 'otherUnitMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5308818305061830683),
            name: 'otherUnitPtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5938366650744880681),
            name: 'groupIdV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 52700326420294845),
            name: 'buttonDescriptionV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3353871455196093810),
            name: 'discountMargin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 2409105242905942758),
            name: 'skuCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(48, 2334896690265142400)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2978741655665988222),
            name: 'batchCode',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(49, 621491767245856628)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 4190252228184278253),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6495047070099882077),
            name: 'tax',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 7015547058315591980),
            name: 'specialPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 5040383282451388617),
            name: 'caseToPieceQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 7718375686503647140),
            name: 'caseToOtherUnitQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 3268317113973441245),
            name: 'otherUnitToPieceQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8081838116843671605),
            name: 'pieceToOtherUnitQuantity',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(55, 5667212583086681398),
      name: 'ProductPricingV1',
      lastPropertyId: const obx_int.IdUid(10, 7525055364769452187),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7880107342399341094),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6455258135302199438),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1559160489989185061),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1719536803556419321),
            name: 'casePrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1149679194663239803),
            name: 'type',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(50, 598833531998745820)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7563670496537695425),
            name: 'typeValue',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(51, 1179940873253044531)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5238937827911678778),
            name: 'skuCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(52, 2015031364255548462)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7047232707584715521),
            name: 'batchCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(53, 4868160942232942130)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2301330089173453594),
            name: 'priority',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(54, 5333716534964009318)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7525055364769452187),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(55, 5866571696375878552),
            relationTarget: 'ProductV1')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(56, 2938749215617578811),
      name: 'ProductV1',
      lastPropertyId: const obx_int.IdUid(50, 7829434812936439573),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1034086435223575152),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7935422367440549540),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 841314627192864452),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(56, 5532406661487058667)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8139419049699669709),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6409636737590321648),
            name: 'productDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2355532880347766290),
            name: 'suggestedQty',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 940527908516569452),
            name: 'suggestedCaseQty',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8848621089016809678),
            name: 'case2Piece',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8590527884747025710),
            name: 'images',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3908418337121499324),
            name: 'category',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(57, 6445094243783647527)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4980805775641542825),
            name: 'subCategory',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(58, 1345976719167352648)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8592327976396269694),
            name: 'subCategoryCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 582978523987929972),
            name: 'brand',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(59, 7439227233531532976)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6809317611942487034),
            name: 'skuCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(60, 1797715584668839028)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4762468520300025802),
            name: 'batchCode',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(61, 3472433736322666017)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1744945585512497878),
            name: 'priority',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(62, 3553249182000022417)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5733186863061648472),
            name: 'pieceSize',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(63, 2397535479861168325)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3612852129286873817),
            name: 'pieceSizeDesc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 6490596848871691633),
            name: 'suggestionText',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(64, 4209892108464528572)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 7813106481613554271),
            name: 'productTag',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(65, 679757466411513495)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1120315758534184683),
            name: 'itemClass',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(66, 6115004582480478665)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 5701974944953163395),
            name: 'packPtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 4916402206008920063),
            name: 'casePtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 9137661439536232879),
            name: 'packMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 1222703938320749488),
            name: 'mrp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 6490355105744099930),
            name: 'caseMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8980988442705119616),
            name: 'skuPriority',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 7862847198212164400),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 6524534189866348549),
            name: 'tax',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 9220265872702270017),
            name: 'marketSkuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 4540784495449591183),
            name: 'otherUnitMrp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 2403412654041033710),
            name: 'otherUnitToPieceQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 3581352589498261807),
            name: 'pieceToOtherUnitQuantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 8381909135189201153),
            name: 'otherUnitPtr',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 7217668958262028680),
            name: 'otherUnitName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 2266854297687324637),
            name: 'smartBuy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 771603345716228905),
            name: 'groupIdV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 6827951269854171026),
            name: 'itemDescV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 6693405286824787600),
            name: 'uomV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 6597050053344769128),
            name: 'manufacturingDateV1',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(41, 797261906739480621),
            name: 'buttonDescriptionV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(42, 8862016113068203044),
            name: 'basePackPtrV1',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(43, 8422801008792002373),
            name: 'baseCasePtrV1',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(44, 2237544232422529832),
            name: 'translation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(45, 2796866967204660202),
            name: 'productType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(46, 2612299714978771159),
            name: 'productCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(47, 4918975696791651904),
            name: 'srp',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(48, 220657061407462820),
            name: 'returnCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(49, 7714842387677673351),
            name: 'discountMargin',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(50, 7829434812936439573),
            name: 'eb2bCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(57, 4006152616057056840),
      name: 'RecommendedOrdersV1',
      lastPropertyId: const obx_int.IdUid(22, 216734197188399882),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2884673324959110066),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 523020481352441248),
            name: 'isFavourite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4324961861637167261),
            name: 'batchCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(67, 485479411306392258)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8154489430151509934),
            name: 'skuCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(68, 5702141891559226933)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3710065454442706706),
            name: 'pieceQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 699457873000544753),
            name: 'caseQuantity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1762101763280163126),
            name: 'skuPriority',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7615144379230658031),
            name: 'outletCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(69, 8628298073495349948)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2737304787155157755),
            name: 'recommendationType',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(70, 1987201130346553032)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2230530261459596353),
            name: 'underperformanceAttr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6215567042337637433),
            name: 'suggestQty',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5549408994961677180),
            name: 'priority',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(71, 6983393479321779651)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2051429199677547410),
            name: 'totalAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8666859657451461718),
            name: 'supportKPI',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 2227721952626841451),
            name: 'extendedAttributesV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 8393324857496686359),
            name: 'skuProbabilityV1',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2484046780521064375),
            name: 'startDateV1',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 9187593894518560131),
            name: 'endDateV1',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8670143229326890431),
            name: 'activeStatusV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 6590039488263519550),
            name: 'recommendationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7210701505386621286),
            name: 'recommendationTag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 216734197188399882),
            name: 'basketId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(58, 4994963032217921872),
      name: 'ReturnModelV1',
      lastPropertyId: const obx_int.IdUid(10, 5342692199348794498),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8236998523749812873),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3550439509349877860),
            name: 'skuCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2758520160625865904),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5160174710045992329),
            name: 'reasonIdV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7829224409625204657),
            name: 'reasonV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3157742755149993407),
            name: 'otherReasonV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4029574217677947298),
            name: 'csQty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 464080528954717166),
            name: 'pcQty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5916261194680644486),
            name: 'invoiceV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5342692199348794498),
            name: 'mrpV1',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(59, 8653325948521400245),
      name: 'RewardsDisbursmentV1',
      lastPropertyId: const obx_int.IdUid(10, 2182515065751735434),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5008614987926772321),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8409850419762575616),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7686488228453488764),
            name: 'amount',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9198088242810085658),
            name: 'tds',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2610102899428289908),
            name: 'total',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2944558223088376139),
            name: 'invoiceNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1596865163530794285),
            name: 'monthNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8121226410002474092),
            name: 'payoutYear',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2347451098296154178),
            name: 'transactionID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2182515065751735434),
            name: 'bankName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(60, 3667751185926214078),
      name: 'SalesRepOutletsV1',
      lastPropertyId: const obx_int.IdUid(14, 1900183644295878899),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3835896343658653791),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5642028547305005849),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3491211524969801456),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6292237980713877100),
            name: 'outletName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5391281746752517659),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3569960935911130949),
            name: 'contactNo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 870188460148334354),
            name: 'currentPJPUsersV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8502753782521641423),
            name: 'totalClicked',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2934075316975110886),
            name: 'todayClicked',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3834677872602035862),
            name: 'lastOrderDateV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7200253518108982170),
            name: 'appLink',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 852326784772322835),
            name: 'totalOrder',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 325346661772836123),
            name: 'todayOrder',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1900183644295878899),
            name: 'registered',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(61, 4192832790005729140),
      name: 'Schemes',
      lastPropertyId: const obx_int.IdUid(40, 650820505821317573),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1386820898500229823),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7814702650769385183),
            name: 'discountId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1569211374581339285),
            name: 'batchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5906372037547870228),
            name: 'priority',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 836515976019992774),
            name: 'schemeDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2979191801163343516),
            name: 'supplier',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1973923793720834777),
            name: 'startDate',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 729116988434459273),
            name: 'endDate',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6205208023155112570),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2468641998670356497),
            name: 'criteria',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8517361285638578602),
            name: 'maxBudget',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3906725842998265296),
            name: 'maxTerm',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1169720914054470668),
            name: 'programLevel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6912604020781233156),
            name: 'mustBuyQty',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7486047959369116012),
            name: 'discountedBatchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1416130296646338504),
            name: 'programNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4751215261357122597),
            name: 'slabsInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5912113986145008453),
            name: 'minMaxCond',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7138317081484394633),
            name: 'overNAbove',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5340741493822123897),
            name: 'mustBuyAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1719157205137723602),
            name: 'channel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 2675043264728291552),
            name: 'distributionChannel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 795924337507494352),
            name: 'subChannel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 1747243489664231871),
            name: 'outletType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 3639023068261626152),
            name: 'outletCategory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 1406707208893445768),
            name: 'outletDivision',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 1111261740361466036),
            name: 'outletClass',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 1236877527910405381),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 3559449328392561778),
            name: 'marketId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 6997919856708290717),
            name: 'marketName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 4615946958670316417),
            name: 'bannerBlob',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 5739766256951048321),
            name: 'bannerPriority',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 5199363768594790437),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 5402133953393374894),
            name: 'color',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 1522671789391452653),
            name: 'outletExclusionKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(36, 8625605004899868931),
            name: 'outletExclusionValues',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(37, 5396287981534987301),
            name: 'itemEach',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 3135512500311831495),
            name: 'extendedAttributes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(39, 7286091637526828915),
            name: 'activeStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(40, 650820505821317573),
            name: 'skuCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(62, 1510497003640022936),
      name: 'SearchHistoryModelV1',
      lastPropertyId: const obx_int.IdUid(2, 6224681787327256869),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8859514758489201726),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6224681787327256869),
            name: 'searchHistory',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(63, 713815168071208090),
      name: 'SecondaryProductIntentV1',
      lastPropertyId: const obx_int.IdUid(4, 6457115385893064593),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1912843136527261667),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1141706022197375242),
            name: 'suggestedQtyV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2745933440930109466),
            name: 'outletCodeWithBatchCodeV1',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(72, 1711142684758531898)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6457115385893064593),
            name: 'outletCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(73, 1814013234655156855))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(64, 4781190324697239006),
      name: 'SecondaryProductV1',
      lastPropertyId: const obx_int.IdUid(10, 6262720502547884972),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5478024271363288029),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 137035563420039789),
            name: 'batchCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(74, 6837051854362519710)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8282303844388120105),
            name: 'skuCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(75, 5960944949206116447)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7639029709285383781),
            name: 'brand',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4589696987035744201),
            name: 'feature',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(76, 3429148398259073427)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2748206707022086947),
            name: 'channel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3169089011407250482),
            name: 'tagVisibility',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4300908898376055886),
            name: 'quantity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2421896357218672693),
            name: 'minQtyForEarnPoints',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6262720502547884972),
            name: 'secondaryProductTag',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(65, 3505733019287662663),
      name: 'SkuDescriptionV1',
      lastPropertyId: const obx_int.IdUid(3, 7109502046446622815),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 315485444043580687),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7773601290457714574),
            name: 'skuCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(77, 1999580264366283449)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7109502046446622815),
            name: 'skuDescription',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(66, 2966140978388676988),
      name: 'StockQuantityV1',
      lastPropertyId: const obx_int.IdUid(4, 5017295175272747244),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4625969988485237726),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4871318479430342319),
            name: 'batchCode',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(78, 3317125031276931826)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2711903196170975663),
            name: 'qty',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5017295175272747244),
            name: 'supplier',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(67, 8453895798902189492),
      name: 'SupplierV1',
      lastPropertyId: const obx_int.IdUid(12, 2572497643583805698),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1943850793894376401),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4824152388007361380),
            name: 'supplierId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(79, 8362250710716617385)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3512517355285140611),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2514760702683981050),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7179700655104192119),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4382131920958003584),
            name: 'min',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2854109585321446178),
            name: 'max',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3737668683887327075),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6049498202062161857),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3654099063150136371),
            name: 'orderFulfillmentTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4115578322578882262),
            name: 'rcsId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2572497643583805698),
            name: 'sifyId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(68, 5456790530727038575),
      name: 'TargetModel',
      lastPropertyId: const obx_int.IdUid(3, 1138107710520960937),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1037071010676284599),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8697459456347337270),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1138107710520960937),
            name: 'target',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(69, 1766819488647606257),
      name: 'UnavailableProductUIV1',
      lastPropertyId: const obx_int.IdUid(15, 5396792073715496272),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8478711652202766099),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1771008294501958300),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5894358795802590934),
            name: 'manufacturingDateV1',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8543285493164246580),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(80, 829438229649684713)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4494979905675281588),
            name: 'batchCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1289407385024463589),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1548413015656057162),
            name: 'images',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6370273516413620630),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 653899129259301732),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 9166450270249984896),
            name: 'casePrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7647311562358908344),
            name: 'caseToPieceQty',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 180306962424827952),
            name: 'caseMrp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 873462292047081684),
            name: 'mrp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3737562457829558937),
            name: 'pieceSize',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5396792073715496272),
            name: 'buttonDescriptionV1',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(70, 8386087763374177176),
      name: 'UserInfo',
      lastPropertyId: const obx_int.IdUid(9, 6194635031227014),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 83232994654178160),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8798191275451037560),
            name: 'userAccountId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3286118461451661164),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6987047028338715592),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 905411531850422524),
            name: 'designation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6793938511190209356),
            name: 'immediateParent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7590759319856297439),
            name: 'locationHierarchy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 640279293890082886),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6194635031227014),
            name: 'email',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(71, 4446949293157496164),
      name: 'UserV1',
      lastPropertyId: const obx_int.IdUid(17, 7996873424113354485),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8896049545415029482),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 507532690951687540),
            name: 'lob',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9182798763349162342),
            name: 'userAccountId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 775882212812914839),
            name: 'loginId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8705740441610771470),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8021366505700279637),
            name: 'designation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1845055688711432729),
            name: 'immediateParent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 253097973605296789),
            name: 'locationHierarchy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 993517772747178941),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7626933412815142363),
            name: 'dialCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4997184045660306396),
            name: 'verified',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5823699161322524462),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4248458697031894625),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 824379127380668353),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3049384652901405766),
            name: 'orderSeqNumV1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6667114811139418217),
            name: 'salesRepId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 7996873424113354485),
            name: 'roles',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(72, 4502741350732064947),
      name: 'WorkWithSurveyTask',
      lastPropertyId: const obx_int.IdUid(6, 6252637935571551730),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7036862089327007113),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4669980444629927016),
            name: 'taskDescription',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8875334318465710145),
            name: 'taskStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2750756922791659109),
            name: 'outletCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5499001131188067756),
            name: 'taskId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6252637935571551730),
            name: 'enabled',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(72, 4502741350732064947),
      lastIndexId: const obx_int.IdUid(80, 829438229649684713),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        1827095105600098353,
        2524466825481174468,
        3863589966537408313,
        7217507443300405349,
        3161790665228945412,
        6880328888773506052
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5820640295826334785,
        4173048253509063173,
        7965117019691586707,
        1617084687499753387,
        2193880135488277992,
        5299667493284507540,
        7935152307960105333,
        5283366505430105646,
        2662280316289261595,
        6798878264951483778,
        4437088491137862310,
        3229684175756732231,
        2913989538589189527,
        7278237028494146801,
        7936629388052193180,
        2762368240334218787,
        7193859110092804377,
        1334918761787563019,
        8383841122493790771,
        1120612351470846669,
        8573864895809876198,
        96204522769396039,
        8180035429311787683,
        188003889739317420,
        1873661385966499823,
        5843633401450531359,
        9101510814907873645,
        6274034571537809124,
        886747521272048107,
        4926085163146677530,
        1997623799218850871,
        129301651048035146,
        5362376461291546590,
        8644939521719000134,
        3991357214608430718,
        3121732335844985503,
        8241085857322402360,
        7950495173597200342,
        8727381122643314526,
        5579929476223219875,
        6037073434289945882,
        4696295339495087849
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AdditionalMobileNumber: obx_int.EntityDefinition<AdditionalMobileNumber>(
        model: _entities[0],
        toOneRelations: (AdditionalMobileNumber object) => [],
        toManyRelations: (AdditionalMobileNumber object) => {},
        getId: (AdditionalMobileNumber object) => object.id,
        setId: (AdditionalMobileNumber object, int id) {
          object.id = id;
        },
        objectToFB: (AdditionalMobileNumber object, fb.Builder fbb) {
          final mobileNumberOffset = fbb.writeString(object.mobileNumber);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mobileNumberOffset);
          fbb.addOffset(2, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final mobileNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = AdditionalMobileNumber(
              id: idParam, mobileNumber: mobileNumberParam, uid: uidParam);

          return object;
        }),
    ApplicationDataV1: obx_int.EntityDefinition<ApplicationDataV1>(
        model: _entities[1],
        toOneRelations: (ApplicationDataV1 object) => [],
        toManyRelations: (ApplicationDataV1 object) => {},
        getId: (ApplicationDataV1 object) => object.id,
        setId: (ApplicationDataV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ApplicationDataV1 object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = ApplicationDataV1(
              id: idParam, name: nameParam, value: valueParam);

          return object;
        }),
    AttendanceModelV1: obx_int.EntityDefinition<AttendanceModelV1>(
        model: _entities[2],
        toOneRelations: (AttendanceModelV1 object) => [],
        toManyRelations: (AttendanceModelV1 object) => {},
        getId: (AttendanceModelV1 object) => object.id,
        setId: (AttendanceModelV1 object, int id) {
          object.id = id;
        },
        objectToFB: (AttendanceModelV1 object, fb.Builder fbb) {
          final loginIdOffset = fbb.writeString(object.loginId);
          final dateOffset = fbb.writeString(object.date);
          final attendanceTypeOffset = fbb.writeString(object.attendanceType);
          final descriptionOffset = fbb.writeString(object.description);
          final extendedAttributesOffset =
              fbb.writeString(object.extendedAttributes);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, loginIdOffset);
          fbb.addOffset(2, dateOffset);
          fbb.addOffset(3, attendanceTypeOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, extendedAttributesOffset);
          fbb.addOffset(6, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final attendanceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final extendedAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = AttendanceModelV1(
              loginId: loginIdParam,
              date: dateParam,
              attendanceType: attendanceTypeParam,
              description: descriptionParam,
              extendedAttributes: extendedAttributesParam,
              status: statusParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    BackInStock: obx_int.EntityDefinition<BackInStock>(
        model: _entities[3],
        toOneRelations: (BackInStock object) => [],
        toManyRelations: (BackInStock object) => {},
        getId: (BackInStock object) => object.id,
        setId: (BackInStock object, int id) {
          object.id = id;
        },
        objectToFB: (BackInStock object, fb.Builder fbb) {
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuCodeOffset);
          fbb.addBool(2, object.productPurchased);
          fbb.addOffset(3, dateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final productPurchasedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = BackInStock(
              id: idParam,
              skuCode: skuCodeParam,
              productPurchased: productPurchasedParam,
              date: dateParam);

          return object;
        }),
    BandedPricingV1: obx_int.EntityDefinition<BandedPricingV1>(
        model: _entities[4],
        toOneRelations: (BandedPricingV1 object) => [],
        toManyRelations: (BandedPricingV1 object) => {},
        getId: (BandedPricingV1 object) => object.id,
        setId: (BandedPricingV1 object, int id) {
          object.id = id;
        },
        objectToFB: (BandedPricingV1 object, fb.Builder fbb) {
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final bandedGroupIdOffset = object.bandedGroupId == null
              ? null
              : fbb.writeString(object.bandedGroupId!);
          final yd00Offset =
              object.yd00 == null ? null : fbb.writeString(object.yd00!);
          final yd01Offset =
              object.yd01 == null ? null : fbb.writeString(object.yd01!);
          final yd02Offset =
              object.yd02 == null ? null : fbb.writeString(object.yd02!);
          final yt01Offset =
              object.yt01 == null ? null : fbb.writeString(object.yt01!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, batchCodeOffset);
          fbb.addOffset(2, bandedGroupIdOffset);
          fbb.addOffset(3, yd00Offset);
          fbb.addOffset(4, yd01Offset);
          fbb.addOffset(5, yd02Offset);
          fbb.addOffset(6, yt01Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bandedGroupIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final yd00Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final yd01Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final yd02Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final yt01Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = BandedPricingV1(
              id: idParam,
              batchCode: batchCodeParam,
              bandedGroupId: bandedGroupIdParam,
              yd00: yd00Param,
              yd01: yd01Param,
              yd02: yd02Param,
              yt01: yt01Param);

          return object;
        }),
    BannerV1: obx_int.EntityDefinition<BannerV1>(
        model: _entities[5],
        toOneRelations: (BannerV1 object) => [],
        toManyRelations: (BannerV1 object) => {},
        getId: (BannerV1 object) => object.id,
        setId: (BannerV1 object, int id) {
          object.id = id;
        },
        objectToFB: (BannerV1 object, fb.Builder fbb) {
          final bannerNameOffset = fbb.writeString(object.bannerName);
          final bannerDescOffset = fbb.writeString(object.bannerDesc);
          final bannerIdOffset = fbb.writeString(object.bannerId);
          final bannerTypeOffset = fbb.writeString(object.bannerType);
          final bannerTemplateOffset = fbb.writeString(object.bannerTemplate);
          final mediaUrlOffset = fbb.writeString(object.mediaUrl);
          final mediaNameOffset = fbb.writeString(object.mediaName);
          final fileNameOffset = fbb.writeString(object.fileName);
          final blobKeyOffset = fbb.writeString(object.blobKey);
          final batchCodeOffset = fbb.writeList(
              object.batchCode.map(fbb.writeString).toList(growable: false));
          final elementComponentsOffset =
              fbb.writeString(object.elementComponents);
          final bankNameOffset = object.bankName == null
              ? null
              : fbb.writeString(object.bankName!);
          final lastModifiedTimeOffset =
              fbb.writeString(object.lastModifiedTime);
          final bannerParentIdOffset = object.bannerParentId == null
              ? null
              : fbb.writeString(object.bannerParentId!);
          final extendedAttributesV2Offset =
              fbb.writeString(object.extendedAttributesV2);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, bannerNameOffset);
          fbb.addOffset(2, bannerDescOffset);
          fbb.addOffset(3, bannerIdOffset);
          fbb.addInt64(4, object.bannerSequence);
          fbb.addOffset(5, bannerTypeOffset);
          fbb.addOffset(6, bannerTemplateOffset);
          fbb.addOffset(7, mediaUrlOffset);
          fbb.addOffset(8, mediaNameOffset);
          fbb.addOffset(9, fileNameOffset);
          fbb.addOffset(10, blobKeyOffset);
          fbb.addOffset(11, batchCodeOffset);
          fbb.addOffset(12, elementComponentsOffset);
          fbb.addOffset(13, bankNameOffset);
          fbb.addOffset(14, lastModifiedTimeOffset);
          fbb.addOffset(15, bannerParentIdOffset);
          fbb.addOffset(16, extendedAttributesV2Offset);
          fbb.addInt64(17, object.bannerPriority);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final bannerNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bannerDescParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final bannerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final bannerSequenceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final bannerTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final mediaNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final mediaUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final bannerTemplateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final fileNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final blobKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final batchCodeParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 26, []);
          final elementComponentsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final extendedAttributesV2Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 36, '');
          final bankNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final bannerParentIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final bannerPriorityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38);
          final lastModifiedTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final object = BannerV1(
              id: idParam,
              bannerName: bannerNameParam,
              bannerDesc: bannerDescParam,
              bannerId: bannerIdParam,
              bannerSequence: bannerSequenceParam,
              bannerType: bannerTypeParam,
              mediaName: mediaNameParam,
              mediaUrl: mediaUrlParam,
              bannerTemplate: bannerTemplateParam,
              fileName: fileNameParam,
              blobKey: blobKeyParam,
              batchCode: batchCodeParam,
              elementComponents: elementComponentsParam,
              extendedAttributesV2: extendedAttributesV2Param,
              bankName: bankNameParam,
              bannerParentId: bannerParentIdParam,
              bannerPriority: bannerPriorityParam,
              lastModifiedTime: lastModifiedTimeParam);

          return object;
        }),
    CartV1: obx_int.EntityDefinition<CartV1>(
        model: _entities[6],
        toOneRelations: (CartV1 object) => [],
        toManyRelations: (CartV1 object) => {},
        getId: (CartV1 object) => object.id,
        setId: (CartV1 object, int id) {
          object.id = id;
        },
        objectToFB: (CartV1 object, fb.Builder fbb) {
          final refIdOffset = fbb.writeString(object.refId);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final qtyUnitOffset = fbb.writeString(object.qtyUnit);
          final skuDescOffset = fbb.writeString(object.skuDesc);
          final visitedOffersOffset = fbb.writeList(object.visitedOffers
              .map(fbb.writeString)
              .toList(growable: false));
          final supplierOffset = fbb.writeString(object.supplier);
          final itemDescV1Offset = fbb.writeString(object.itemDescV1);
          final typeV1Offset = fbb.writeString(object.typeV1);
          final buttonDescriptionV1Offset =
              fbb.writeString(object.buttonDescriptionV1);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addInt64(2, object.manufacturingDateV1.millisecondsSinceEpoch);
          fbb.addOffset(3, refIdOffset);
          fbb.addOffset(4, batchCodeOffset);
          fbb.addOffset(5, outletCodeOffset);
          fbb.addInt64(6, object.pieceQuantity);
          fbb.addInt64(7, object.caseQuantity);
          fbb.addInt64(8, object.otherUnitQuantity);
          fbb.addOffset(9, qtyUnitOffset);
          fbb.addFloat64(10, object.amount);
          fbb.addFloat64(11, object.price);
          fbb.addFloat64(12, object.margin);
          fbb.addFloat64(13, object.netPtr);
          fbb.addFloat64(14, object.maxDiscount);
          fbb.addFloat64(15, object.volume);
          fbb.addFloat64(16, object.savings);
          fbb.addOffset(17, skuDescOffset);
          fbb.addOffset(18, visitedOffersOffset);
          fbb.addOffset(19, supplierOffset);
          fbb.addOffset(20, itemDescV1Offset);
          fbb.addInt64(21, object.stockQtyV1);
          fbb.addOffset(22, typeV1Offset);
          fbb.addOffset(23, buttonDescriptionV1Offset);
          fbb.addInt64(24, object.creditQty);
          fbb.addFloat64(25, object.ssp);
          fbb.addFloat64(26, object.discountMargin);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final refIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final savingsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final volumeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final maxDiscountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final netPtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final marginParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final qtyUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final caseQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final pieceQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final otherUnitQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final skuDescParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final visitedOffersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 40, []);
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final stockQtyV1Param =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          final itemDescV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final typeV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 48, '');
          final buttonDescriptionV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 50, '');
          final manufacturingDateV1Param = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final creditQtyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          final sspParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 54, 0);
          final discountMarginParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 56, 0);
          final object = CartV1(
              id: idParam,
              refId: refIdParam,
              savings: savingsParam,
              volume: volumeParam,
              maxDiscount: maxDiscountParam,
              netPtr: netPtrParam,
              margin: marginParam,
              amount: amountParam,
              price: priceParam,
              qtyUnit: qtyUnitParam,
              caseQuantity: caseQuantityParam,
              outletCode: outletCodeParam,
              batchCode: batchCodeParam,
              pieceQuantity: pieceQuantityParam,
              otherUnitQuantity: otherUnitQuantityParam,
              skuDesc: skuDescParam,
              lastModified: lastModifiedParam,
              visitedOffers: visitedOffersParam,
              supplier: supplierParam,
              stockQtyV1: stockQtyV1Param,
              itemDescV1: itemDescV1Param,
              typeV1: typeV1Param,
              buttonDescriptionV1: buttonDescriptionV1Param,
              manufacturingDateV1: manufacturingDateV1Param,
              creditQty: creditQtyParam,
              ssp: sspParam,
              discountMargin: discountMarginParam);

          return object;
        }),
    CatalogueV1: obx_int.EntityDefinition<CatalogueV1>(
        model: _entities[7],
        toOneRelations: (CatalogueV1 object) => [],
        toManyRelations: (CatalogueV1 object) => {},
        getId: (CatalogueV1 object) => object.id,
        setId: (CatalogueV1 object, int id) {
          object.id = id;
        },
        objectToFB: (CatalogueV1 object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final productDescriptionOffset =
              fbb.writeString(object.productDescription);
          final imagesOffset = fbb.writeList(
              object.images.map(fbb.writeString).toList(growable: false));
          final categoryOffset = fbb.writeString(object.category);
          final subCategoryOffset = fbb.writeString(object.subCategory);
          final brandOffset = fbb.writeString(object.brand);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final pieceSizeDescOffset = fbb.writeString(object.pieceSizeDesc);
          final suggestionTextOffset = fbb.writeString(object.suggestionText);
          final productTagOffset = fbb.writeString(object.productTag);
          final itemClassOffset = fbb.writeString(object.itemClass);
          final featureOffset = fbb.writeString(object.feature);
          final sellingStoryOffset = fbb.writeString(object.sellingStory);
          final subCategoryCodeOffset = fbb.writeString(object.subCategoryCode);
          final isFavouriteOffset = fbb.writeString(object.isFavourite);
          final recommendationTypeOffset =
              fbb.writeString(object.recommendationType);
          final offersOffset = fbb.writeString(object.offers);
          final supplierOffset = fbb.writeString(object.supplier);
          final marketSkuCodeOffset = fbb.writeString(object.marketSkuCode);
          final additionalSchemeDescriptionOffset =
              fbb.writeString(object.additionalSchemeDescription);
          final otherUnitNameOffset = fbb.writeString(object.otherUnitName);
          final smartBuyOffset = fbb.writeString(object.smartBuy);
          final groupIdV1Offset = fbb.writeString(object.groupIdV1);
          final recommendedAttributesV2Offset =
              fbb.writeString(object.recommendedAttributesV2);
          final maxBenefitStringV1Offset =
              fbb.writeString(object.maxBenefitStringV1);
          final itemDescV1Offset = fbb.writeString(object.itemDescV1);
          final uomV1Offset = fbb.writeString(object.uomV1);
          final buttonDescriptionV1Offset =
              fbb.writeString(object.buttonDescriptionV1);
          final typeV1Offset = fbb.writeString(object.typeV1);
          final recommendationIdOffset =
              fbb.writeString(object.recommendationId);
          final translationOffset = object.translation == null
              ? null
              : fbb.writeString(object.translation!);
          final productCodeOffset = fbb.writeString(object.productCode);
          final returnCodeOffset = fbb.writeString(object.returnCode);
          final secondaryProductTagOffset =
              fbb.writeString(object.secondaryProductTag);
          final eb2bCodeOffset = fbb.writeString(object.eb2bCode);
          fbb.startTable(72);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addInt64(2, object.manufacturingDateV1.millisecondsSinceEpoch);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addOffset(5, productDescriptionOffset);
          fbb.addFloat64(6, object.suggestedQty);
          fbb.addFloat64(7, object.suggestedCaseQty);
          fbb.addFloat64(8, object.case2Piece);
          fbb.addOffset(9, imagesOffset);
          fbb.addOffset(10, categoryOffset);
          fbb.addOffset(11, subCategoryOffset);
          fbb.addOffset(12, brandOffset);
          fbb.addOffset(13, skuCodeOffset);
          fbb.addOffset(14, batchCodeOffset);
          fbb.addInt64(15, object.priority);
          fbb.addInt64(16, object.pieceSize);
          fbb.addOffset(17, pieceSizeDescOffset);
          fbb.addOffset(18, suggestionTextOffset);
          fbb.addOffset(19, productTagOffset);
          fbb.addOffset(20, itemClassOffset);
          fbb.addFloat64(21, object.packPtr);
          fbb.addFloat64(22, object.casePtr);
          fbb.addFloat64(23, object.basePackPtrV1);
          fbb.addFloat64(24, object.baseCasePtrV1);
          fbb.addFloat64(25, object.packMrp);
          fbb.addInt64(26, object.mrp);
          fbb.addFloat64(27, object.caseMrp);
          fbb.addOffset(28, featureOffset);
          fbb.addOffset(29, sellingStoryOffset);
          fbb.addOffset(30, subCategoryCodeOffset);
          fbb.addInt64(31, object.recommendationPriority);
          fbb.addInt64(32, object.customLevel);
          fbb.addInt64(33, object.level);
          fbb.addInt64(34, object.searchIndex);
          fbb.addOffset(35, isFavouriteOffset);
          fbb.addOffset(36, recommendationTypeOffset);
          fbb.addBool(37, object.isRecommended);
          fbb.addOffset(38, offersOffset);
          fbb.addOffset(39, supplierOffset);
          fbb.addFloat64(40, object.tax);
          fbb.addOffset(41, marketSkuCodeOffset);
          fbb.addFloat64(42, object.otherUnitMrp);
          fbb.addFloat64(43, object.otherUnitToPieceQuantity);
          fbb.addFloat64(44, object.pieceToOtherUnitQuantity);
          fbb.addFloat64(45, object.otherUnitPtr);
          fbb.addOffset(46, additionalSchemeDescriptionOffset);
          fbb.addOffset(47, otherUnitNameOffset);
          fbb.addOffset(48, smartBuyOffset);
          fbb.addInt64(49, object.stockQty);
          fbb.addOffset(50, groupIdV1Offset);
          fbb.addOffset(51, recommendedAttributesV2Offset);
          fbb.addOffset(52, maxBenefitStringV1Offset);
          fbb.addOffset(53, itemDescV1Offset);
          fbb.addOffset(54, uomV1Offset);
          fbb.addOffset(55, buttonDescriptionV1Offset);
          fbb.addInt64(56, object.pointsV1);
          fbb.addOffset(57, typeV1Offset);
          fbb.addInt64(58, object.bandedMaxQuantityV1);
          fbb.addInt64(59, object.minQtyForEarnPoints);
          fbb.addOffset(60, recommendationIdOffset);
          fbb.addOffset(61, translationOffset);
          fbb.addInt64(62, object.incentivePoints);
          fbb.addOffset(63, productCodeOffset);
          fbb.addFloat64(64, object.srp);
          fbb.addOffset(65, returnCodeOffset);
          fbb.addFloat64(66, object.discountMargin);
          fbb.addBool(67, object.outOfStock);
          fbb.addBool(68, object.isNotify);
          fbb.addOffset(69, secondaryProductTagOffset);
          fbb.addOffset(70, eb2bCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final case2PieceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final translationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 126);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final suggestedQtyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final suggestedCaseQtyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final imagesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 22, []);
          final brandParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final productDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final subCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final pieceSizeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final pieceSizeDescParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 38, '');
          final suggestionTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, '');
          final productTagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final itemClassParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final packPtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 46, 0);
          final casePtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final basePackPtrV1Param = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 50);
          final baseCasePtrV1Param = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 52);
          final packMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 54, 0);
          final caseMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 58, 0);
          final mrpParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          final otherUnitMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 88, 0);
          final otherUnitToPieceQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 90, 0);
          final pieceToOtherUnitQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 92, 0);
          final otherUnitPtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 94, 0);
          final otherUnitNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 98, '');
          final featureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 60, '');
          final offersParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 80, '');
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 70, 0);
          final taxParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 84, 0);
          final customLevelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0);
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final marketSkuCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 86, '');
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final sellingStoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 62, '');
          final isFavouriteParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 74, '');
          final searchIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 72, 0);
          final recommendationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 76, '');
          final isRecommendedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 78, false);
          final subCategoryCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 64, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 82, '');
          final additionalSchemeDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 96, '');
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final recommendationPriorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0);
          final stockQtyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 102, 0);
          final groupIdV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 104, '');
          final smartBuyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 100, '');
          final maxBenefitStringV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 108, '');
          final recommendedAttributesV2Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 106, '');
          final itemDescV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 110, '');
          final uomV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 112, '');
          final buttonDescriptionV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 114, '');
          final pointsV1Param =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 116, 0);
          final typeV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 118, '');
          final manufacturingDateV1Param = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final bandedMaxQuantityV1Param =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 120, 0);
          final recommendationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 124, '');
          final minQtyForEarnPointsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 122, 0);
          final productCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 130, '');
          final incentivePointsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 128);
          final srpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 132, 0);
          final discountMarginParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 136, 0);
          final eb2bCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 144, '');
          final returnCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 134, '');
          final secondaryProductTagParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 142, '');
          final outOfStockParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 138, false);
          final isNotifyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 140, false);
          final object = CatalogueV1(
              id: idParam,
              case2Piece: case2PieceParam,
              translation: translationParam,
              name: nameParam,
              description: descriptionParam,
              suggestedQty: suggestedQtyParam,
              suggestedCaseQty: suggestedCaseQtyParam,
              images: imagesParam,
              brand: brandParam,
              productDescription: productDescriptionParam,
              category: categoryParam,
              subCategory: subCategoryParam,
              pieceSize: pieceSizeParam,
              pieceSizeDesc: pieceSizeDescParam,
              suggestionText: suggestionTextParam,
              productTag: productTagParam,
              itemClass: itemClassParam,
              packPtr: packPtrParam,
              casePtr: casePtrParam,
              basePackPtrV1: basePackPtrV1Param,
              baseCasePtrV1: baseCasePtrV1Param,
              packMrp: packMrpParam,
              caseMrp: caseMrpParam,
              mrp: mrpParam,
              otherUnitMrp: otherUnitMrpParam,
              otherUnitToPieceQuantity: otherUnitToPieceQuantityParam,
              pieceToOtherUnitQuantity: pieceToOtherUnitQuantityParam,
              otherUnitPtr: otherUnitPtrParam,
              otherUnitName: otherUnitNameParam,
              feature: featureParam,
              offers: offersParam,
              skuCode: skuCodeParam,
              level: levelParam,
              tax: taxParam,
              customLevel: customLevelParam,
              batchCode: batchCodeParam,
              marketSkuCode: marketSkuCodeParam,
              lastModified: lastModifiedParam,
              sellingStory: sellingStoryParam,
              isFavourite: isFavouriteParam,
              searchIndex: searchIndexParam,
              recommendationType: recommendationTypeParam,
              isRecommended: isRecommendedParam,
              subCategoryCode: subCategoryCodeParam,
              supplier: supplierParam,
              additionalSchemeDescription: additionalSchemeDescriptionParam,
              priority: priorityParam,
              recommendationPriority: recommendationPriorityParam,
              stockQty: stockQtyParam,
              groupIdV1: groupIdV1Param,
              smartBuy: smartBuyParam,
              maxBenefitStringV1: maxBenefitStringV1Param,
              recommendedAttributesV2: recommendedAttributesV2Param,
              itemDescV1: itemDescV1Param,
              uomV1: uomV1Param,
              buttonDescriptionV1: buttonDescriptionV1Param,
              pointsV1: pointsV1Param,
              typeV1: typeV1Param,
              manufacturingDateV1: manufacturingDateV1Param,
              bandedMaxQuantityV1: bandedMaxQuantityV1Param,
              recommendationId: recommendationIdParam,
              minQtyForEarnPoints: minQtyForEarnPointsParam,
              productCode: productCodeParam,
              incentivePoints: incentivePointsParam,
              srp: srpParam,
              discountMargin: discountMarginParam,
              eb2bCode: eb2bCodeParam,
              returnCode: returnCodeParam,
              secondaryProductTag: secondaryProductTagParam,
              outOfStock: outOfStockParam,
              isNotify: isNotifyParam);

          return object;
        }),
    ConfigurationV1: obx_int.EntityDefinition<ConfigurationV1>(
        model: _entities[8],
        toOneRelations: (ConfigurationV1 object) => [],
        toManyRelations: (ConfigurationV1 object) => {},
        getId: (ConfigurationV1 object) => object.id,
        setId: (ConfigurationV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ConfigurationV1 object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final valueOffset = fbb.writeString(object.value);
          final roleOffset = fbb.writeString(object.role);
          final featureOffset = fbb.writeString(object.feature);
          final domainTypeOffset = fbb.writeString(object.domainType);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, valueOffset);
          fbb.addOffset(3, roleOffset);
          fbb.addOffset(4, featureOffset);
          fbb.addOffset(5, domainTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final featureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final domainTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = ConfigurationV1(
              id: idParam,
              name: nameParam,
              value: valueParam,
              role: roleParam,
              feature: featureParam,
              domainType: domainTypeParam);

          return object;
        }),
    ConsumerCatalogV1: obx_int.EntityDefinition<ConsumerCatalogV1>(
        model: _entities[9],
        toOneRelations: (ConsumerCatalogV1 object) => [],
        toManyRelations: (ConsumerCatalogV1 object) => {},
        getId: (ConsumerCatalogV1 object) => object.id,
        setId: (ConsumerCatalogV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ConsumerCatalogV1 object, fb.Builder fbb) {
          final skuOrderedOffset = fbb.writeString(object.skuOrdered);
          final skuSelectedOffset = fbb.writeString(object.skuSelected);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuOrderedOffset);
          fbb.addOffset(2, skuSelectedOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final skuOrderedParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final skuSelectedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = ConsumerCatalogV1(
              id: idParam,
              skuOrdered: skuOrderedParam,
              skuSelected: skuSelectedParam);

          return object;
        }),
    Coupons: obx_int.EntityDefinition<Coupons>(
        model: _entities[10],
        toOneRelations: (Coupons object) => [],
        toManyRelations: (Coupons object) => {},
        getId: (Coupons object) => object.id,
        setId: (Coupons object, int id) {
          object.id = id;
        },
        objectToFB: (Coupons object, fb.Builder fbb) {
          final discountIdOffset = fbb.writeString(object.discountId);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final schemeDescriptionOffset =
              fbb.writeString(object.schemeDescription);
          final supplierOffset = fbb.writeString(object.supplier);
          final typeOffset = fbb.writeString(object.type);
          final criteriaOffset = fbb.writeString(object.criteria);
          final programLevelOffset = fbb.writeString(object.programLevel);
          final discountedBatchCodeOffset =
              fbb.writeString(object.discountedBatchCode);
          final programNumberOffset = fbb.writeString(object.programNumber);
          final slabsInfoOffset = fbb.writeString(object.slabsInfo);
          final minMaxCondOffset = fbb.writeString(object.minMaxCond);
          final mustBuyAttributesOffset =
              fbb.writeString(object.mustBuyAttributes);
          final channelOffset = fbb.writeString(object.channel);
          final distributionChannelOffset =
              fbb.writeString(object.distributionChannel);
          final subChannelOffset = fbb.writeString(object.subChannel);
          final outletTypeOffset = fbb.writeString(object.outletType);
          final outletCategoryOffset = fbb.writeString(object.outletCategory);
          final outletDivisionOffset = fbb.writeString(object.outletDivision);
          final outletClassOffset = fbb.writeString(object.outletClass);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final marketIdOffset = fbb.writeString(object.marketId);
          final marketNameOffset = fbb.writeString(object.marketName);
          final bannerBlobOffset = object.bannerBlob == null
              ? null
              : fbb.writeString(object.bannerBlob!);
          final loginIdOffset = fbb.writeString(object.loginId);
          final colorOffset = fbb.writeString(object.color);
          final outletExclusionKeyOffset = object.outletExclusionKey == null
              ? null
              : fbb.writeString(object.outletExclusionKey!);
          final outletExclusionValuesOffset =
              object.outletExclusionValues == null
                  ? null
                  : fbb.writeString(object.outletExclusionValues!);
          final itemEachOffset = object.itemEach == null
              ? null
              : fbb.writeString(object.itemEach!);
          final extendedAttributesOffset =
              fbb.writeString(object.extendedAttributes);
          final activeStatusOffset = fbb.writeString(object.activeStatus);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          fbb.startTable(41);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, discountIdOffset);
          fbb.addOffset(2, batchCodeOffset);
          fbb.addInt64(3, object.priority);
          fbb.addOffset(4, schemeDescriptionOffset);
          fbb.addOffset(5, supplierOffset);
          fbb.addInt64(6, object.startDate);
          fbb.addInt64(7, object.endDate);
          fbb.addOffset(8, typeOffset);
          fbb.addOffset(9, criteriaOffset);
          fbb.addFloat64(10, object.maxBudget);
          fbb.addFloat64(11, object.maxTerm);
          fbb.addOffset(12, programLevelOffset);
          fbb.addInt64(13, object.mustBuyQty);
          fbb.addOffset(14, discountedBatchCodeOffset);
          fbb.addOffset(15, programNumberOffset);
          fbb.addOffset(16, slabsInfoOffset);
          fbb.addOffset(17, minMaxCondOffset);
          fbb.addBool(18, object.overNAbove);
          fbb.addOffset(19, mustBuyAttributesOffset);
          fbb.addOffset(20, channelOffset);
          fbb.addOffset(21, distributionChannelOffset);
          fbb.addOffset(22, subChannelOffset);
          fbb.addOffset(23, outletTypeOffset);
          fbb.addOffset(24, outletCategoryOffset);
          fbb.addOffset(25, outletDivisionOffset);
          fbb.addOffset(26, outletClassOffset);
          fbb.addOffset(27, outletCodeOffset);
          fbb.addOffset(28, marketIdOffset);
          fbb.addOffset(29, marketNameOffset);
          fbb.addOffset(30, bannerBlobOffset);
          fbb.addInt64(31, object.bannerPriority);
          fbb.addOffset(32, loginIdOffset);
          fbb.addOffset(33, colorOffset);
          fbb.addOffset(34, outletExclusionKeyOffset);
          fbb.addOffset(35, outletExclusionValuesOffset);
          fbb.addOffset(36, itemEachOffset);
          fbb.addOffset(37, extendedAttributesOffset);
          fbb.addOffset(38, activeStatusOffset);
          fbb.addOffset(39, skuCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final discountIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final schemeDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final startDateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final endDateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final criteriaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final maxBudgetParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final maxTermParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final programLevelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final mustBuyQtyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final discountedBatchCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final programNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final slabsInfoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final minMaxCondParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final overNAboveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false);
          final mustBuyAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 42, '');
          final activeStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 80, '');
          final extendedAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 78, '');
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 82, '');
          final channelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final distributionChannelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 46, '');
          final subChannelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 48, '');
          final outletTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 50, '');
          final outletCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 52, '');
          final outletDivisionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 54, '');
          final outletClassParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 56, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 58, '');
          final marketIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 60, '');
          final marketNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 62, '');
          final bannerBlobParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 64);
          final bannerPriorityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66);
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 68, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 70, '');
          final outletExclusionKeyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final outletExclusionValuesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final itemEachParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 76);
          final object = Coupons(
              discountId: discountIdParam,
              batchCode: batchCodeParam,
              priority: priorityParam,
              schemeDescription: schemeDescriptionParam,
              supplier: supplierParam,
              startDate: startDateParam,
              endDate: endDateParam,
              type: typeParam,
              criteria: criteriaParam,
              maxBudget: maxBudgetParam,
              maxTerm: maxTermParam,
              programLevel: programLevelParam,
              mustBuyQty: mustBuyQtyParam,
              discountedBatchCode: discountedBatchCodeParam,
              programNumber: programNumberParam,
              slabsInfo: slabsInfoParam,
              minMaxCond: minMaxCondParam,
              overNAbove: overNAboveParam,
              mustBuyAttributes: mustBuyAttributesParam,
              activeStatus: activeStatusParam,
              extendedAttributes: extendedAttributesParam,
              skuCode: skuCodeParam,
              channel: channelParam,
              distributionChannel: distributionChannelParam,
              subChannel: subChannelParam,
              outletType: outletTypeParam,
              outletCategory: outletCategoryParam,
              outletDivision: outletDivisionParam,
              outletClass: outletClassParam,
              outletCode: outletCodeParam,
              marketId: marketIdParam,
              marketName: marketNameParam,
              bannerBlob: bannerBlobParam,
              bannerPriority: bannerPriorityParam,
              loginId: loginIdParam,
              color: colorParam,
              outletExclusionKey: outletExclusionKeyParam,
              outletExclusionValues: outletExclusionValuesParam,
              itemEach: itemEachParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CreditModel: obx_int.EntityDefinition<CreditModel>(
        model: _entities[11],
        toOneRelations: (CreditModel object) => [],
        toManyRelations: (CreditModel object) => {},
        getId: (CreditModel object) => object.id,
        setId: (CreditModel object, int id) {
          object.id = id;
        },
        objectToFB: (CreditModel object, fb.Builder fbb) {
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final creditStatusOffset = fbb.writeString(object.creditStatus);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, outletCodeOffset);
          fbb.addFloat64(2, object.creditAmount);
          fbb.addFloat64(3, object.creditAvailable);
          fbb.addOffset(4, creditStatusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final creditAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final creditAvailableParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final creditStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = CreditModel(
              id: idParam,
              outletCode: outletCodeParam,
              creditAmount: creditAmountParam,
              creditAvailable: creditAvailableParam,
              creditStatus: creditStatusParam);

          return object;
        }),
    DataSyncV1: obx_int.EntityDefinition<DataSyncV1>(
        model: _entities[12],
        toOneRelations: (DataSyncV1 object) => [],
        toManyRelations: (DataSyncV1 object) => {},
        getId: (DataSyncV1 object) => object.id,
        setId: (DataSyncV1 object, int id) {
          object.id = id;
        },
        objectToFB: (DataSyncV1 object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final statusOffset = fbb.writeString(object.status);
          final syncTypeOffset = fbb.writeString(object.syncType);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endTime.millisecondsSinceEpoch);
          fbb.addOffset(5, statusOffset);
          fbb.addOffset(6, syncTypeOffset);
          fbb.addFloat64(7, object.size);
          fbb.addFloat64(8, object.records);
          fbb.addInt64(9, object.syncTime);
          fbb.addInt64(10, object.expiryTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final syncTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final syncTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final recordsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final sizeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final endTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final expiryTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final object = DataSyncV1(
              id: idParam,
              syncTime: syncTimeParam,
              syncType: syncTypeParam,
              records: recordsParam,
              size: sizeParam,
              name: nameParam,
              description: descriptionParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              status: statusParam,
              expiryTime: expiryTimeParam);

          return object;
        }),
    DeliveryPjpV1: obx_int.EntityDefinition<DeliveryPjpV1>(
        model: _entities[13],
        toOneRelations: (DeliveryPjpV1 object) => [],
        toManyRelations: (DeliveryPjpV1 object) => {},
        getId: (DeliveryPjpV1 object) => object.id,
        setId: (DeliveryPjpV1 object, int id) {
          object.id = id;
        },
        objectToFB: (DeliveryPjpV1 object, fb.Builder fbb) {
          final pjpDateOffset = fbb.writeString(object.pjpDate);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final deliveryPjpDateListOffset = object.deliveryPjpDateList == null
              ? null
              : fbb.writeString(object.deliveryPjpDateList!);
          final monthOffset = fbb.writeString(object.month);
          final yearOffset = fbb.writeString(object.year);
          final expiryTimeOffset = fbb.writeString(object.expiryTime);
          final deliveryDateOffset = fbb.writeString(object.deliveryDate);
          final shippingAddressListOffset =
              fbb.writeString(object.shippingAddressList);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, pjpDateOffset);
          fbb.addOffset(2, outletCodeOffset);
          fbb.addOffset(3, deliveryPjpDateListOffset);
          fbb.addOffset(4, monthOffset);
          fbb.addOffset(5, yearOffset);
          fbb.addOffset(6, expiryTimeOffset);
          fbb.addOffset(7, deliveryDateOffset);
          fbb.addOffset(8, shippingAddressListOffset);
          fbb.addOffset(9, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pjpDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final deliveryPjpDateListParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final monthParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final yearParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final expiryTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final deliveryDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final shippingAddressListParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final object = DeliveryPjpV1(
              id: idParam,
              outletCode: outletCodeParam,
              pjpDate: pjpDateParam,
              deliveryPjpDateList: deliveryPjpDateListParam,
              month: monthParam,
              year: yearParam,
              expiryTime: expiryTimeParam,
              deliveryDate: deliveryDateParam,
              shippingAddressList: shippingAddressListParam,
              type: typeParam);

          return object;
        }),
    DynamicPricingV1: obx_int.EntityDefinition<DynamicPricingV1>(
        model: _entities[14],
        toOneRelations: (DynamicPricingV1 object) => [],
        toManyRelations: (DynamicPricingV1 object) => {},
        getId: (DynamicPricingV1 object) => object.id,
        setId: (DynamicPricingV1 object, int id) {
          object.id = id;
        },
        objectToFB: (DynamicPricingV1 object, fb.Builder fbb) {
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final ysurOffset =
              object.ysur == null ? null : fbb.writeString(object.ysur!);
          final ypp0Offset =
              object.ypp0 == null ? null : fbb.writeString(object.ypp0!);
          final ytdnOffset =
              object.ytdn == null ? null : fbb.writeString(object.ytdn!);
          final ytdrOffset =
              object.ytdr == null ? null : fbb.writeString(object.ytdr!);
          final yrrdOffset =
              object.yrrd == null ? null : fbb.writeString(object.yrrd!);
          final yelpOffset =
              object.yelp == null ? null : fbb.writeString(object.yelp!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuCodeOffset);
          fbb.addOffset(2, ysurOffset);
          fbb.addOffset(3, ypp0Offset);
          fbb.addOffset(4, ytdnOffset);
          fbb.addOffset(5, ytdrOffset);
          fbb.addOffset(6, yrrdOffset);
          fbb.addOffset(7, yelpOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final ysurParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final ypp0Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final ytdnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final ytdrParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final yrrdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final yelpParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = DynamicPricingV1(
              id: idParam,
              skuCode: skuCodeParam,
              ysur: ysurParam,
              ypp0: ypp0Param,
              ytdn: ytdnParam,
              ytdr: ytdrParam,
              yrrd: yrrdParam,
              yelp: yelpParam);

          return object;
        }),
    FaqV1: obx_int.EntityDefinition<FaqV1>(
        model: _entities[15],
        toOneRelations: (FaqV1 object) => [],
        toManyRelations: (FaqV1 object) => {},
        getId: (FaqV1 object) => object.id,
        setId: (FaqV1 object, int id) {
          object.id = id;
        },
        objectToFB: (FaqV1 object, fb.Builder fbb) {
          final questionOffset = fbb.writeString(object.question);
          final answerOffset = fbb.writeString(object.answer);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionOffset);
          fbb.addOffset(2, answerOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final answerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              FaqV1(id: idParam, question: questionParam, answer: answerParam);

          return object;
        }),
    Incentive: obx_int.EntityDefinition<Incentive>(
        model: _entities[16],
        toOneRelations: (Incentive object) => [],
        toManyRelations: (Incentive object) => {},
        getId: (Incentive object) => object.id,
        setId: (Incentive object, int id) {
          object.id = id;
        },
        objectToFB: (Incentive object, fb.Builder fbb) {
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final typeOffset = fbb.writeString(object.type);
          final typeCodeOffset = fbb.writeString(object.typeCode);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, outletCodeOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, typeCodeOffset);
          fbb.addInt64(4, object.potentialPoints);
          fbb.addInt64(5, object.earnedPoints);
          fbb.addInt64(6, object.availablePoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final potentialPointsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final earnedPointsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = Incentive(
              outletCode: outletCodeParam,
              type: typeParam,
              potentialPoints: potentialPointsParam,
              earnedPoints: earnedPointsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..typeCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..availablePoints =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);

          return object;
        }),
    IntentInfoV1: obx_int.EntityDefinition<IntentInfoV1>(
        model: _entities[17],
        toOneRelations: (IntentInfoV1 object) => [],
        toManyRelations: (IntentInfoV1 object) => {},
        getId: (IntentInfoV1 object) => object.id,
        setId: (IntentInfoV1 object, int id) {
          object.id = id;
        },
        objectToFB: (IntentInfoV1 object, fb.Builder fbb) {
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final intentOffset = fbb.writeString(object.intent);
          final suggestionsOffset = fbb.writeString(object.suggestions);
          final templateOffset = fbb.writeString(object.template);
          final dataOffset = fbb.writeString(object.data);
          final templateAttributesOffset =
              fbb.writeString(object.templateAttributes);
          final queryNameOffset = fbb.writeString(object.queryName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, outletCodeOffset);
          fbb.addOffset(2, intentOffset);
          fbb.addOffset(3, suggestionsOffset);
          fbb.addOffset(4, templateOffset);
          fbb.addOffset(5, dataOffset);
          fbb.addOffset(6, templateAttributesOffset);
          fbb.addOffset(7, queryNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final intentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final suggestionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final templateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final templateAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final queryNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = IntentInfoV1(
              id: idParam,
              outletCode: outletCodeParam,
              intent: intentParam,
              suggestions: suggestionsParam,
              template: templateParam,
              data: dataParam,
              templateAttributes: templateAttributesParam,
              queryName: queryNameParam);

          return object;
        }),
    InventoryModelV1: obx_int.EntityDefinition<InventoryModelV1>(
        model: _entities[18],
        toOneRelations: (InventoryModelV1 object) => [],
        toManyRelations: (InventoryModelV1 object) => {},
        getId: (InventoryModelV1 object) => object.id,
        setId: (InventoryModelV1 object, int id) {
          object.id = id;
        },
        objectToFB: (InventoryModelV1 object, fb.Builder fbb) {
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final csQtyOffset = fbb.writeString(object.csQty);
          final pcQtyOffset = fbb.writeString(object.pcQty);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final expiryDateV1Offset = fbb.writeString(object.expiryDateV1);
          final remainingShelfLifeV1Offset =
              fbb.writeString(object.remainingShelfLifeV1);
          final mrpV1Offset = fbb.writeString(object.mrpV1);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuCodeOffset);
          fbb.addOffset(2, outletCodeOffset);
          fbb.addInt64(3, object.index);
          fbb.addOffset(4, csQtyOffset);
          fbb.addOffset(5, pcQtyOffset);
          fbb.addOffset(6, batchCodeOffset);
          fbb.addOffset(7, expiryDateV1Offset);
          fbb.addOffset(8, remainingShelfLifeV1Offset);
          fbb.addOffset(9, mrpV1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final indexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final csQtyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final pcQtyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final expiryDateV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final remainingShelfLifeV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final mrpV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = InventoryModelV1(
              skuCode: skuCodeParam,
              outletCode: outletCodeParam,
              index: indexParam,
              csQty: csQtyParam,
              pcQty: pcQtyParam,
              batchCode: batchCodeParam,
              expiryDateV1: expiryDateV1Param,
              remainingShelfLifeV1: remainingShelfLifeV1Param,
              mrpV1: mrpV1Param)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    InventoryStatus: obx_int.EntityDefinition<InventoryStatus>(
        model: _entities[19],
        toOneRelations: (InventoryStatus object) => [],
        toManyRelations: (InventoryStatus object) => {},
        getId: (InventoryStatus object) => object.id,
        setId: (InventoryStatus object, int id) {
          object.id = id;
        },
        objectToFB: (InventoryStatus object, fb.Builder fbb) {
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final lastInvDateOffset = fbb.writeString(object.lastInvDate);
          final lastInvQtyOffset = fbb.writeString(object.lastInvQty);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuCodeOffset);
          fbb.addOffset(2, outletCodeOffset);
          fbb.addOffset(3, lastInvDateOffset);
          fbb.addOffset(4, lastInvQtyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastInvDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final lastInvQtyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = InventoryStatus(
              skuCode: skuCodeParam,
              outletCode: outletCodeParam,
              lastInvDate: lastInvDateParam,
              lastInvQty: lastInvQtyParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    KibanaLog: obx_int.EntityDefinition<KibanaLog>(
        model: _entities[20],
        toOneRelations: (KibanaLog object) => [],
        toManyRelations: (KibanaLog object) => {},
        getId: (KibanaLog object) => object.id,
        setId: (KibanaLog object, int id) {
          object.id = id;
        },
        objectToFB: (KibanaLog object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final loginidOffset = fbb.writeString(object.loginid);
          final errorOffset = fbb.writeString(object.error);
          final stacktraceOffset = fbb.writeString(object.stacktrace);
          final messageOffset = fbb.writeString(object.message);
          final severityOffset = fbb.writeString(object.severity);
          final featureOffset = fbb.writeString(object.feature);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, loginidOffset);
          fbb.addOffset(3, errorOffset);
          fbb.addOffset(4, stacktraceOffset);
          fbb.addOffset(5, messageOffset);
          fbb.addOffset(6, severityOffset);
          fbb.addOffset(7, featureOffset);
          fbb.addInt64(8, object.timestamp.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final loginidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final errorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final stacktraceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final featureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final severityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = KibanaLog(
              loginid: loginidParam,
              error: errorParam,
              stacktrace: stacktraceParam,
              message: messageParam,
              feature: featureParam,
              severity: severityParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..timestamp = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        }),
    KpiV1: obx_int.EntityDefinition<KpiV1>(
        model: _entities[21],
        toOneRelations: (KpiV1 object) => [],
        toManyRelations: (KpiV1 object) => {},
        getId: (KpiV1 object) => object.id,
        setId: (KpiV1 object, int id) {
          object.id = id;
        },
        objectToFB: (KpiV1 object, fb.Builder fbb) {
          final kpiNameOffset = fbb.writeString(object.kpiName);
          final dataOffset = fbb.writeString(object.data);
          final userIdOffset = fbb.writeString(object.userId);
          final userDesignationOffset = fbb.writeString(object.userDesignation);
          final refKeyOffset = fbb.writeString(object.refKey);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, kpiNameOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, userIdOffset);
          fbb.addOffset(4, userDesignationOffset);
          fbb.addOffset(5, refKeyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final kpiNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final userDesignationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final refKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = KpiV1(
              id: idParam,
              kpiName: kpiNameParam,
              data: dataParam,
              userId: userIdParam,
              userDesignation: userDesignationParam,
              refKey: refKeyParam);

          return object;
        }),
    LeaderboardIncentiveModel:
        obx_int.EntityDefinition<LeaderboardIncentiveModel>(
            model: _entities[22],
            toOneRelations: (LeaderboardIncentiveModel object) => [],
            toManyRelations: (LeaderboardIncentiveModel object) => {},
            getId: (LeaderboardIncentiveModel object) => object.id,
            setId: (LeaderboardIncentiveModel object, int id) {
              object.id = id;
            },
            objectToFB: (LeaderboardIncentiveModel object, fb.Builder fbb) {
              final loginIdOffset = fbb.writeString(object.loginId);
              final nameOffset = fbb.writeString(object.name);
              fbb.startTable(8);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, loginIdOffset);
              fbb.addOffset(2, nameOffset);
              fbb.addInt64(3, object.previousRank);
              fbb.addInt64(4, object.currentRank);
              fbb.addFloat64(5, object.potentialPoints);
              fbb.addFloat64(6, object.earnedPoints);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final loginIdParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, '');
              final nameParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
              final previousRankParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
              final currentRankParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
              final potentialPointsParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
              final earnedPointsParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
              final object = LeaderboardIncentiveModel(
                  loginId: loginIdParam,
                  name: nameParam,
                  previousRank: previousRankParam,
                  currentRank: currentRankParam,
                  potentialPoints: potentialPointsParam,
                  earnedPoints: earnedPointsParam)
                ..id =
                    const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    LocateMeV1: obx_int.EntityDefinition<LocateMeV1>(
        model: _entities[23],
        toOneRelations: (LocateMeV1 object) => [],
        toManyRelations: (LocateMeV1 object) => {},
        getId: (LocateMeV1 object) => object.id,
        setId: (LocateMeV1 object, int id) {
          object.id = id;
        },
        objectToFB: (LocateMeV1 object, fb.Builder fbb) {
          final latitudeOffset = fbb.writeString(object.latitude);
          final longitudeOffset = fbb.writeString(object.longitude);
          final addressOffset = fbb.writeString(object.address);
          final pincodeOffset = fbb.writeString(object.pincode);
          final landmarkOffset = fbb.writeString(object.landmark);
          final localityOffset = fbb.writeString(object.locality);
          final loginIdOffset = fbb.writeString(object.loginId);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, latitudeOffset);
          fbb.addOffset(2, longitudeOffset);
          fbb.addOffset(3, addressOffset);
          fbb.addOffset(4, pincodeOffset);
          fbb.addOffset(5, landmarkOffset);
          fbb.addOffset(6, localityOffset);
          fbb.addOffset(7, loginIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final pincodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final landmarkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final localityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = LocateMeV1(
              id: idParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              address: addressParam,
              pincode: pincodeParam,
              landmark: landmarkParam,
              locality: localityParam,
              loginId: loginIdParam);

          return object;
        }),
    LoggerV1: obx_int.EntityDefinition<LoggerV1>(
        model: _entities[24],
        toOneRelations: (LoggerV1 object) => [],
        toManyRelations: (LoggerV1 object) => {},
        getId: (LoggerV1 object) => object.id,
        setId: (LoggerV1 object, int id) {
          object.id = id;
        },
        objectToFB: (LoggerV1 object, fb.Builder fbb) {
          final infoOffset =
              object.info == null ? null : fbb.writeString(object.info!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, infoOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addInt64(3, object.logTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final logTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final infoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final logTimeParam = logTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(logTimeValue);
          final object = LoggerV1(
              id: idParam,
              info: infoParam,
              type: typeParam,
              logTime: logTimeParam);

          return object;
        }),
    MetadataV1: obx_int.EntityDefinition<MetadataV1>(
        model: _entities[25],
        toOneRelations: (MetadataV1 object) => [],
        toManyRelations: (MetadataV1 object) => {},
        getId: (MetadataV1 object) => object.id,
        setId: (MetadataV1 object, int id) {
          object.id = id;
        },
        objectToFB: (MetadataV1 object, fb.Builder fbb) {
          final domainNameOffset = fbb.writeString(object.domainName);
          final domainTypeOffset = fbb.writeString(object.domainType);
          final domainValueOffset = fbb.writeString(object.domainValue);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, domainNameOffset);
          fbb.addOffset(2, domainTypeOffset);
          fbb.addOffset(3, domainValueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final domainNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final domainTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final domainValueParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = MetadataV1(
              id: idParam,
              domainName: domainNameParam,
              domainType: domainTypeParam,
              domainValue: domainValueParam);

          return object;
        }),
    MoengageV1: obx_int.EntityDefinition<MoengageV1>(
        model: _entities[26],
        toOneRelations: (MoengageV1 object) => [],
        toManyRelations: (MoengageV1 object) => {},
        getId: (MoengageV1 object) => object.id,
        setId: (MoengageV1 object, int id) {
          object.id = id;
        },
        objectToFB: (MoengageV1 object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = MoengageV1(id: idParam);

          return object;
        }),
    MonthlyIncentiveModel: obx_int.EntityDefinition<MonthlyIncentiveModel>(
        model: _entities[27],
        toOneRelations: (MonthlyIncentiveModel object) => [],
        toManyRelations: (MonthlyIncentiveModel object) => {},
        getId: (MonthlyIncentiveModel object) => object.id,
        setId: (MonthlyIncentiveModel object, int id) {
          object.id = id;
        },
        objectToFB: (MonthlyIncentiveModel object, fb.Builder fbb) {
          final taskNameOffset = fbb.writeString(object.taskName);
          final periodOffset = fbb.writeString(object.period);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskNameOffset);
          fbb.addOffset(2, periodOffset);
          fbb.addFloat64(3, object.potentialPoints);
          fbb.addFloat64(4, object.earnedPoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final taskNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final periodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final potentialPointsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final earnedPointsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = MonthlyIncentiveModel(
              taskName: taskNameParam,
              period: periodParam,
              potentialPoints: potentialPointsParam,
              earnedPoints: earnedPointsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MslTasksModel: obx_int.EntityDefinition<MslTasksModel>(
        model: _entities[28],
        toOneRelations: (MslTasksModel object) => [],
        toManyRelations: (MslTasksModel object) => {},
        getId: (MslTasksModel object) => object.id,
        setId: (MslTasksModel object, int id) {
          object.id = id;
        },
        objectToFB: (MslTasksModel object, fb.Builder fbb) {
          final channelOffset = fbb.writeString(object.channel);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final productCodeOffset = fbb.writeString(object.productCode);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final suggestedQtyOffset = fbb.writeString(object.suggestedQty);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, channelOffset);
          fbb.addOffset(2, outletCodeOffset);
          fbb.addOffset(3, productCodeOffset);
          fbb.addOffset(4, skuCodeOffset);
          fbb.addOffset(5, suggestedQtyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final channelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final productCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final suggestedQtyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = MslTasksModel(
              channel: channelParam,
              outletCode: outletCodeParam,
              productCode: productCodeParam,
              skuCode: skuCodeParam,
              suggestedQty: suggestedQtyParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    NotificationModelV1: obx_int.EntityDefinition<NotificationModelV1>(
        model: _entities[29],
        toOneRelations: (NotificationModelV1 object) => [],
        toManyRelations: (NotificationModelV1 object) => {},
        getId: (NotificationModelV1 object) => object.id,
        setId: (NotificationModelV1 object, int id) {
          object.id = id;
        },
        objectToFB: (NotificationModelV1 object, fb.Builder fbb) {
          final subjectOffset = fbb.writeString(object.subject);
          final descriptionOffset = fbb.writeString(object.description);
          final blobKeyOffset = fbb.writeString(object.blobKey);
          final creationTimeOffset = fbb.writeString(object.creationTime);
          final notificationIdOffset = fbb.writeString(object.notificationId);
          final mediaUrlOffset = fbb.writeString(object.mediaUrl);
          final subCategoryOffset = fbb.writeString(object.subCategory);
          final categoryOffset = fbb.writeString(object.category);
          final productCategoryOffset = fbb.writeString(object.productCategory);
          final selectedSKUOffset = object.selectedSKU == null
              ? null
              : fbb.writeString(object.selectedSKU!);
          final featureOffset = fbb.writeString(object.feature);
          final intentV1Offset = fbb.writeString(object.intentV1);
          final intentParamV1Offset = fbb.writeString(object.intentParamV1);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, subjectOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, blobKeyOffset);
          fbb.addOffset(4, creationTimeOffset);
          fbb.addBool(5, object.wasTapped);
          fbb.addOffset(6, notificationIdOffset);
          fbb.addOffset(7, mediaUrlOffset);
          fbb.addOffset(8, subCategoryOffset);
          fbb.addOffset(9, categoryOffset);
          fbb.addOffset(10, productCategoryOffset);
          fbb.addOffset(11, selectedSKUOffset);
          fbb.addOffset(12, featureOffset);
          fbb.addOffset(13, intentV1Offset);
          fbb.addOffset(14, intentParamV1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final blobKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final creationTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final wasTappedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final notificationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final mediaUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final subCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final productCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final selectedSKUParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final featureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final intentV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final intentParamV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final object = NotificationModelV1(
              subject: subjectParam,
              description: descriptionParam,
              blobKey: blobKeyParam,
              creationTime: creationTimeParam,
              wasTapped: wasTappedParam,
              notificationId: notificationIdParam,
              mediaUrl: mediaUrlParam,
              subCategory: subCategoryParam,
              category: categoryParam,
              productCategory: productCategoryParam,
              selectedSKU: selectedSKUParam,
              feature: featureParam,
              intentV1: intentV1Param,
              intentParamV1: intentParamV1Param)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    NpdV1: obx_int.EntityDefinition<NpdV1>(
        model: _entities[30],
        toOneRelations: (NpdV1 object) => [],
        toManyRelations: (NpdV1 object) => {},
        getId: (NpdV1 object) => object.id,
        setId: (NpdV1 object, int id) {
          object.id = id;
        },
        objectToFB: (NpdV1 object, fb.Builder fbb) {
          final questionsListOffset = fbb.writeString(object.questionsList);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionsListOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final questionsListParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object = NpdV1(id: idParam, questionsList: questionsListParam);

          return object;
        }),
    OfflineSyncV1: obx_int.EntityDefinition<OfflineSyncV1>(
        model: _entities[31],
        toOneRelations: (OfflineSyncV1 object) => [],
        toManyRelations: (OfflineSyncV1 object) => {},
        getId: (OfflineSyncV1 object) => object.id,
        setId: (OfflineSyncV1 object, int id) {
          object.id = id;
        },
        objectToFB: (OfflineSyncV1 object, fb.Builder fbb) {
          final requestBodyV1Offset = fbb.writeString(object.requestBodyV1);
          final apiOffset = fbb.writeString(object.api);
          final methodOffset = fbb.writeString(object.method);
          final statusOffset = fbb.writeString(object.status);
          final transactionIdV1Offset = fbb.writeString(object.transactionIdV1);
          final referenceNumberV1Offset =
              fbb.writeString(object.referenceNumberV1);
          final responseOffset = fbb.writeString(object.response);
          final loginIdOffset = fbb.writeString(object.loginId);
          final outletIdOffset = fbb.writeString(object.outletId);
          final featureV1Offset = fbb.writeString(object.featureV1);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, requestBodyV1Offset);
          fbb.addOffset(2, apiOffset);
          fbb.addOffset(3, methodOffset);
          fbb.addInt64(4, object.lastModifiedTimeV1.millisecondsSinceEpoch);
          fbb.addOffset(5, statusOffset);
          fbb.addOffset(6, transactionIdV1Offset);
          fbb.addOffset(7, referenceNumberV1Offset);
          fbb.addInt64(8, object.attempts);
          fbb.addOffset(9, responseOffset);
          fbb.addInt64(10, object.responseStatus);
          fbb.addOffset(11, loginIdOffset);
          fbb.addOffset(12, outletIdOffset);
          fbb.addOffset(13, featureV1Offset);
          fbb.addInt64(14, object.creationTime.millisecondsSinceEpoch);
          fbb.addBool(15, object.editV1);
          fbb.addInt64(16, object.orderSeqNum);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final requestBodyV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final apiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final methodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final lastModifiedTimeV1Param = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final transactionIdV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final referenceNumberV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final attemptsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final responseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final responseStatusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final outletIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final featureV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final creationTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          final editV1Param =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false);
          final orderSeqNumParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final object = OfflineSyncV1(
              id: idParam,
              requestBodyV1: requestBodyV1Param,
              api: apiParam,
              method: methodParam,
              lastModifiedTimeV1: lastModifiedTimeV1Param,
              status: statusParam,
              transactionIdV1: transactionIdV1Param,
              referenceNumberV1: referenceNumberV1Param,
              attempts: attemptsParam,
              response: responseParam,
              responseStatus: responseStatusParam,
              loginId: loginIdParam,
              outletId: outletIdParam,
              featureV1: featureV1Param,
              creationTime: creationTimeParam,
              editV1: editV1Param,
              orderSeqNum: orderSeqNumParam);

          return object;
        }),
    OrderDetails: obx_int.EntityDefinition<OrderDetails>(
        model: _entities[32],
        toOneRelations: (OrderDetails object) => [],
        toManyRelations: (OrderDetails object) => {},
        getId: (OrderDetails object) => object.id,
        setId: (OrderDetails object, int id) {
          object.id = id;
        },
        objectToFB: (OrderDetails object, fb.Builder fbb) {
          final referenceNumberOffset = fbb.writeString(object.referenceNumber);
          final extendedAttributesOffset =
              fbb.writeString(object.extendedAttributes);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final supplierOffset = fbb.writeString(object.supplier);
          final productInfoOffset = fbb.writeString(object.productInfo);
          final loginIdOffset = fbb.writeString(object.loginId);
          final discountInfoOffset = fbb.writeString(object.discountInfo);
          final orderNumberOffset = fbb.writeString(object.orderNumber);
          fbb.startTable(24);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, referenceNumberOffset);
          fbb.addOffset(2, extendedAttributesOffset);
          fbb.addFloat64(3, object.billAmount);
          fbb.addFloat64(4, object.netAmount);
          fbb.addOffset(5, batchCodeOffset);
          fbb.addOffset(6, outletCodeOffset);
          fbb.addOffset(7, supplierOffset);
          fbb.addFloat64(8, object.normalizedQuantity);
          fbb.addFloat64(9, object.initialAmount);
          fbb.addFloat64(10, object.initialQuantity);
          fbb.addFloat64(11, object.mrp);
          fbb.addFloat64(12, object.price);
          fbb.addFloat64(13, object.casePrice);
          fbb.addOffset(14, productInfoOffset);
          fbb.addOffset(15, loginIdOffset);
          fbb.addOffset(16, discountInfoOffset);
          fbb.addFloat64(17, object.caseQuantity);
          fbb.addFloat64(18, object.pieceQuantity);
          fbb.addFloat64(19, object.otherUnitQuantity);
          fbb.addFloat64(20, object.couponValue);
          fbb.addFloat64(21, object.discountValue);
          fbb.addOffset(22, orderNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final extendedAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final billAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final netAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final referenceNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final initialAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final initialQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final mrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final casePriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final productInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final normalizedQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final discountInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 36, '');
          final caseQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0);
          final pieceQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final otherUnitQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 42, 0);
          final discountValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 46, 0);
          final couponValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 44, 0);
          final orderNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 48, '');
          final object = OrderDetails(
              id: idParam,
              extendedAttributes: extendedAttributesParam,
              billAmount: billAmountParam,
              netAmount: netAmountParam,
              referenceNumber: referenceNumberParam,
              batchCode: batchCodeParam,
              initialAmount: initialAmountParam,
              initialQuantity: initialQuantityParam,
              mrp: mrpParam,
              price: priceParam,
              casePrice: casePriceParam,
              productInfo: productInfoParam,
              outletCode: outletCodeParam,
              supplier: supplierParam,
              normalizedQuantity: normalizedQuantityParam,
              loginId: loginIdParam,
              discountInfo: discountInfoParam,
              caseQuantity: caseQuantityParam,
              pieceQuantity: pieceQuantityParam,
              otherUnitQuantity: otherUnitQuantityParam,
              discountValue: discountValueParam,
              couponValue: couponValueParam,
              orderNumber: orderNumberParam);

          return object;
        }),
    OrderModel: obx_int.EntityDefinition<OrderModel>(
        model: _entities[33],
        toOneRelations: (OrderModel object) => [],
        toManyRelations: (OrderModel object) => {},
        getId: (OrderModel object) => object.id,
        setId: (OrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          final orderNumberOffset = fbb.writeString(object.orderNumber);
          final creationTimeOffset = fbb.writeString(object.creationTime);
          final extendedAttributesOffset =
              fbb.writeString(object.extendedAttributes);
          final referenceNumberOffset = fbb.writeString(object.referenceNumber);
          final remarksOffset = fbb.writeString(object.remarks);
          final sourceOffset = fbb.writeString(object.source);
          final typeOffset = fbb.writeString(object.type);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final supplierOffset = fbb.writeString(object.supplier);
          final statusOffset = fbb.writeString(object.status);
          final loginIdOffset = fbb.writeString(object.loginId);
          final discountInfoOffset = fbb.writeString(object.discountInfo);
          final supplierNameOffset = fbb.writeString(object.supplierName);
          final outletNameOffset = fbb.writeString(object.outletName);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, orderNumberOffset);
          fbb.addOffset(2, creationTimeOffset);
          fbb.addOffset(3, extendedAttributesOffset);
          fbb.addFloat64(4, object.billAmount);
          fbb.addInt64(5, object.lineCount);
          fbb.addFloat64(6, object.netAmount);
          fbb.addOffset(7, referenceNumberOffset);
          fbb.addOffset(8, remarksOffset);
          fbb.addOffset(9, sourceOffset);
          fbb.addFloat64(10, object.totalAmount);
          fbb.addFloat64(11, object.totalMrp);
          fbb.addFloat64(12, object.totalQuantity);
          fbb.addOffset(13, typeOffset);
          fbb.addOffset(14, outletCodeOffset);
          fbb.addOffset(15, supplierOffset);
          fbb.addOffset(16, statusOffset);
          fbb.addFloat64(17, object.normalizedQuantity);
          fbb.addOffset(18, loginIdOffset);
          fbb.addOffset(19, discountInfoOffset);
          fbb.addOffset(20, supplierNameOffset);
          fbb.addOffset(21, outletNameOffset);
          fbb.addFloat64(22, object.totalCaseQuantity);
          fbb.addFloat64(23, object.totalPieceQuantity);
          fbb.addFloat64(24, object.totalOtherUnitQuantity);
          fbb.addFloat64(25, object.couponValue);
          fbb.addFloat64(26, object.discountValue);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final orderNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final creationTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final extendedAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final billAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final lineCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final netAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final referenceNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final remarksParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final totalAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final totalMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final totalQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final normalizedQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0);
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 40, '');
          final discountInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 42, '');
          final supplierNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 44, '');
          final outletNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final totalCaseQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final totalPieceQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 50, 0);
          final totalOtherUnitQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 52, 0);
          final discountValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 56, 0);
          final couponValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 54, 0);
          final object = OrderModel(
              id: idParam,
              orderNumber: orderNumberParam,
              creationTime: creationTimeParam,
              extendedAttributes: extendedAttributesParam,
              billAmount: billAmountParam,
              lineCount: lineCountParam,
              netAmount: netAmountParam,
              referenceNumber: referenceNumberParam,
              remarks: remarksParam,
              source: sourceParam,
              totalAmount: totalAmountParam,
              totalMrp: totalMrpParam,
              totalQuantity: totalQuantityParam,
              type: typeParam,
              outletCode: outletCodeParam,
              supplier: supplierParam,
              status: statusParam,
              normalizedQuantity: normalizedQuantityParam,
              loginId: loginIdParam,
              discountInfo: discountInfoParam,
              supplierName: supplierNameParam,
              outletName: outletNameParam,
              totalCaseQuantity: totalCaseQuantityParam,
              totalPieceQuantity: totalPieceQuantityParam,
              totalOtherUnitQuantity: totalOtherUnitQuantityParam,
              discountValue: discountValueParam,
              couponValue: couponValueParam);

          return object;
        }),
    OrderTrackingModelV1: obx_int.EntityDefinition<OrderTrackingModelV1>(
        model: _entities[34],
        toOneRelations: (OrderTrackingModelV1 object) => [],
        toManyRelations: (OrderTrackingModelV1 object) => {},
        getId: (OrderTrackingModelV1 object) => object.id,
        setId: (OrderTrackingModelV1 object, int id) {
          object.id = id;
        },
        objectToFB: (OrderTrackingModelV1 object, fb.Builder fbb) {
          final orderNumberOffset = fbb.writeString(object.orderNumber);
          final creationTimeOffset = fbb.writeString(object.creationTime);
          final lastModifiedTimeOffset =
              fbb.writeString(object.lastModifiedTime);
          final extendedAttributesOffset =
              fbb.writeString(object.extendedAttributes);
          final lobOffset = fbb.writeString(object.lob);
          final referenceNumberOffset = fbb.writeString(object.referenceNumber);
          final remarksOffset = fbb.writeString(object.remarks);
          final sourceOffset = fbb.writeString(object.source);
          final typeOffset = fbb.writeString(object.type);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final supplierOffset = fbb.writeString(object.supplier);
          final statusOffset = fbb.writeString(object.status);
          final channelOffset = fbb.writeString(object.channel);
          final systemTimeOffset = fbb.writeString(object.systemTime);
          final loginIdOffset = fbb.writeString(object.loginId);
          final discountInfoOffset = fbb.writeString(object.discountInfo);
          final processingStatusOffset =
              fbb.writeString(object.processingStatus);
          final supplierNameOffset = fbb.writeString(object.supplierName);
          final outletNameOffset = fbb.writeString(object.outletName);
          final outletMobileOffset = fbb.writeString(object.outletMobile);
          final orderDetailsOffset = fbb.writeString(object.orderDetails);
          final orderHistoryOffset = fbb.writeString(object.orderHistory);
          final statusReasonV1Offset = fbb.writeString(object.statusReasonV1);
          fbb.startTable(40);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, orderNumberOffset);
          fbb.addOffset(2, creationTimeOffset);
          fbb.addOffset(3, lastModifiedTimeOffset);
          fbb.addOffset(4, extendedAttributesOffset);
          fbb.addOffset(5, lobOffset);
          fbb.addFloat64(6, object.billAmount);
          fbb.addInt64(7, object.lineCount);
          fbb.addFloat64(8, object.netAmount);
          fbb.addOffset(9, referenceNumberOffset);
          fbb.addOffset(10, remarksOffset);
          fbb.addOffset(11, sourceOffset);
          fbb.addFloat64(12, object.totalAmount);
          fbb.addFloat64(13, object.totalInitialAmt);
          fbb.addFloat64(14, object.totalInitialQuantity);
          fbb.addFloat64(15, object.totalMrp);
          fbb.addFloat64(16, object.totalQuantity);
          fbb.addOffset(17, typeOffset);
          fbb.addOffset(18, outletCodeOffset);
          fbb.addOffset(19, supplierOffset);
          fbb.addOffset(20, statusOffset);
          fbb.addOffset(21, channelOffset);
          fbb.addFloat64(22, object.normalizedQuantity);
          fbb.addFloat64(23, object.initialNormalizedQuantity);
          fbb.addOffset(24, systemTimeOffset);
          fbb.addOffset(25, loginIdOffset);
          fbb.addOffset(26, discountInfoOffset);
          fbb.addFloat64(27, object.normalizedVolume);
          fbb.addOffset(28, processingStatusOffset);
          fbb.addOffset(29, supplierNameOffset);
          fbb.addOffset(30, outletNameOffset);
          fbb.addOffset(31, outletMobileOffset);
          fbb.addOffset(32, orderDetailsOffset);
          fbb.addFloat64(33, object.totalCaseQuantity);
          fbb.addFloat64(34, object.totalPieceQuantity);
          fbb.addFloat64(35, object.totalOtherUnitQuantity);
          fbb.addOffset(36, orderHistoryOffset);
          fbb.addBool(37, object.edit);
          fbb.addOffset(38, statusReasonV1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final orderNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final creationTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final lastModifiedTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final extendedAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final lobParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final billAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final lineCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final netAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final referenceNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final remarksParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final totalAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final totalInitialAmtParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final totalInitialQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final totalMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final totalQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 40, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final channelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final normalizedQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final initialNormalizedQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 50, 0);
          final systemTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 52, '');
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 54, '');
          final discountInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 56, '');
          final normalizedVolumeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 58, 0);
          final processingStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 60, '');
          final supplierNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 62, '');
          final outletNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 64, '');
          final outletMobileParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 66, '');
          final orderDetailsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 68, '');
          final totalCaseQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 70, 0);
          final totalPieceQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 72, 0);
          final totalOtherUnitQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 74, 0);
          final orderHistoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 76, '');
          final editParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 78, false);
          final statusReasonV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 80, '');
          final object = OrderTrackingModelV1(
              id: idParam,
              orderNumber: orderNumberParam,
              creationTime: creationTimeParam,
              lastModifiedTime: lastModifiedTimeParam,
              extendedAttributes: extendedAttributesParam,
              lob: lobParam,
              billAmount: billAmountParam,
              lineCount: lineCountParam,
              netAmount: netAmountParam,
              referenceNumber: referenceNumberParam,
              remarks: remarksParam,
              source: sourceParam,
              totalAmount: totalAmountParam,
              totalInitialAmt: totalInitialAmtParam,
              totalInitialQuantity: totalInitialQuantityParam,
              totalMrp: totalMrpParam,
              totalQuantity: totalQuantityParam,
              type: typeParam,
              outletCode: outletCodeParam,
              supplier: supplierParam,
              status: statusParam,
              channel: channelParam,
              normalizedQuantity: normalizedQuantityParam,
              initialNormalizedQuantity: initialNormalizedQuantityParam,
              systemTime: systemTimeParam,
              loginId: loginIdParam,
              discountInfo: discountInfoParam,
              normalizedVolume: normalizedVolumeParam,
              processingStatus: processingStatusParam,
              supplierName: supplierNameParam,
              outletName: outletNameParam,
              outletMobile: outletMobileParam,
              orderDetails: orderDetailsParam,
              totalCaseQuantity: totalCaseQuantityParam,
              totalPieceQuantity: totalPieceQuantityParam,
              totalOtherUnitQuantity: totalOtherUnitQuantityParam,
              orderHistory: orderHistoryParam,
              edit: editParam,
              statusReasonV1: statusReasonV1Param);

          return object;
        }),
    OutletMappingChannelV1: obx_int.EntityDefinition<OutletMappingChannelV1>(
        model: _entities[35],
        toOneRelations: (OutletMappingChannelV1 object) => [],
        toManyRelations: (OutletMappingChannelV1 object) => {},
        getId: (OutletMappingChannelV1 object) => object.id,
        setId: (OutletMappingChannelV1 object, int id) {
          object.id = id;
        },
        objectToFB: (OutletMappingChannelV1 object, fb.Builder fbb) {
          final channelOffset = fbb.writeString(object.channel);
          final subChannelV1Offset = fbb.writeString(object.subChannelV1);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, channelOffset);
          fbb.addOffset(2, subChannelV1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final channelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final subChannelV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = OutletMappingChannelV1(
              channel: channelParam, subChannelV1: subChannelV1Param)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OutletMappingLocation: obx_int.EntityDefinition<OutletMappingLocation>(
        model: _entities[36],
        toOneRelations: (OutletMappingLocation object) => [],
        toManyRelations: (OutletMappingLocation object) => {},
        getId: (OutletMappingLocation object) => object.id,
        setId: (OutletMappingLocation object, int id) {
          object.id = id;
        },
        objectToFB: (OutletMappingLocation object, fb.Builder fbb) {
          final regionOffset =
              object.region == null ? null : fbb.writeString(object.region!);
          final salesTeritoryOffset = object.salesTeritory == null
              ? null
              : fbb.writeString(object.salesTeritory!);
          final stateOffset = object.state == null
              ? null
              : fbb.writeList(
                  object.state!.map(fbb.writeString).toList(growable: false));
          final cityOffset = object.city == null
              ? null
              : fbb.writeList(
                  object.city!.map(fbb.writeString).toList(growable: false));
          final districtOffset = object.district == null
              ? null
              : fbb.writeString(object.district!);
          final cityClassificationOffset = object.cityClassification == null
              ? null
              : fbb.writeString(object.cityClassification!);
          final cityClusterOffset = object.cityCluster == null
              ? null
              : fbb.writeString(object.cityCluster!);
          final routeNameOffset = object.routeName == null
              ? null
              : fbb.writeList(object.routeName!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, regionOffset);
          fbb.addOffset(2, salesTeritoryOffset);
          fbb.addOffset(3, stateOffset);
          fbb.addOffset(4, cityOffset);
          fbb.addOffset(5, districtOffset);
          fbb.addOffset(6, cityClassificationOffset);
          fbb.addOffset(7, cityClusterOffset);
          fbb.addOffset(8, routeNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final regionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final salesTeritoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final stateParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 10);
          final cityParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 12);
          final districtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final cityClassificationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final cityClusterParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final routeNameParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = OutletMappingLocation(
              region: regionParam,
              salesTeritory: salesTeritoryParam,
              state: stateParam,
              city: cityParam,
              district: districtParam,
              cityClassification: cityClassificationParam,
              cityCluster: cityClusterParam,
              routeName: routeNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OutletMappingV1: obx_int.EntityDefinition<OutletMappingV1>(
        model: _entities[37],
        toOneRelations: (OutletMappingV1 object) => [],
        toManyRelations: (OutletMappingV1 object) => {},
        getId: (OutletMappingV1 object) => object.id,
        setId: (OutletMappingV1 object, int id) {
          object.id = id;
        },
        objectToFB: (OutletMappingV1 object, fb.Builder fbb) {
          final provinceV1Offset = fbb.writeString(object.provinceV1);
          final cityV1Offset = fbb.writeString(object.cityV1);
          final districtV1Offset = fbb.writeString(object.districtV1);
          final customerChannelOffset = object.customerChannel == null
              ? null
              : fbb.writeList(object.customerChannel!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final channelCodeOffset = fbb.writeString(object.channelCode);
          final customerTypeOffset = object.customerType == null
              ? null
              : fbb.writeList(object.customerType!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final outletTypeOffset = object.outletType == null
              ? null
              : fbb.writeList(object.outletType!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final regionOffset = fbb.writeString(object.region);
          final salesTeritoryOffset = fbb.writeString(object.salesTeritory);
          final stateOffset = object.state == null
              ? null
              : fbb.writeList(
                  object.state!.map(fbb.writeString).toList(growable: false));
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final districtOffset = object.district == null
              ? null
              : fbb.writeString(object.district!);
          final cityClassificationOffset = object.cityClassification == null
              ? null
              : fbb.writeString(object.cityClassification!);
          final cityClusterOffset = object.cityCluster == null
              ? null
              : fbb.writeString(object.cityCluster!);
          final routeNameOffset = object.routeName == null
              ? null
              : fbb.writeList(object.routeName!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final aseTerritoryOffset = object.aseTerritory == null
              ? null
              : fbb.writeString(object.aseTerritory!);
          final distributorIdOffset = object.distributorId == null
              ? null
              : fbb.writeList(object.distributorId!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final distributorNameOffset = object.distributorName == null
              ? null
              : fbb.writeList(object.distributorName!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, provinceV1Offset);
          fbb.addOffset(2, cityV1Offset);
          fbb.addOffset(3, districtV1Offset);
          fbb.addOffset(4, customerChannelOffset);
          fbb.addOffset(5, channelCodeOffset);
          fbb.addOffset(6, customerTypeOffset);
          fbb.addOffset(7, outletTypeOffset);
          fbb.addOffset(8, regionOffset);
          fbb.addOffset(9, salesTeritoryOffset);
          fbb.addOffset(10, stateOffset);
          fbb.addOffset(11, cityOffset);
          fbb.addOffset(12, districtOffset);
          fbb.addOffset(13, cityClassificationOffset);
          fbb.addOffset(14, cityClusterOffset);
          fbb.addOffset(15, routeNameOffset);
          fbb.addOffset(16, aseTerritoryOffset);
          fbb.addOffset(17, distributorIdOffset);
          fbb.addOffset(18, distributorNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final provinceV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final cityV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final districtV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final customerChannelParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 12);
          final channelCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final regionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final salesTeritoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final stateParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 24);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final districtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final cityClassificationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final cityClusterParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final routeNameParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 34);
          final customerTypeParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 16);
          final aseTerritoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final distributorIdParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 38);
          final distributorNameParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 40);
          final outletTypeParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = OutletMappingV1(
              provinceV1: provinceV1Param,
              cityV1: cityV1Param,
              districtV1: districtV1Param,
              customerChannel: customerChannelParam,
              channelCode: channelCodeParam,
              region: regionParam,
              salesTeritory: salesTeritoryParam,
              state: stateParam,
              city: cityParam,
              district: districtParam,
              cityClassification: cityClassificationParam,
              cityCluster: cityClusterParam,
              routeName: routeNameParam,
              customerType: customerTypeParam,
              aseTerritory: aseTerritoryParam,
              distributorId: distributorIdParam,
              distributorName: distributorNameParam,
              outletType: outletTypeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OutletPricing: obx_int.EntityDefinition<OutletPricing>(
        model: _entities[38],
        toOneRelations: (OutletPricing object) => [],
        toManyRelations: (OutletPricing object) => {},
        getId: (OutletPricing object) => object.id,
        setId: (OutletPricing object, int id) {
          object.id = id;
        },
        objectToFB: (OutletPricing object, fb.Builder fbb) {
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final productInfoOffset = fbb.writeString(object.productInfo);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, outletCodeOffset);
          fbb.addOffset(2, productInfoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final productInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = OutletPricing(
              id: idParam,
              outletCode: outletCodeParam,
              productInfo: productInfoParam);

          return object;
        }),
    OutletSubscriptionV1: obx_int.EntityDefinition<OutletSubscriptionV1>(
        model: _entities[39],
        toOneRelations: (OutletSubscriptionV1 object) => [],
        toManyRelations: (OutletSubscriptionV1 object) => {},
        getId: (OutletSubscriptionV1 object) => object.id,
        setId: (OutletSubscriptionV1 object, int id) {
          object.id = id;
        },
        objectToFB: (OutletSubscriptionV1 object, fb.Builder fbb) {
          final activeStatusOffset = object.activeStatus == null
              ? null
              : fbb.writeString(object.activeStatus!);
          final activeStatusReasonOffset = object.activeStatusReason == null
              ? null
              : fbb.writeString(object.activeStatusReason!);
          final principalLoginIdOffset = object.principalLoginId == null
              ? null
              : fbb.writeString(object.principalLoginId!);
          final principalOutletCodeOffset = object.principalOutletCode == null
              ? null
              : fbb.writeString(object.principalOutletCode!);
          final targetLobOffset = object.targetLob == null
              ? null
              : fbb.writeString(object.targetLob!);
          final targetLoginIdOffset = object.targetLoginId == null
              ? null
              : fbb.writeString(object.targetLoginId!);
          final targetOutletCodeOffset = object.targetOutletCode == null
              ? null
              : fbb.writeString(object.targetOutletCode!);
          final mobileNumberOffset = object.mobileNumber == null
              ? null
              : fbb.writeString(object.mobileNumber!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, activeStatusOffset);
          fbb.addOffset(2, activeStatusReasonOffset);
          fbb.addOffset(3, principalLoginIdOffset);
          fbb.addOffset(4, principalOutletCodeOffset);
          fbb.addOffset(5, targetLobOffset);
          fbb.addOffset(6, targetLoginIdOffset);
          fbb.addOffset(7, targetOutletCodeOffset);
          fbb.addOffset(8, mobileNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final activeStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final activeStatusReasonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final principalLoginIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final principalOutletCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final targetLobParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final targetLoginIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final targetOutletCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final mobileNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final object = OutletSubscriptionV1(
              id: idParam,
              activeStatus: activeStatusParam,
              activeStatusReason: activeStatusReasonParam,
              principalLoginId: principalLoginIdParam,
              principalOutletCode: principalOutletCodeParam,
              targetLob: targetLobParam,
              targetLoginId: targetLoginIdParam,
              targetOutletCode: targetOutletCodeParam,
              mobileNumber: mobileNumberParam);

          return object;
        }),
    OutletSurveyQuestionModel:
        obx_int.EntityDefinition<OutletSurveyQuestionModel>(
            model: _entities[40],
            toOneRelations: (OutletSurveyQuestionModel object) => [],
            toManyRelations: (OutletSurveyQuestionModel object) => {},
            getId: (OutletSurveyQuestionModel object) => object.id,
            setId: (OutletSurveyQuestionModel object, int id) {
              object.id = id;
            },
            objectToFB: (OutletSurveyQuestionModel object, fb.Builder fbb) {
              final quesIdOffset = fbb.writeString(object.quesId);
              final questionOffset = fbb.writeString(object.question);
              final optionsOffset = fbb.writeList(
                  object.options.map(fbb.writeString).toList(growable: false));
              final qidOffset = fbb.writeString(object.qid);
              final eventIdOffset = fbb.writeString(object.eventId);
              final responseTypeOffset = fbb.writeString(object.responseType);
              final eventTypeOffset = fbb.writeString(object.eventType);
              fbb.startTable(9);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, quesIdOffset);
              fbb.addOffset(2, questionOffset);
              fbb.addOffset(3, optionsOffset);
              fbb.addOffset(4, qidOffset);
              fbb.addOffset(5, eventIdOffset);
              fbb.addOffset(6, responseTypeOffset);
              fbb.addOffset(7, eventTypeOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final questionParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final optionsParam = const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []);
              final quesIdParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final qidParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
              final eventIdParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 14, '');
              final responseTypeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 16, '');
              final eventTypeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 18, '');
              final object = OutletSurveyQuestionModel(
                  id: idParam,
                  question: questionParam,
                  options: optionsParam,
                  quesId: quesIdParam,
                  qid: qidParam,
                  eventId: eventIdParam,
                  responseType: responseTypeParam,
                  eventType: eventTypeParam);

              return object;
            }),
    OutletSurveyResponseModel:
        obx_int.EntityDefinition<OutletSurveyResponseModel>(
            model: _entities[41],
            toOneRelations: (OutletSurveyResponseModel object) => [],
            toManyRelations: (OutletSurveyResponseModel object) => {},
            getId: (OutletSurveyResponseModel object) => object.id,
            setId: (OutletSurveyResponseModel object, int id) {
              object.id = id;
            },
            objectToFB: (OutletSurveyResponseModel object, fb.Builder fbb) {
              final outletCodeOffset = fbb.writeString(object.outletCode);
              final answerIdOffset = fbb.writeString(object.answerId);
              final answerOffset = fbb.writeList(
                  object.answer.map(fbb.writeString).toList(growable: false));
              final responseTypeOffset = fbb.writeString(object.responseType);
              final lastModifiedTimeOffset =
                  fbb.writeString(object.lastModifiedTime);
              fbb.startTable(7);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, outletCodeOffset);
              fbb.addOffset(2, answerIdOffset);
              fbb.addOffset(3, answerOffset);
              fbb.addOffset(4, responseTypeOffset);
              fbb.addOffset(5, lastModifiedTimeOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final outletCodeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, '');
              final answerIdParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final answerParam = const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []);
              final responseTypeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 12, '');
              final lastModifiedTimeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 14, '');
              final object = OutletSurveyResponseModel(
                  id: idParam,
                  outletCode: outletCodeParam,
                  answerId: answerIdParam,
                  answer: answerParam,
                  responseType: responseTypeParam,
                  lastModifiedTime: lastModifiedTimeParam);

              return object;
            }),
    OutletV1: obx_int.EntityDefinition<OutletV1>(
        model: _entities[42],
        toOneRelations: (OutletV1 object) => [],
        toManyRelations: (OutletV1 object) => {},
        getId: (OutletV1 object) => object.id,
        setId: (OutletV1 object, int id) {
          object.id = id;
        },
        objectToFB: (OutletV1 object, fb.Builder fbb) {
          final outletNameOffset = fbb.writeString(object.outletName);
          final activeStatusOffset = fbb.writeString(object.activeStatus);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final beatNameOffset = fbb.writeString(object.beatName);
          final beatOffset = fbb.writeString(object.beat);
          final addressOffset = fbb.writeString(object.address);
          final contactnoOffset = fbb.writeString(object.contactno);
          final displayAddressOffset = fbb.writeString(object.displayAddress);
          final channelOffset = fbb.writeString(object.channel);
          final locationOffset = fbb.writeString(object.location);
          final hierarchyOffset = fbb.writeString(object.hierarchy);
          final subChannelOffset = fbb.writeString(object.subChannel);
          final immediateParentOffset = fbb.writeString(object.immediateParent);
          final userNameOffset = fbb.writeString(object.userName);
          final lastOrderDateOffset = fbb.writeString(object.lastOrderDate);
          final outletTypeOffset = fbb.writeString(object.outletType);
          final mappedOffset = fbb.writeString(object.mapped);
          final latitudeOffset = fbb.writeString(object.latitude);
          final longitudeOffset = fbb.writeString(object.longitude);
          final ownerNameOffset = fbb.writeString(object.ownerName);
          final dobOffset = fbb.writeString(object.dob);
          final doaOffset = fbb.writeString(object.doa);
          final outletClassOffset = fbb.writeString(object.outletClass);
          final foodsTierOffset = fbb.writeString(object.foodsTier);
          final blobkeyOffset = fbb.writeString(object.blobkey);
          final recommendationDataOffset =
              fbb.writeString(object.recommendationData);
          final searchableStringOffset =
              fbb.writeString(object.searchableString);
          final branchOffset = fbb.writeString(object.branch);
          final supplierOffset = fbb.writeString(object.supplier);
          final outletCategoryOffset = fbb.writeString(object.outletCategory);
          final outletProbabilityV1Offset =
              fbb.writeString(object.outletProbabilityV1);
          final marketIdV1Offset = fbb.writeString(object.marketIdV1);
          final payoutSmsLinkOffset = fbb.writeString(object.payoutSmsLink);
          final expiryDateOffset = fbb.writeString(object.expiryDate);
          final ondcProviderOffset = object.ondcProvider == null
              ? null
              : fbb.writeString(object.ondcProvider!);
          final outletDivisionOffset = fbb.writeString(object.outletDivision);
          final clientBeOffset = fbb.writeString(object.clientBe);
          final acoholCheckOffset = fbb.writeString(object.acoholCheck);
          final distributionChannelOffset =
              fbb.writeString(object.distributionChannel);
          final salesRepOffset = fbb.writeString(object.salesRep);
          final creditStatusOffset = fbb.writeString(object.creditStatus);
          final customerTypeOffset = object.customerType == null
              ? null
              : fbb.writeString(object.customerType!);
          final deliveryplantOffset = object.deliveryplant == null
              ? null
              : fbb.writeString(object.deliveryplant!);
          final srNameOffset =
              object.srName == null ? null : fbb.writeString(object.srName!);
          final srIdOffset =
              object.srId == null ? null : fbb.writeString(object.srId!);
          final emtDiscountOffset = object.emtDiscount == null
              ? null
              : fbb.writeString(object.emtDiscount!);
          fbb.startTable(57);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addOffset(2, outletNameOffset);
          fbb.addOffset(3, activeStatusOffset);
          fbb.addOffset(4, outletCodeOffset);
          fbb.addOffset(5, beatNameOffset);
          fbb.addOffset(6, beatOffset);
          fbb.addOffset(7, addressOffset);
          fbb.addOffset(8, contactnoOffset);
          fbb.addOffset(9, displayAddressOffset);
          fbb.addOffset(10, channelOffset);
          fbb.addOffset(11, locationOffset);
          fbb.addOffset(12, hierarchyOffset);
          fbb.addOffset(13, subChannelOffset);
          fbb.addOffset(14, immediateParentOffset);
          fbb.addOffset(15, userNameOffset);
          fbb.addOffset(16, lastOrderDateOffset);
          fbb.addOffset(17, outletTypeOffset);
          fbb.addOffset(18, mappedOffset);
          fbb.addOffset(19, latitudeOffset);
          fbb.addOffset(20, longitudeOffset);
          fbb.addOffset(21, ownerNameOffset);
          fbb.addOffset(22, dobOffset);
          fbb.addOffset(23, doaOffset);
          fbb.addOffset(24, outletClassOffset);
          fbb.addOffset(25, foodsTierOffset);
          fbb.addOffset(26, blobkeyOffset);
          fbb.addOffset(27, recommendationDataOffset);
          fbb.addBool(28, object.pjp);
          fbb.addBool(29, object.crossSell);
          fbb.addBool(30, object.recover);
          fbb.addBool(31, object.mustOrder);
          fbb.addBool(32, object.focusProduct);
          fbb.addOffset(33, searchableStringOffset);
          fbb.addOffset(34, branchOffset);
          fbb.addOffset(35, supplierOffset);
          fbb.addOffset(36, outletCategoryOffset);
          fbb.addOffset(37, outletProbabilityV1Offset);
          fbb.addOffset(38, marketIdV1Offset);
          fbb.addOffset(39, payoutSmsLinkOffset);
          fbb.addOffset(40, expiryDateOffset);
          fbb.addOffset(41, ondcProviderOffset);
          fbb.addOffset(42, outletDivisionOffset);
          fbb.addOffset(43, clientBeOffset);
          fbb.addOffset(44, acoholCheckOffset);
          fbb.addOffset(45, distributionChannelOffset);
          fbb.addInt64(46, object.incentivePoints);
          fbb.addOffset(47, salesRepOffset);
          fbb.addFloat64(48, object.availableCredit);
          fbb.addFloat64(49, object.totalCredit);
          fbb.addOffset(50, creditStatusOffset);
          fbb.addOffset(51, customerTypeOffset);
          fbb.addOffset(52, deliveryplantOffset);
          fbb.addOffset(53, srNameOffset);
          fbb.addOffset(54, srIdOffset);
          fbb.addOffset(55, emtDiscountOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final hierarchyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final outletNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final immediateParentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final activeStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final beatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final beatNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final displayAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final contactnoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final channelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final subChannelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final lastOrderDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 36, '');
          final outletTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final mappedParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 40, '');
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final ownerNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final dobParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 48, '');
          final doaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 50, '');
          final outletClassParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 52, '');
          final foodsTierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 54, '');
          final blobkeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 56, '');
          final recommendationDataParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 58, '');
          final pjpParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 60, false);
          final crossSellParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 62, false);
          final recoverParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 64, false);
          final searchableStringParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 70, '');
          final mustOrderParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 66, false);
          final focusProductParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 68, false);
          final branchParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 72, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 74, '');
          final outletCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 76, '');
          final marketIdV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 80, '');
          final outletProbabilityV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 78, '');
          final payoutSmsLinkParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 82, '');
          final expiryDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 84, '');
          final ondcProviderParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 86);
          final clientBeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 90, '');
          final acoholCheckParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 92, '');
          final distributionChannelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 94, '');
          final outletDivisionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 88, '');
          final incentivePointsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 96);
          final salesRepParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 98, '');
          final availableCreditParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 100, 0);
          final totalCreditParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 102, 0);
          final creditStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 104, '');
          final customerTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 106);
          final deliveryplantParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 108);
          final srNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 110);
          final srIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 112);
          final emtDiscountParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 114);
          final object = OutletV1(
              hierarchy: hierarchyParam,
              lastModified: lastModifiedParam,
              outletName: outletNameParam,
              outletCode: outletCodeParam,
              immediateParent: immediateParentParam,
              activeStatus: activeStatusParam,
              address: addressParam,
              beat: beatParam,
              beatName: beatNameParam,
              displayAddress: displayAddressParam,
              contactno: contactnoParam,
              channel: channelParam,
              subChannel: subChannelParam,
              location: locationParam,
              userName: userNameParam,
              lastOrderDate: lastOrderDateParam,
              outletType: outletTypeParam,
              mapped: mappedParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              ownerName: ownerNameParam,
              dob: dobParam,
              doa: doaParam,
              outletClass: outletClassParam,
              foodsTier: foodsTierParam,
              blobkey: blobkeyParam,
              recommendationData: recommendationDataParam,
              pjp: pjpParam,
              crossSell: crossSellParam,
              recover: recoverParam,
              searchableString: searchableStringParam,
              mustOrder: mustOrderParam,
              focusProduct: focusProductParam,
              branch: branchParam,
              supplier: supplierParam,
              outletCategory: outletCategoryParam,
              marketIdV1: marketIdV1Param,
              outletProbabilityV1: outletProbabilityV1Param,
              payoutSmsLink: payoutSmsLinkParam,
              expiryDate: expiryDateParam,
              ondcProvider: ondcProviderParam,
              clientBe: clientBeParam,
              acoholCheck: acoholCheckParam,
              distributionChannel: distributionChannelParam,
              outletDivision: outletDivisionParam,
              incentivePoints: incentivePointsParam,
              salesRep: salesRepParam,
              availableCredit: availableCreditParam,
              totalCredit: totalCreditParam,
              creditStatus: creditStatusParam,
              customerType: customerTypeParam,
              deliveryplant: deliveryplantParam,
              srName: srNameParam,
              srId: srIdParam,
              emtDiscount: emtDiscountParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OutletWiseProductInfo: obx_int.EntityDefinition<OutletWiseProductInfo>(
        model: _entities[43],
        toOneRelations: (OutletWiseProductInfo object) => [],
        toManyRelations: (OutletWiseProductInfo object) => {},
        getId: (OutletWiseProductInfo object) => object.id,
        setId: (OutletWiseProductInfo object, int id) {
          object.id = id;
        },
        objectToFB: (OutletWiseProductInfo object, fb.Builder fbb) {
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final productInfoOffset = fbb.writeString(object.productInfo);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, outletCodeOffset);
          fbb.addOffset(2, productInfoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final productInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = OutletWiseProductInfo(
              id: idParam,
              outletCode: outletCodeParam,
              productInfo: productInfoParam);

          return object;
        }),
    PopularQuestionUIV1: obx_int.EntityDefinition<PopularQuestionUIV1>(
        model: _entities[44],
        toOneRelations: (PopularQuestionUIV1 object) => [],
        toManyRelations: (PopularQuestionUIV1 object) => {},
        getId: (PopularQuestionUIV1 object) => object.id,
        setId: (PopularQuestionUIV1 object, int id) {
          object.id = id;
        },
        objectToFB: (PopularQuestionUIV1 object, fb.Builder fbb) {
          final questionOffset = fbb.writeString(object.question);
          final answerOffset = fbb.writeString(object.answer);
          final templateOffset = fbb.writeString(object.template);
          final urlOffset = fbb.writeString(object.url);
          final embedLinkOffset = fbb.writeString(object.embedLink);
          final activeStatusOffset = fbb.writeString(object.activeStatus);
          final trainingTextOffset = fbb.writeString(object.trainingText);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionOffset);
          fbb.addOffset(2, answerOffset);
          fbb.addOffset(3, templateOffset);
          fbb.addOffset(4, urlOffset);
          fbb.addOffset(5, embedLinkOffset);
          fbb.addOffset(6, activeStatusOffset);
          fbb.addOffset(7, trainingTextOffset);
          fbb.addInt64(8, object.intent);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final answerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final templateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final embedLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final activeStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final trainingTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final intentParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = PopularQuestionUIV1(
              id: idParam,
              question: questionParam,
              answer: answerParam,
              template: templateParam,
              url: urlParam,
              embedLink: embedLinkParam,
              activeStatus: activeStatusParam,
              trainingText: trainingTextParam,
              intent: intentParam);

          return object;
        }),
    ProductAttributes: obx_int.EntityDefinition<ProductAttributes>(
        model: _entities[45],
        toOneRelations: (ProductAttributes object) => [],
        toManyRelations: (ProductAttributes object) => {},
        getId: (ProductAttributes object) => object.id,
        setId: (ProductAttributes object, int id) {
          object.id = id;
        },
        objectToFB: (ProductAttributes object, fb.Builder fbb) {
          final productTypesOffset = fbb.writeList(
              object.productTypes.map(fbb.writeString).toList(growable: false));
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, productTypesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final productTypesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 6, []);
          final object =
              ProductAttributes(id: idParam, productTypes: productTypesParam);

          return object;
        }),
    ProductFiltersV1: obx_int.EntityDefinition<ProductFiltersV1>(
        model: _entities[46],
        toOneRelations: (ProductFiltersV1 object) => [],
        toManyRelations: (ProductFiltersV1 object) => {},
        getId: (ProductFiltersV1 object) => object.id,
        setId: (ProductFiltersV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ProductFiltersV1 object, fb.Builder fbb) {
          final filtersOffset = fbb.writeString(object.filters);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, filtersOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final filtersParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = ProductFiltersV1(id: idParam, filters: filtersParam);

          return object;
        }),
    ProductMetadataV1: obx_int.EntityDefinition<ProductMetadataV1>(
        model: _entities[47],
        toOneRelations: (ProductMetadataV1 object) => [],
        toManyRelations: (ProductMetadataV1 object) => {},
        getId: (ProductMetadataV1 object) => object.id,
        setId: (ProductMetadataV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ProductMetadataV1 object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final supplierOffset = fbb.writeString(object.supplier);
          final activeStatusOffset = fbb.writeString(object.activeStatus);
          final groupIdV1Offset = object.groupIdV1 == null
              ? null
              : fbb.writeString(object.groupIdV1!);
          final buttonDescriptionV1Offset =
              fbb.writeString(object.buttonDescriptionV1);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          fbb.startTable(29);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addInt64(2, object.manufacturingDateV1.millisecondsSinceEpoch);
          fbb.addOffset(3, nameOffset);
          fbb.addFloat64(4, object.packPtr);
          fbb.addFloat64(5, object.casePtr);
          fbb.addFloat64(6, object.packMrp);
          fbb.addFloat64(7, object.caseMrp);
          fbb.addFloat64(8, object.srp);
          fbb.addOffset(9, descriptionOffset);
          fbb.addFloat64(10, object.quantity);
          fbb.addFloat64(11, object.case2Piece);
          fbb.addOffset(12, supplierOffset);
          fbb.addOffset(13, activeStatusOffset);
          fbb.addFloat64(14, object.otherUnitMrp);
          fbb.addFloat64(15, object.otherUnitPtr);
          fbb.addOffset(16, groupIdV1Offset);
          fbb.addOffset(17, buttonDescriptionV1Offset);
          fbb.addFloat64(18, object.discountMargin);
          fbb.addOffset(19, skuCodeOffset);
          fbb.addOffset(20, batchCodeOffset);
          fbb.addOffset(21, outletCodeOffset);
          fbb.addFloat64(22, object.tax);
          fbb.addFloat64(23, object.specialPrice);
          fbb.addInt64(24, object.caseToPieceQuantity);
          fbb.addInt64(25, object.caseToOtherUnitQuantity);
          fbb.addInt64(26, object.otherUnitToPieceQuantity);
          fbb.addInt64(27, object.pieceToOtherUnitQuantity);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final discountMarginParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final case2PieceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final casePtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final packPtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final caseMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final packMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final taxParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final activeStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final otherUnitMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final otherUnitPtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final manufacturingDateV1Param = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final groupIdV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final buttonDescriptionV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 38, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final specialPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 50, 0);
          final caseToPieceQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          final caseToOtherUnitQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
          final otherUnitToPieceQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          final pieceToOtherUnitQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0);
          final srpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = ProductMetadataV1(
              id: idParam,
              discountMargin: discountMarginParam,
              case2Piece: case2PieceParam,
              name: nameParam,
              description: descriptionParam,
              quantity: quantityParam,
              skuCode: skuCodeParam,
              batchCode: batchCodeParam,
              lastModified: lastModifiedParam,
              casePtr: casePtrParam,
              packPtr: packPtrParam,
              caseMrp: caseMrpParam,
              packMrp: packMrpParam,
              supplier: supplierParam,
              tax: taxParam,
              activeStatus: activeStatusParam,
              otherUnitMrp: otherUnitMrpParam,
              otherUnitPtr: otherUnitPtrParam,
              manufacturingDateV1: manufacturingDateV1Param,
              groupIdV1: groupIdV1Param,
              buttonDescriptionV1: buttonDescriptionV1Param,
              outletCode: outletCodeParam,
              specialPrice: specialPriceParam,
              caseToPieceQuantity: caseToPieceQuantityParam,
              caseToOtherUnitQuantity: caseToOtherUnitQuantityParam,
              otherUnitToPieceQuantity: otherUnitToPieceQuantityParam,
              pieceToOtherUnitQuantity: pieceToOtherUnitQuantityParam,
              srp: srpParam);

          return object;
        }),
    ProductPricingV1: obx_int.EntityDefinition<ProductPricingV1>(
        model: _entities[48],
        toOneRelations: (ProductPricingV1 object) => [object.product],
        toManyRelations: (ProductPricingV1 object) => {},
        getId: (ProductPricingV1 object) => object.id,
        setId: (ProductPricingV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ProductPricingV1 object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final typeValueOffset = fbb.writeString(object.typeValue);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.price);
          fbb.addFloat64(3, object.casePrice);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, typeValueOffset);
          fbb.addOffset(6, skuCodeOffset);
          fbb.addOffset(7, batchCodeOffset);
          fbb.addInt64(8, object.priority);
          fbb.addInt64(9, object.product.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final typeValueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final casePriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = ProductPricingV1(
              type: typeParam,
              typeValue: typeValueParam,
              id: idParam,
              skuCode: skuCodeParam,
              batchCode: batchCodeParam,
              price: priceParam,
              casePrice: casePriceParam,
              lastModified: lastModifiedParam,
              priority: priorityParam);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.product.attach(store);
          return object;
        }),
    ProductV1: obx_int.EntityDefinition<ProductV1>(
        model: _entities[49],
        toOneRelations: (ProductV1 object) => [],
        toManyRelations: (ProductV1 object) => {},
        getId: (ProductV1 object) => object.id,
        setId: (ProductV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ProductV1 object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final productDescriptionOffset =
              fbb.writeString(object.productDescription);
          final imagesOffset = fbb.writeList(
              object.images.map(fbb.writeString).toList(growable: false));
          final categoryOffset = fbb.writeString(object.category);
          final subCategoryOffset = fbb.writeString(object.subCategory);
          final subCategoryCodeOffset = fbb.writeString(object.subCategoryCode);
          final brandOffset = fbb.writeString(object.brand);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final pieceSizeDescOffset = fbb.writeString(object.pieceSizeDesc);
          final suggestionTextOffset = fbb.writeString(object.suggestionText);
          final productTagOffset = fbb.writeString(object.productTag);
          final itemClassOffset = fbb.writeString(object.itemClass);
          final skuPriorityOffset = fbb.writeString(object.skuPriority);
          final supplierOffset = fbb.writeString(object.supplier);
          final marketSkuCodeOffset = fbb.writeString(object.marketSkuCode);
          final otherUnitNameOffset = fbb.writeString(object.otherUnitName);
          final smartBuyOffset = fbb.writeString(object.smartBuy);
          final groupIdV1Offset = fbb.writeString(object.groupIdV1);
          final itemDescV1Offset = fbb.writeString(object.itemDescV1);
          final uomV1Offset = fbb.writeString(object.uomV1);
          final buttonDescriptionV1Offset =
              fbb.writeString(object.buttonDescriptionV1);
          final translationOffset = fbb.writeString(object.translation);
          final productTypeOffset = fbb.writeString(object.productType);
          final productCodeOffset = fbb.writeString(object.productCode);
          final returnCodeOffset = fbb.writeString(object.returnCode);
          final eb2bCodeOffset = fbb.writeString(object.eb2bCode);
          fbb.startTable(51);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, productDescriptionOffset);
          fbb.addFloat64(5, object.suggestedQty);
          fbb.addFloat64(6, object.suggestedCaseQty);
          fbb.addFloat64(7, object.case2Piece);
          fbb.addOffset(8, imagesOffset);
          fbb.addOffset(9, categoryOffset);
          fbb.addOffset(10, subCategoryOffset);
          fbb.addOffset(11, subCategoryCodeOffset);
          fbb.addOffset(12, brandOffset);
          fbb.addOffset(13, skuCodeOffset);
          fbb.addOffset(14, batchCodeOffset);
          fbb.addInt64(15, object.priority);
          fbb.addInt64(16, object.pieceSize);
          fbb.addOffset(17, pieceSizeDescOffset);
          fbb.addOffset(18, suggestionTextOffset);
          fbb.addOffset(19, productTagOffset);
          fbb.addOffset(20, itemClassOffset);
          fbb.addFloat64(21, object.packPtr);
          fbb.addFloat64(22, object.casePtr);
          fbb.addFloat64(23, object.packMrp);
          fbb.addInt64(24, object.mrp);
          fbb.addFloat64(25, object.caseMrp);
          fbb.addOffset(26, skuPriorityOffset);
          fbb.addOffset(27, supplierOffset);
          fbb.addFloat64(28, object.tax);
          fbb.addOffset(29, marketSkuCodeOffset);
          fbb.addFloat64(30, object.otherUnitMrp);
          fbb.addFloat64(31, object.otherUnitToPieceQuantity);
          fbb.addFloat64(32, object.pieceToOtherUnitQuantity);
          fbb.addFloat64(33, object.otherUnitPtr);
          fbb.addOffset(34, otherUnitNameOffset);
          fbb.addOffset(35, smartBuyOffset);
          fbb.addOffset(36, groupIdV1Offset);
          fbb.addOffset(37, itemDescV1Offset);
          fbb.addOffset(38, uomV1Offset);
          fbb.addInt64(39, object.manufacturingDateV1.millisecondsSinceEpoch);
          fbb.addOffset(40, buttonDescriptionV1Offset);
          fbb.addFloat64(41, object.basePackPtrV1);
          fbb.addFloat64(42, object.baseCasePtrV1);
          fbb.addOffset(43, translationOffset);
          fbb.addOffset(44, productTypeOffset);
          fbb.addOffset(45, productCodeOffset);
          fbb.addFloat64(46, object.srp);
          fbb.addOffset(47, returnCodeOffset);
          fbb.addFloat64(48, object.discountMargin);
          fbb.addOffset(49, eb2bCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final productTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 92, '');
          final productDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final productCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 94, '');
          final case2PieceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final suggestedQtyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final suggestedCaseQtyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final imagesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final brandParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final subCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final pieceSizeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final pieceSizeDescParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 38, '');
          final suggestionTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, '');
          final productTagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final itemClassParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final packPtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 46, 0);
          final casePtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final basePackPtrV1Param = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 86);
          final baseCasePtrV1Param = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 88);
          final packMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 50, 0);
          final mrpParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          final caseMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 54, 0);
          final otherUnitMrpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 64, 0);
          final otherUnitToPieceQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 66, 0);
          final pieceToOtherUnitQuantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 68, 0);
          final otherUnitPtrParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 70, 0);
          final otherUnitNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 72, '');
          final skuPriorityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 56, '');
          final marketSkuCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 62, '');
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 58, '');
          final smartBuyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 74, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final taxParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 60, 0);
          final uomV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 80, '');
          final groupIdV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 76, '');
          final subCategoryCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final itemDescV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 78, '');
          final buttonDescriptionV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 84, '');
          final manufacturingDateV1Param = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 82, 0));
          final translationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 90, '');
          final discountMarginParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 100, 0);
          final srpParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 96, 0);
          final returnCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 98, '');
          final eb2bCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 102, '');
          final object = ProductV1(
              id: idParam,
              productType: productTypeParam,
              productDescription: productDescriptionParam,
              productCode: productCodeParam,
              case2Piece: case2PieceParam,
              name: nameParam,
              description: descriptionParam,
              suggestedQty: suggestedQtyParam,
              suggestedCaseQty: suggestedCaseQtyParam,
              images: imagesParam,
              brand: brandParam,
              category: categoryParam,
              subCategory: subCategoryParam,
              pieceSize: pieceSizeParam,
              pieceSizeDesc: pieceSizeDescParam,
              suggestionText: suggestionTextParam,
              productTag: productTagParam,
              itemClass: itemClassParam,
              packPtr: packPtrParam,
              casePtr: casePtrParam,
              basePackPtrV1: basePackPtrV1Param,
              baseCasePtrV1: baseCasePtrV1Param,
              packMrp: packMrpParam,
              mrp: mrpParam,
              caseMrp: caseMrpParam,
              otherUnitMrp: otherUnitMrpParam,
              otherUnitToPieceQuantity: otherUnitToPieceQuantityParam,
              pieceToOtherUnitQuantity: pieceToOtherUnitQuantityParam,
              otherUnitPtr: otherUnitPtrParam,
              otherUnitName: otherUnitNameParam,
              skuPriority: skuPriorityParam,
              marketSkuCode: marketSkuCodeParam,
              skuCode: skuCodeParam,
              supplier: supplierParam,
              smartBuy: smartBuyParam,
              batchCode: batchCodeParam,
              lastModified: lastModifiedParam,
              priority: priorityParam,
              tax: taxParam,
              uomV1: uomV1Param,
              groupIdV1: groupIdV1Param,
              subCategoryCode: subCategoryCodeParam,
              itemDescV1: itemDescV1Param,
              buttonDescriptionV1: buttonDescriptionV1Param,
              manufacturingDateV1: manufacturingDateV1Param,
              translation: translationParam,
              discountMargin: discountMarginParam,
              srp: srpParam,
              returnCode: returnCodeParam,
              eb2bCode: eb2bCodeParam);

          return object;
        }),
    RecommendedOrdersV1: obx_int.EntityDefinition<RecommendedOrdersV1>(
        model: _entities[50],
        toOneRelations: (RecommendedOrdersV1 object) => [],
        toManyRelations: (RecommendedOrdersV1 object) => {},
        getId: (RecommendedOrdersV1 object) => object.id,
        setId: (RecommendedOrdersV1 object, int id) {
          object.id = id;
        },
        objectToFB: (RecommendedOrdersV1 object, fb.Builder fbb) {
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final skuPriorityOffset = fbb.writeString(object.skuPriority);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final recommendationTypeOffset =
              fbb.writeString(object.recommendationType);
          final underperformanceAttrOffset =
              fbb.writeString(object.underperformanceAttr);
          final supportKPIOffset = fbb.writeString(object.supportKPI);
          final extendedAttributesV1Offset =
              fbb.writeString(object.extendedAttributesV1);
          final activeStatusV1Offset = fbb.writeString(object.activeStatusV1);
          final recommendationIdOffset =
              fbb.writeString(object.recommendationId);
          final recommendationTagOffset =
              fbb.writeString(object.recommendationTag);
          final basketIdOffset = fbb.writeString(object.basketId);
          fbb.startTable(23);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isFavourite);
          fbb.addOffset(2, batchCodeOffset);
          fbb.addOffset(3, skuCodeOffset);
          fbb.addInt64(4, object.pieceQuantity);
          fbb.addInt64(5, object.caseQuantity);
          fbb.addOffset(6, skuPriorityOffset);
          fbb.addOffset(7, outletCodeOffset);
          fbb.addOffset(8, recommendationTypeOffset);
          fbb.addOffset(9, underperformanceAttrOffset);
          fbb.addFloat64(10, object.suggestQty);
          fbb.addInt64(11, object.priority);
          fbb.addFloat64(12, object.totalAmount);
          fbb.addOffset(13, supportKPIOffset);
          fbb.addOffset(14, extendedAttributesV1Offset);
          fbb.addFloat64(15, object.skuProbabilityV1);
          fbb.addInt64(16, object.startDateV1);
          fbb.addInt64(17, object.endDateV1);
          fbb.addOffset(18, activeStatusV1Offset);
          fbb.addOffset(19, recommendationIdOffset);
          fbb.addOffset(20, recommendationTagOffset);
          fbb.addOffset(21, basketIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final isFavouriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final pieceQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final caseQuantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final skuPriorityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final recommendationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final underperformanceAttrParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final totalAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final supportKPIParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final suggestQtyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final extendedAttributesV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final skuProbabilityV1Param =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final startDateV1Param =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final endDateV1Param =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          final activeStatusV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, '');
          final recommendationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 42, '');
          final recommendationTagParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 44, '');
          final basketIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final object = RecommendedOrdersV1(
              id: idParam,
              isFavourite: isFavouriteParam,
              batchCode: batchCodeParam,
              skuCode: skuCodeParam,
              pieceQuantity: pieceQuantityParam,
              caseQuantity: caseQuantityParam,
              skuPriority: skuPriorityParam,
              outletCode: outletCodeParam,
              recommendationType: recommendationTypeParam,
              underperformanceAttr: underperformanceAttrParam,
              totalAmount: totalAmountParam,
              supportKPI: supportKPIParam,
              suggestQty: suggestQtyParam,
              priority: priorityParam,
              extendedAttributesV1: extendedAttributesV1Param,
              skuProbabilityV1: skuProbabilityV1Param,
              startDateV1: startDateV1Param,
              endDateV1: endDateV1Param,
              activeStatusV1: activeStatusV1Param,
              recommendationId: recommendationIdParam,
              recommendationTag: recommendationTagParam,
              basketId: basketIdParam);

          return object;
        }),
    ReturnModelV1: obx_int.EntityDefinition<ReturnModelV1>(
        model: _entities[51],
        toOneRelations: (ReturnModelV1 object) => [],
        toManyRelations: (ReturnModelV1 object) => {},
        getId: (ReturnModelV1 object) => object.id,
        setId: (ReturnModelV1 object, int id) {
          object.id = id;
        },
        objectToFB: (ReturnModelV1 object, fb.Builder fbb) {
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final reasonIdV1Offset = fbb.writeString(object.reasonIdV1);
          final reasonV1Offset = fbb.writeString(object.reasonV1);
          final otherReasonV1Offset = fbb.writeString(object.otherReasonV1);
          final csQtyOffset = fbb.writeString(object.csQty);
          final pcQtyOffset = fbb.writeString(object.pcQty);
          final invoiceV1Offset = fbb.writeString(object.invoiceV1);
          final mrpV1Offset = fbb.writeString(object.mrpV1);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuCodeOffset);
          fbb.addOffset(2, outletCodeOffset);
          fbb.addOffset(3, reasonIdV1Offset);
          fbb.addOffset(4, reasonV1Offset);
          fbb.addOffset(5, otherReasonV1Offset);
          fbb.addOffset(6, csQtyOffset);
          fbb.addOffset(7, pcQtyOffset);
          fbb.addOffset(8, invoiceV1Offset);
          fbb.addOffset(9, mrpV1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final reasonIdV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final reasonV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final otherReasonV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final csQtyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final pcQtyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final invoiceV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final mrpV1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = ReturnModelV1(
              skuCode: skuCodeParam,
              outletCode: outletCodeParam,
              reasonIdV1: reasonIdV1Param,
              reasonV1: reasonV1Param,
              otherReasonV1: otherReasonV1Param,
              csQty: csQtyParam,
              pcQty: pcQtyParam,
              invoiceV1: invoiceV1Param,
              mrpV1: mrpV1Param)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    RewardsDisbursmentV1: obx_int.EntityDefinition<RewardsDisbursmentV1>(
        model: _entities[52],
        toOneRelations: (RewardsDisbursmentV1 object) => [],
        toManyRelations: (RewardsDisbursmentV1 object) => {},
        getId: (RewardsDisbursmentV1 object) => object.id,
        setId: (RewardsDisbursmentV1 object, int id) {
          object.id = id;
        },
        objectToFB: (RewardsDisbursmentV1 object, fb.Builder fbb) {
          final amountOffset = fbb.writeString(object.amount);
          final tdsOffset = fbb.writeString(object.tds);
          final totalOffset = fbb.writeString(object.total);
          final invoiceNumberOffset = fbb.writeString(object.invoiceNumber);
          final transactionIDOffset = fbb.writeString(object.transactionID);
          final bankNameOffset = fbb.writeString(object.bankName);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addOffset(2, amountOffset);
          fbb.addOffset(3, tdsOffset);
          fbb.addOffset(4, totalOffset);
          fbb.addOffset(5, invoiceNumberOffset);
          fbb.addInt64(6, object.monthNumber);
          fbb.addInt64(7, object.payoutYear);
          fbb.addOffset(8, transactionIDOffset);
          fbb.addOffset(9, bankNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final amountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final tdsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final totalParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final invoiceNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final monthNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final transactionIDParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final bankNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final payoutYearParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = RewardsDisbursmentV1(
              lastModified: lastModifiedParam,
              amount: amountParam,
              tds: tdsParam,
              total: totalParam,
              invoiceNumber: invoiceNumberParam,
              monthNumber: monthNumberParam,
              transactionID: transactionIDParam,
              bankName: bankNameParam,
              payoutYear: payoutYearParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SalesRepOutletsV1: obx_int.EntityDefinition<SalesRepOutletsV1>(
        model: _entities[53],
        toOneRelations: (SalesRepOutletsV1 object) => [],
        toManyRelations: (SalesRepOutletsV1 object) => {},
        getId: (SalesRepOutletsV1 object) => object.id,
        setId: (SalesRepOutletsV1 object, int id) {
          object.id = id;
        },
        objectToFB: (SalesRepOutletsV1 object, fb.Builder fbb) {
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final loginIdOffset = fbb.writeString(object.loginId);
          final outletNameOffset = fbb.writeString(object.outletName);
          final nameOffset = fbb.writeString(object.name);
          final contactNoOffset = fbb.writeString(object.contactNo);
          final currentPJPUsersV1Offset = object.currentPJPUsersV1 == null
              ? null
              : fbb.writeString(object.currentPJPUsersV1!);
          final totalClickedOffset = fbb.writeString(object.totalClicked);
          final todayClickedOffset = fbb.writeString(object.todayClicked);
          final lastOrderDateV1Offset = object.lastOrderDateV1 == null
              ? null
              : fbb.writeString(object.lastOrderDateV1!);
          final appLinkOffset = fbb.writeString(object.appLink);
          final totalOrderOffset = fbb.writeString(object.totalOrder);
          final todayOrderOffset = fbb.writeString(object.todayOrder);
          final registeredOffset = fbb.writeString(object.registered);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, outletCodeOffset);
          fbb.addOffset(2, loginIdOffset);
          fbb.addOffset(3, outletNameOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, contactNoOffset);
          fbb.addOffset(6, currentPJPUsersV1Offset);
          fbb.addOffset(7, totalClickedOffset);
          fbb.addOffset(8, todayClickedOffset);
          fbb.addOffset(9, lastOrderDateV1Offset);
          fbb.addOffset(10, appLinkOffset);
          fbb.addOffset(11, totalOrderOffset);
          fbb.addOffset(12, todayOrderOffset);
          fbb.addOffset(13, registeredOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final outletNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final contactNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final currentPJPUsersV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final totalClickedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final todayClickedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final lastOrderDateV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final appLinkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final totalOrderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final todayOrderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final registeredParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final object = SalesRepOutletsV1(
              id: idParam,
              outletCode: outletCodeParam,
              loginId: loginIdParam,
              outletName: outletNameParam,
              name: nameParam,
              contactNo: contactNoParam,
              currentPJPUsersV1: currentPJPUsersV1Param,
              totalClicked: totalClickedParam,
              todayClicked: todayClickedParam,
              lastOrderDateV1: lastOrderDateV1Param,
              appLink: appLinkParam,
              totalOrder: totalOrderParam,
              todayOrder: todayOrderParam,
              registered: registeredParam);

          return object;
        }),
    Schemes: obx_int.EntityDefinition<Schemes>(
        model: _entities[54],
        toOneRelations: (Schemes object) => [],
        toManyRelations: (Schemes object) => {},
        getId: (Schemes object) => object.id,
        setId: (Schemes object, int id) {
          object.id = id;
        },
        objectToFB: (Schemes object, fb.Builder fbb) {
          final discountIdOffset = fbb.writeString(object.discountId);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final schemeDescriptionOffset =
              fbb.writeString(object.schemeDescription);
          final supplierOffset = fbb.writeString(object.supplier);
          final typeOffset = fbb.writeString(object.type);
          final criteriaOffset = fbb.writeString(object.criteria);
          final programLevelOffset = fbb.writeString(object.programLevel);
          final discountedBatchCodeOffset =
              fbb.writeString(object.discountedBatchCode);
          final programNumberOffset = fbb.writeString(object.programNumber);
          final slabsInfoOffset = fbb.writeString(object.slabsInfo);
          final minMaxCondOffset = fbb.writeString(object.minMaxCond);
          final mustBuyAttributesOffset =
              fbb.writeString(object.mustBuyAttributes);
          final channelOffset = fbb.writeString(object.channel);
          final distributionChannelOffset =
              fbb.writeString(object.distributionChannel);
          final subChannelOffset = fbb.writeString(object.subChannel);
          final outletTypeOffset = fbb.writeString(object.outletType);
          final outletCategoryOffset = fbb.writeString(object.outletCategory);
          final outletDivisionOffset = fbb.writeString(object.outletDivision);
          final outletClassOffset = fbb.writeString(object.outletClass);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final marketIdOffset = fbb.writeString(object.marketId);
          final marketNameOffset = fbb.writeString(object.marketName);
          final bannerBlobOffset = object.bannerBlob == null
              ? null
              : fbb.writeString(object.bannerBlob!);
          final loginIdOffset = fbb.writeString(object.loginId);
          final colorOffset = fbb.writeString(object.color);
          final outletExclusionKeyOffset = object.outletExclusionKey == null
              ? null
              : fbb.writeString(object.outletExclusionKey!);
          final outletExclusionValuesOffset =
              object.outletExclusionValues == null
                  ? null
                  : fbb.writeString(object.outletExclusionValues!);
          final itemEachOffset = object.itemEach == null
              ? null
              : fbb.writeString(object.itemEach!);
          final extendedAttributesOffset =
              fbb.writeString(object.extendedAttributes);
          final activeStatusOffset = fbb.writeString(object.activeStatus);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          fbb.startTable(41);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, discountIdOffset);
          fbb.addOffset(2, batchCodeOffset);
          fbb.addInt64(3, object.priority);
          fbb.addOffset(4, schemeDescriptionOffset);
          fbb.addOffset(5, supplierOffset);
          fbb.addInt64(6, object.startDate);
          fbb.addInt64(7, object.endDate);
          fbb.addOffset(8, typeOffset);
          fbb.addOffset(9, criteriaOffset);
          fbb.addFloat64(10, object.maxBudget);
          fbb.addFloat64(11, object.maxTerm);
          fbb.addOffset(12, programLevelOffset);
          fbb.addInt64(13, object.mustBuyQty);
          fbb.addOffset(14, discountedBatchCodeOffset);
          fbb.addOffset(15, programNumberOffset);
          fbb.addOffset(16, slabsInfoOffset);
          fbb.addOffset(17, minMaxCondOffset);
          fbb.addBool(18, object.overNAbove);
          fbb.addOffset(19, mustBuyAttributesOffset);
          fbb.addOffset(20, channelOffset);
          fbb.addOffset(21, distributionChannelOffset);
          fbb.addOffset(22, subChannelOffset);
          fbb.addOffset(23, outletTypeOffset);
          fbb.addOffset(24, outletCategoryOffset);
          fbb.addOffset(25, outletDivisionOffset);
          fbb.addOffset(26, outletClassOffset);
          fbb.addOffset(27, outletCodeOffset);
          fbb.addOffset(28, marketIdOffset);
          fbb.addOffset(29, marketNameOffset);
          fbb.addOffset(30, bannerBlobOffset);
          fbb.addInt64(31, object.bannerPriority);
          fbb.addOffset(32, loginIdOffset);
          fbb.addOffset(33, colorOffset);
          fbb.addOffset(34, outletExclusionKeyOffset);
          fbb.addOffset(35, outletExclusionValuesOffset);
          fbb.addOffset(36, itemEachOffset);
          fbb.addOffset(37, extendedAttributesOffset);
          fbb.addOffset(38, activeStatusOffset);
          fbb.addOffset(39, skuCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final discountIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final schemeDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final startDateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final endDateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final criteriaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final maxBudgetParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final maxTermParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final programLevelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final mustBuyQtyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final discountedBatchCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final programNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final slabsInfoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 36, '');
          final minMaxCondParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final overNAboveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false);
          final mustBuyAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 42, '');
          final activeStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 80, '');
          final extendedAttributesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 78, '');
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 82, '');
          final channelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final distributionChannelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 46, '');
          final subChannelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 48, '');
          final outletTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 50, '');
          final outletCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 52, '');
          final outletDivisionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 54, '');
          final outletClassParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 56, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 58, '');
          final marketIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 60, '');
          final marketNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 62, '');
          final bannerBlobParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 64);
          final bannerPriorityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66);
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 68, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 70, '');
          final outletExclusionKeyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final outletExclusionValuesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final itemEachParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 76);
          final object = Schemes(
              discountId: discountIdParam,
              batchCode: batchCodeParam,
              priority: priorityParam,
              schemeDescription: schemeDescriptionParam,
              supplier: supplierParam,
              startDate: startDateParam,
              endDate: endDateParam,
              type: typeParam,
              criteria: criteriaParam,
              maxBudget: maxBudgetParam,
              maxTerm: maxTermParam,
              programLevel: programLevelParam,
              mustBuyQty: mustBuyQtyParam,
              discountedBatchCode: discountedBatchCodeParam,
              programNumber: programNumberParam,
              slabsInfo: slabsInfoParam,
              minMaxCond: minMaxCondParam,
              overNAbove: overNAboveParam,
              mustBuyAttributes: mustBuyAttributesParam,
              activeStatus: activeStatusParam,
              extendedAttributes: extendedAttributesParam,
              skuCode: skuCodeParam,
              channel: channelParam,
              distributionChannel: distributionChannelParam,
              subChannel: subChannelParam,
              outletType: outletTypeParam,
              outletCategory: outletCategoryParam,
              outletDivision: outletDivisionParam,
              outletClass: outletClassParam,
              outletCode: outletCodeParam,
              marketId: marketIdParam,
              marketName: marketNameParam,
              bannerBlob: bannerBlobParam,
              bannerPriority: bannerPriorityParam,
              loginId: loginIdParam,
              color: colorParam,
              outletExclusionKey: outletExclusionKeyParam,
              outletExclusionValues: outletExclusionValuesParam,
              itemEach: itemEachParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SearchHistoryModelV1: obx_int.EntityDefinition<SearchHistoryModelV1>(
        model: _entities[55],
        toOneRelations: (SearchHistoryModelV1 object) => [],
        toManyRelations: (SearchHistoryModelV1 object) => {},
        getId: (SearchHistoryModelV1 object) => object.id,
        setId: (SearchHistoryModelV1 object, int id) {
          object.id = id;
        },
        objectToFB: (SearchHistoryModelV1 object, fb.Builder fbb) {
          final searchHistoryOffset = fbb.writeString(object.searchHistory);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, searchHistoryOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final searchHistoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object = SearchHistoryModelV1(
              id: idParam, searchHistory: searchHistoryParam);

          return object;
        }),
    SecondaryProductIntentV1:
        obx_int.EntityDefinition<SecondaryProductIntentV1>(
            model: _entities[56],
            toOneRelations: (SecondaryProductIntentV1 object) => [],
            toManyRelations: (SecondaryProductIntentV1 object) => {},
            getId: (SecondaryProductIntentV1 object) => object.id,
            setId: (SecondaryProductIntentV1 object, int id) {
              object.id = id;
            },
            objectToFB: (SecondaryProductIntentV1 object, fb.Builder fbb) {
              final suggestedQtyV1Offset =
                  fbb.writeString(object.suggestedQtyV1);
              final outletCodeWithBatchCodeV1Offset =
                  fbb.writeString(object.outletCodeWithBatchCodeV1);
              final outletCodeOffset = fbb.writeString(object.outletCode);
              fbb.startTable(5);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, suggestedQtyV1Offset);
              fbb.addOffset(2, outletCodeWithBatchCodeV1Offset);
              fbb.addOffset(3, outletCodeOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final suggestedQtyV1Param =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, '');
              final outletCodeWithBatchCodeV1Param =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final outletCodeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, '');
              final object = SecondaryProductIntentV1(
                  id: idParam,
                  suggestedQtyV1: suggestedQtyV1Param,
                  outletCodeWithBatchCodeV1: outletCodeWithBatchCodeV1Param,
                  outletCode: outletCodeParam);

              return object;
            }),
    SecondaryProductV1: obx_int.EntityDefinition<SecondaryProductV1>(
        model: _entities[57],
        toOneRelations: (SecondaryProductV1 object) => [],
        toManyRelations: (SecondaryProductV1 object) => {},
        getId: (SecondaryProductV1 object) => object.id,
        setId: (SecondaryProductV1 object, int id) {
          object.id = id;
        },
        objectToFB: (SecondaryProductV1 object, fb.Builder fbb) {
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final brandOffset = fbb.writeString(object.brand);
          final featureOffset = fbb.writeString(object.feature);
          final channelOffset = fbb.writeString(object.channel);
          final secondaryProductTagOffset =
              fbb.writeString(object.secondaryProductTag);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, batchCodeOffset);
          fbb.addOffset(2, skuCodeOffset);
          fbb.addOffset(3, brandOffset);
          fbb.addOffset(4, featureOffset);
          fbb.addOffset(5, channelOffset);
          fbb.addBool(6, object.tagVisibility);
          fbb.addFloat64(7, object.quantity);
          fbb.addInt64(8, object.minQtyForEarnPoints);
          fbb.addOffset(9, secondaryProductTagOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final brandParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final featureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final channelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final tagVisibilityParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final minQtyForEarnPointsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final secondaryProductTagParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final object = SecondaryProductV1(
              id: idParam,
              batchCode: batchCodeParam,
              skuCode: skuCodeParam,
              brand: brandParam,
              feature: featureParam,
              channel: channelParam,
              tagVisibility: tagVisibilityParam,
              quantity: quantityParam,
              minQtyForEarnPoints: minQtyForEarnPointsParam,
              secondaryProductTag: secondaryProductTagParam);

          return object;
        }),
    SkuDescriptionV1: obx_int.EntityDefinition<SkuDescriptionV1>(
        model: _entities[58],
        toOneRelations: (SkuDescriptionV1 object) => [],
        toManyRelations: (SkuDescriptionV1 object) => {},
        getId: (SkuDescriptionV1 object) => object.id,
        setId: (SkuDescriptionV1 object, int id) {
          object.id = id;
        },
        objectToFB: (SkuDescriptionV1 object, fb.Builder fbb) {
          final skuCodeOffset = fbb.writeString(object.skuCode);
          final skuDescriptionOffset = fbb.writeString(object.skuDescription);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, skuCodeOffset);
          fbb.addOffset(2, skuDescriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final skuCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final skuDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = SkuDescriptionV1(
              id: idParam,
              skuCode: skuCodeParam,
              skuDescription: skuDescriptionParam);

          return object;
        }),
    StockQuantityV1: obx_int.EntityDefinition<StockQuantityV1>(
        model: _entities[59],
        toOneRelations: (StockQuantityV1 object) => [],
        toManyRelations: (StockQuantityV1 object) => {},
        getId: (StockQuantityV1 object) => object.id,
        setId: (StockQuantityV1 object, int id) {
          object.id = id;
        },
        objectToFB: (StockQuantityV1 object, fb.Builder fbb) {
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final supplierOffset = fbb.writeString(object.supplier);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, batchCodeOffset);
          fbb.addInt64(2, object.qty);
          fbb.addOffset(3, supplierOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final qtyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final supplierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = StockQuantityV1(
              id: idParam,
              batchCode: batchCodeParam,
              qty: qtyParam,
              supplier: supplierParam);

          return object;
        }),
    SupplierV1: obx_int.EntityDefinition<SupplierV1>(
        model: _entities[60],
        toOneRelations: (SupplierV1 object) => [],
        toManyRelations: (SupplierV1 object) => {},
        getId: (SupplierV1 object) => object.id,
        setId: (SupplierV1 object, int id) {
          object.id = id;
        },
        objectToFB: (SupplierV1 object, fb.Builder fbb) {
          final supplierIdOffset = fbb.writeString(object.supplierId);
          final nameOffset = fbb.writeString(object.name);
          final mobileOffset = fbb.writeString(object.mobile);
          final loginIdOffset = fbb.writeString(object.loginId);
          final levelOffset = fbb.writeString(object.level);
          final typeOffset = fbb.writeString(object.type);
          final orderFulfillmentTimeOffset =
              fbb.writeString(object.orderFulfillmentTime);
          final rcsIdOffset = fbb.writeString(object.rcsId);
          final sifyIdOffset = fbb.writeString(object.sifyId);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, supplierIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, mobileOffset);
          fbb.addOffset(4, loginIdOffset);
          fbb.addInt64(5, object.min);
          fbb.addInt64(6, object.max);
          fbb.addOffset(7, levelOffset);
          fbb.addOffset(8, typeOffset);
          fbb.addOffset(9, orderFulfillmentTimeOffset);
          fbb.addOffset(10, rcsIdOffset);
          fbb.addOffset(11, sifyIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final supplierIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final minParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final maxParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final levelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final orderFulfillmentTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final rcsIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final sifyIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final object = SupplierV1(
              supplierId: supplierIdParam,
              name: nameParam,
              mobile: mobileParam,
              loginId: loginIdParam,
              min: minParam,
              max: maxParam,
              level: levelParam,
              type: typeParam,
              orderFulfillmentTime: orderFulfillmentTimeParam,
              rcsId: rcsIdParam,
              sifyId: sifyIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    TargetModel: obx_int.EntityDefinition<TargetModel>(
        model: _entities[61],
        toOneRelations: (TargetModel object) => [],
        toManyRelations: (TargetModel object) => {},
        getId: (TargetModel object) => object.id,
        setId: (TargetModel object, int id) {
          object.id = id;
        },
        objectToFB: (TargetModel object, fb.Builder fbb) {
          final loginIdOffset = fbb.writeString(object.loginId);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, loginIdOffset);
          fbb.addFloat64(2, object.target);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final targetParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = TargetModel(
              id: idParam, loginId: loginIdParam, target: targetParam);

          return object;
        }),
    UnavailableProductUIV1: obx_int.EntityDefinition<UnavailableProductUIV1>(
        model: _entities[62],
        toOneRelations: (UnavailableProductUIV1 object) => [],
        toManyRelations: (UnavailableProductUIV1 object) => {},
        getId: (UnavailableProductUIV1 object) => object.id,
        setId: (UnavailableProductUIV1 object, int id) {
          object.id = id;
        },
        objectToFB: (UnavailableProductUIV1 object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final batchCodeOffset = fbb.writeString(object.batchCode);
          final descriptionOffset = fbb.writeString(object.description);
          final imagesOffset = fbb.writeList(
              object.images.map(fbb.writeString).toList(growable: false));
          final categoryOffset = fbb.writeString(object.category);
          final buttonDescriptionV1Offset =
              fbb.writeString(object.buttonDescriptionV1);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastModified.millisecondsSinceEpoch);
          fbb.addInt64(2, object.manufacturingDateV1.millisecondsSinceEpoch);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, batchCodeOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, imagesOffset);
          fbb.addOffset(7, categoryOffset);
          fbb.addFloat64(8, object.price);
          fbb.addFloat64(9, object.casePrice);
          fbb.addFloat64(10, object.caseToPieceQty);
          fbb.addInt64(11, object.caseMrp);
          fbb.addInt64(12, object.mrp);
          fbb.addInt64(13, object.pieceSize);
          fbb.addOffset(14, buttonDescriptionV1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final batchCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final imagesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final casePriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final caseToPieceQtyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final caseMrpParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final mrpParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final pieceSizeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final manufacturingDateV1Param = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final buttonDescriptionV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final object = UnavailableProductUIV1(
              id: idParam,
              name: nameParam,
              batchCode: batchCodeParam,
              description: descriptionParam,
              images: imagesParam,
              category: categoryParam,
              price: priceParam,
              casePrice: casePriceParam,
              caseToPieceQty: caseToPieceQtyParam,
              caseMrp: caseMrpParam,
              mrp: mrpParam,
              pieceSize: pieceSizeParam,
              lastModified: lastModifiedParam,
              manufacturingDateV1: manufacturingDateV1Param,
              buttonDescriptionV1: buttonDescriptionV1Param);

          return object;
        }),
    UserInfo: obx_int.EntityDefinition<UserInfo>(
        model: _entities[63],
        toOneRelations: (UserInfo object) => [],
        toManyRelations: (UserInfo object) => {},
        getId: (UserInfo object) => object.id,
        setId: (UserInfo object, int id) {
          object.id = id;
        },
        objectToFB: (UserInfo object, fb.Builder fbb) {
          final userAccountIdOffset = fbb.writeString(object.userAccountId);
          final loginIdOffset = fbb.writeString(object.loginId);
          final mobileOffset = fbb.writeString(object.mobile);
          final designationOffset = fbb.writeString(object.designation);
          final immediateParentOffset = fbb.writeString(object.immediateParent);
          final locationHierarchyOffset =
              fbb.writeString(object.locationHierarchy);
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userAccountIdOffset);
          fbb.addOffset(2, loginIdOffset);
          fbb.addOffset(3, mobileOffset);
          fbb.addOffset(4, designationOffset);
          fbb.addOffset(5, immediateParentOffset);
          fbb.addOffset(6, locationHierarchyOffset);
          fbb.addOffset(7, nameOffset);
          fbb.addOffset(8, emailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final immediateParentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final designationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final locationHierarchyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final userAccountIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final object = UserInfo(
              id: idParam,
              name: nameParam,
              immediateParent: immediateParentParam,
              loginId: loginIdParam,
              designation: designationParam,
              locationHierarchy: locationHierarchyParam,
              mobile: mobileParam,
              userAccountId: userAccountIdParam,
              email: emailParam);

          return object;
        }),
    UserV1: obx_int.EntityDefinition<UserV1>(
        model: _entities[64],
        toOneRelations: (UserV1 object) => [],
        toManyRelations: (UserV1 object) => {},
        getId: (UserV1 object) => object.id,
        setId: (UserV1 object, int id) {
          object.id = id;
        },
        objectToFB: (UserV1 object, fb.Builder fbb) {
          final lobOffset = fbb.writeString(object.lob);
          final userAccountIdOffset = fbb.writeString(object.userAccountId);
          final loginIdOffset = fbb.writeString(object.loginId);
          final mobileOffset = fbb.writeString(object.mobile);
          final designationOffset = fbb.writeString(object.designation);
          final immediateParentOffset = fbb.writeString(object.immediateParent);
          final locationHierarchyOffset =
              fbb.writeString(object.locationHierarchy);
          final nameOffset = fbb.writeString(object.name);
          final dialCodeOffset = fbb.writeString(object.dialCode);
          final verifiedOffset = fbb.writeString(object.verified);
          final emailOffset = fbb.writeString(object.email);
          final addressOffset = fbb.writeString(object.address);
          final statusOffset = fbb.writeString(object.status);
          final orderSeqNumV1Offset = object.orderSeqNumV1 == null
              ? null
              : fbb.writeString(object.orderSeqNumV1!);
          final salesRepIdOffset = fbb.writeString(object.salesRepId);
          final rolesOffset = fbb.writeList(
              object.roles.map(fbb.writeString).toList(growable: false));
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, lobOffset);
          fbb.addOffset(2, userAccountIdOffset);
          fbb.addOffset(3, loginIdOffset);
          fbb.addOffset(4, mobileOffset);
          fbb.addOffset(5, designationOffset);
          fbb.addOffset(6, immediateParentOffset);
          fbb.addOffset(7, locationHierarchyOffset);
          fbb.addOffset(8, nameOffset);
          fbb.addOffset(9, dialCodeOffset);
          fbb.addOffset(10, verifiedOffset);
          fbb.addOffset(11, emailOffset);
          fbb.addOffset(12, addressOffset);
          fbb.addOffset(13, statusOffset);
          fbb.addOffset(14, orderSeqNumV1Offset);
          fbb.addOffset(15, salesRepIdOffset);
          fbb.addOffset(16, rolesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final immediateParentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final loginIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final designationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final lobParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final locationHierarchyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final verifiedParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final dialCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final userAccountIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final orderSeqNumV1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final salesRepIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final rolesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 36, []);
          final object = UserV1(
              id: idParam,
              name: nameParam,
              immediateParent: immediateParentParam,
              loginId: loginIdParam,
              designation: designationParam,
              lob: lobParam,
              locationHierarchy: locationHierarchyParam,
              mobile: mobileParam,
              verified: verifiedParam,
              dialCode: dialCodeParam,
              userAccountId: userAccountIdParam,
              email: emailParam,
              address: addressParam,
              status: statusParam,
              orderSeqNumV1: orderSeqNumV1Param,
              salesRepId: salesRepIdParam,
              roles: rolesParam);

          return object;
        }),
    WorkWithSurveyTask: obx_int.EntityDefinition<WorkWithSurveyTask>(
        model: _entities[65],
        toOneRelations: (WorkWithSurveyTask object) => [],
        toManyRelations: (WorkWithSurveyTask object) => {},
        getId: (WorkWithSurveyTask object) => object.id,
        setId: (WorkWithSurveyTask object, int id) {
          object.id = id;
        },
        objectToFB: (WorkWithSurveyTask object, fb.Builder fbb) {
          final taskDescriptionOffset = fbb.writeString(object.taskDescription);
          final taskStatusOffset = fbb.writeString(object.taskStatus);
          final outletCodeOffset = fbb.writeString(object.outletCode);
          final taskIdOffset = fbb.writeString(object.taskId);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskDescriptionOffset);
          fbb.addOffset(2, taskStatusOffset);
          fbb.addOffset(3, outletCodeOffset);
          fbb.addOffset(4, taskIdOffset);
          fbb.addBool(5, object.enabled);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final taskDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final taskStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final outletCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final taskIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final enabledParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = WorkWithSurveyTask(
              id: idParam,
              taskDescription: taskDescriptionParam,
              taskStatus: taskStatusParam,
              outletCode: outletCodeParam,
              taskId: taskIdParam,
              enabled: enabledParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AdditionalMobileNumber] entity fields to define ObjectBox queries.
class AdditionalMobileNumber_ {
  /// See [AdditionalMobileNumber.id].
  static final id = obx.QueryIntegerProperty<AdditionalMobileNumber>(
      _entities[0].properties[0]);

  /// See [AdditionalMobileNumber.mobileNumber].
  static final mobileNumber = obx.QueryStringProperty<AdditionalMobileNumber>(
      _entities[0].properties[1]);

  /// See [AdditionalMobileNumber.uid].
  static final uid = obx.QueryStringProperty<AdditionalMobileNumber>(
      _entities[0].properties[2]);
}

/// [ApplicationDataV1] entity fields to define ObjectBox queries.
class ApplicationDataV1_ {
  /// See [ApplicationDataV1.id].
  static final id =
      obx.QueryIntegerProperty<ApplicationDataV1>(_entities[1].properties[0]);

  /// See [ApplicationDataV1.name].
  static final name =
      obx.QueryStringProperty<ApplicationDataV1>(_entities[1].properties[1]);

  /// See [ApplicationDataV1.value].
  static final value =
      obx.QueryStringProperty<ApplicationDataV1>(_entities[1].properties[2]);
}

/// [AttendanceModelV1] entity fields to define ObjectBox queries.
class AttendanceModelV1_ {
  /// See [AttendanceModelV1.id].
  static final id =
      obx.QueryIntegerProperty<AttendanceModelV1>(_entities[2].properties[0]);

  /// See [AttendanceModelV1.loginId].
  static final loginId =
      obx.QueryStringProperty<AttendanceModelV1>(_entities[2].properties[1]);

  /// See [AttendanceModelV1.date].
  static final date =
      obx.QueryStringProperty<AttendanceModelV1>(_entities[2].properties[2]);

  /// See [AttendanceModelV1.attendanceType].
  static final attendanceType =
      obx.QueryStringProperty<AttendanceModelV1>(_entities[2].properties[3]);

  /// See [AttendanceModelV1.description].
  static final description =
      obx.QueryStringProperty<AttendanceModelV1>(_entities[2].properties[4]);

  /// See [AttendanceModelV1.extendedAttributes].
  static final extendedAttributes =
      obx.QueryStringProperty<AttendanceModelV1>(_entities[2].properties[5]);

  /// See [AttendanceModelV1.status].
  static final status =
      obx.QueryStringProperty<AttendanceModelV1>(_entities[2].properties[6]);
}

/// [BackInStock] entity fields to define ObjectBox queries.
class BackInStock_ {
  /// See [BackInStock.id].
  static final id =
      obx.QueryIntegerProperty<BackInStock>(_entities[3].properties[0]);

  /// See [BackInStock.skuCode].
  static final skuCode =
      obx.QueryStringProperty<BackInStock>(_entities[3].properties[1]);

  /// See [BackInStock.productPurchased].
  static final productPurchased =
      obx.QueryBooleanProperty<BackInStock>(_entities[3].properties[2]);

  /// See [BackInStock.date].
  static final date =
      obx.QueryStringProperty<BackInStock>(_entities[3].properties[3]);
}

/// [BandedPricingV1] entity fields to define ObjectBox queries.
class BandedPricingV1_ {
  /// See [BandedPricingV1.id].
  static final id =
      obx.QueryIntegerProperty<BandedPricingV1>(_entities[4].properties[0]);

  /// See [BandedPricingV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<BandedPricingV1>(_entities[4].properties[1]);

  /// See [BandedPricingV1.bandedGroupId].
  static final bandedGroupId =
      obx.QueryStringProperty<BandedPricingV1>(_entities[4].properties[2]);

  /// See [BandedPricingV1.yd00].
  static final yd00 =
      obx.QueryStringProperty<BandedPricingV1>(_entities[4].properties[3]);

  /// See [BandedPricingV1.yd01].
  static final yd01 =
      obx.QueryStringProperty<BandedPricingV1>(_entities[4].properties[4]);

  /// See [BandedPricingV1.yd02].
  static final yd02 =
      obx.QueryStringProperty<BandedPricingV1>(_entities[4].properties[5]);

  /// See [BandedPricingV1.yt01].
  static final yt01 =
      obx.QueryStringProperty<BandedPricingV1>(_entities[4].properties[6]);
}

/// [BannerV1] entity fields to define ObjectBox queries.
class BannerV1_ {
  /// See [BannerV1.id].
  static final id =
      obx.QueryIntegerProperty<BannerV1>(_entities[5].properties[0]);

  /// See [BannerV1.bannerName].
  static final bannerName =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[1]);

  /// See [BannerV1.bannerDesc].
  static final bannerDesc =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[2]);

  /// See [BannerV1.bannerId].
  static final bannerId =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[3]);

  /// See [BannerV1.bannerSequence].
  static final bannerSequence =
      obx.QueryIntegerProperty<BannerV1>(_entities[5].properties[4]);

  /// See [BannerV1.bannerType].
  static final bannerType =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[5]);

  /// See [BannerV1.bannerTemplate].
  static final bannerTemplate =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[6]);

  /// See [BannerV1.mediaUrl].
  static final mediaUrl =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[7]);

  /// See [BannerV1.mediaName].
  static final mediaName =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[8]);

  /// See [BannerV1.fileName].
  static final fileName =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[9]);

  /// See [BannerV1.blobKey].
  static final blobKey =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[10]);

  /// See [BannerV1.batchCode].
  static final batchCode =
      obx.QueryStringVectorProperty<BannerV1>(_entities[5].properties[11]);

  /// See [BannerV1.elementComponents].
  static final elementComponents =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[12]);

  /// See [BannerV1.bankName].
  static final bankName =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[13]);

  /// See [BannerV1.lastModifiedTime].
  static final lastModifiedTime =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[14]);

  /// See [BannerV1.bannerParentId].
  static final bannerParentId =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[15]);

  /// See [BannerV1.extendedAttributesV2].
  static final extendedAttributesV2 =
      obx.QueryStringProperty<BannerV1>(_entities[5].properties[16]);

  /// See [BannerV1.bannerPriority].
  static final bannerPriority =
      obx.QueryIntegerProperty<BannerV1>(_entities[5].properties[17]);
}

/// [CartV1] entity fields to define ObjectBox queries.
class CartV1_ {
  /// See [CartV1.id].
  static final id =
      obx.QueryIntegerProperty<CartV1>(_entities[6].properties[0]);

  /// See [CartV1.lastModified].
  static final lastModified =
      obx.QueryDateProperty<CartV1>(_entities[6].properties[1]);

  /// See [CartV1.manufacturingDateV1].
  static final manufacturingDateV1 =
      obx.QueryDateProperty<CartV1>(_entities[6].properties[2]);

  /// See [CartV1.refId].
  static final refId =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[3]);

  /// See [CartV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[4]);

  /// See [CartV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[5]);

  /// See [CartV1.pieceQuantity].
  static final pieceQuantity =
      obx.QueryIntegerProperty<CartV1>(_entities[6].properties[6]);

  /// See [CartV1.caseQuantity].
  static final caseQuantity =
      obx.QueryIntegerProperty<CartV1>(_entities[6].properties[7]);

  /// See [CartV1.otherUnitQuantity].
  static final otherUnitQuantity =
      obx.QueryIntegerProperty<CartV1>(_entities[6].properties[8]);

  /// See [CartV1.qtyUnit].
  static final qtyUnit =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[9]);

  /// See [CartV1.amount].
  static final amount =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[10]);

  /// See [CartV1.price].
  static final price =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[11]);

  /// See [CartV1.margin].
  static final margin =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[12]);

  /// See [CartV1.netPtr].
  static final netPtr =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[13]);

  /// See [CartV1.maxDiscount].
  static final maxDiscount =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[14]);

  /// See [CartV1.volume].
  static final volume =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[15]);

  /// See [CartV1.savings].
  static final savings =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[16]);

  /// See [CartV1.skuDesc].
  static final skuDesc =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[17]);

  /// See [CartV1.visitedOffers].
  static final visitedOffers =
      obx.QueryStringVectorProperty<CartV1>(_entities[6].properties[18]);

  /// See [CartV1.supplier].
  static final supplier =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[19]);

  /// See [CartV1.itemDescV1].
  static final itemDescV1 =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[20]);

  /// See [CartV1.stockQtyV1].
  static final stockQtyV1 =
      obx.QueryIntegerProperty<CartV1>(_entities[6].properties[21]);

  /// See [CartV1.typeV1].
  static final typeV1 =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[22]);

  /// See [CartV1.buttonDescriptionV1].
  static final buttonDescriptionV1 =
      obx.QueryStringProperty<CartV1>(_entities[6].properties[23]);

  /// See [CartV1.creditQty].
  static final creditQty =
      obx.QueryIntegerProperty<CartV1>(_entities[6].properties[24]);

  /// See [CartV1.ssp].
  static final ssp =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[25]);

  /// See [CartV1.discountMargin].
  static final discountMargin =
      obx.QueryDoubleProperty<CartV1>(_entities[6].properties[26]);
}

/// [CatalogueV1] entity fields to define ObjectBox queries.
class CatalogueV1_ {
  /// See [CatalogueV1.id].
  static final id =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[0]);

  /// See [CatalogueV1.lastModified].
  static final lastModified =
      obx.QueryDateProperty<CatalogueV1>(_entities[7].properties[1]);

  /// See [CatalogueV1.manufacturingDateV1].
  static final manufacturingDateV1 =
      obx.QueryDateProperty<CatalogueV1>(_entities[7].properties[2]);

  /// See [CatalogueV1.name].
  static final name =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[3]);

  /// See [CatalogueV1.description].
  static final description =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[4]);

  /// See [CatalogueV1.productDescription].
  static final productDescription =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[5]);

  /// See [CatalogueV1.suggestedQty].
  static final suggestedQty =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[6]);

  /// See [CatalogueV1.suggestedCaseQty].
  static final suggestedCaseQty =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[7]);

  /// See [CatalogueV1.case2Piece].
  static final case2Piece =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[8]);

  /// See [CatalogueV1.images].
  static final images =
      obx.QueryStringVectorProperty<CatalogueV1>(_entities[7].properties[9]);

  /// See [CatalogueV1.category].
  static final category =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[10]);

  /// See [CatalogueV1.subCategory].
  static final subCategory =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[11]);

  /// See [CatalogueV1.brand].
  static final brand =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[12]);

  /// See [CatalogueV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[13]);

  /// See [CatalogueV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[14]);

  /// See [CatalogueV1.priority].
  static final priority =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[15]);

  /// See [CatalogueV1.pieceSize].
  static final pieceSize =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[16]);

  /// See [CatalogueV1.pieceSizeDesc].
  static final pieceSizeDesc =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[17]);

  /// See [CatalogueV1.suggestionText].
  static final suggestionText =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[18]);

  /// See [CatalogueV1.productTag].
  static final productTag =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[19]);

  /// See [CatalogueV1.itemClass].
  static final itemClass =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[20]);

  /// See [CatalogueV1.packPtr].
  static final packPtr =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[21]);

  /// See [CatalogueV1.casePtr].
  static final casePtr =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[22]);

  /// See [CatalogueV1.basePackPtrV1].
  static final basePackPtrV1 =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[23]);

  /// See [CatalogueV1.baseCasePtrV1].
  static final baseCasePtrV1 =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[24]);

  /// See [CatalogueV1.packMrp].
  static final packMrp =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[25]);

  /// See [CatalogueV1.mrp].
  static final mrp =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[26]);

  /// See [CatalogueV1.caseMrp].
  static final caseMrp =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[27]);

  /// See [CatalogueV1.feature].
  static final feature =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[28]);

  /// See [CatalogueV1.sellingStory].
  static final sellingStory =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[29]);

  /// See [CatalogueV1.subCategoryCode].
  static final subCategoryCode =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[30]);

  /// See [CatalogueV1.recommendationPriority].
  static final recommendationPriority =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[31]);

  /// See [CatalogueV1.customLevel].
  static final customLevel =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[32]);

  /// See [CatalogueV1.level].
  static final level =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[33]);

  /// See [CatalogueV1.searchIndex].
  static final searchIndex =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[34]);

  /// See [CatalogueV1.isFavourite].
  static final isFavourite =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[35]);

  /// See [CatalogueV1.recommendationType].
  static final recommendationType =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[36]);

  /// See [CatalogueV1.isRecommended].
  static final isRecommended =
      obx.QueryBooleanProperty<CatalogueV1>(_entities[7].properties[37]);

  /// See [CatalogueV1.offers].
  static final offers =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[38]);

  /// See [CatalogueV1.supplier].
  static final supplier =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[39]);

  /// See [CatalogueV1.tax].
  static final tax =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[40]);

  /// See [CatalogueV1.marketSkuCode].
  static final marketSkuCode =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[41]);

  /// See [CatalogueV1.otherUnitMrp].
  static final otherUnitMrp =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[42]);

  /// See [CatalogueV1.otherUnitToPieceQuantity].
  static final otherUnitToPieceQuantity =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[43]);

  /// See [CatalogueV1.pieceToOtherUnitQuantity].
  static final pieceToOtherUnitQuantity =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[44]);

  /// See [CatalogueV1.otherUnitPtr].
  static final otherUnitPtr =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[45]);

  /// See [CatalogueV1.additionalSchemeDescription].
  static final additionalSchemeDescription =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[46]);

  /// See [CatalogueV1.otherUnitName].
  static final otherUnitName =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[47]);

  /// See [CatalogueV1.smartBuy].
  static final smartBuy =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[48]);

  /// See [CatalogueV1.stockQty].
  static final stockQty =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[49]);

  /// See [CatalogueV1.groupIdV1].
  static final groupIdV1 =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[50]);

  /// See [CatalogueV1.recommendedAttributesV2].
  static final recommendedAttributesV2 =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[51]);

  /// See [CatalogueV1.maxBenefitStringV1].
  static final maxBenefitStringV1 =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[52]);

  /// See [CatalogueV1.itemDescV1].
  static final itemDescV1 =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[53]);

  /// See [CatalogueV1.uomV1].
  static final uomV1 =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[54]);

  /// See [CatalogueV1.buttonDescriptionV1].
  static final buttonDescriptionV1 =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[55]);

  /// See [CatalogueV1.pointsV1].
  static final pointsV1 =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[56]);

  /// See [CatalogueV1.typeV1].
  static final typeV1 =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[57]);

  /// See [CatalogueV1.bandedMaxQuantityV1].
  static final bandedMaxQuantityV1 =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[58]);

  /// See [CatalogueV1.minQtyForEarnPoints].
  static final minQtyForEarnPoints =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[59]);

  /// See [CatalogueV1.recommendationId].
  static final recommendationId =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[60]);

  /// See [CatalogueV1.translation].
  static final translation =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[61]);

  /// See [CatalogueV1.incentivePoints].
  static final incentivePoints =
      obx.QueryIntegerProperty<CatalogueV1>(_entities[7].properties[62]);

  /// See [CatalogueV1.productCode].
  static final productCode =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[63]);

  /// See [CatalogueV1.srp].
  static final srp =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[64]);

  /// See [CatalogueV1.returnCode].
  static final returnCode =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[65]);

  /// See [CatalogueV1.discountMargin].
  static final discountMargin =
      obx.QueryDoubleProperty<CatalogueV1>(_entities[7].properties[66]);

  /// See [CatalogueV1.outOfStock].
  static final outOfStock =
      obx.QueryBooleanProperty<CatalogueV1>(_entities[7].properties[67]);

  /// See [CatalogueV1.isNotify].
  static final isNotify =
      obx.QueryBooleanProperty<CatalogueV1>(_entities[7].properties[68]);

  /// See [CatalogueV1.secondaryProductTag].
  static final secondaryProductTag =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[69]);

  /// See [CatalogueV1.eb2bCode].
  static final eb2bCode =
      obx.QueryStringProperty<CatalogueV1>(_entities[7].properties[70]);
}

/// [ConfigurationV1] entity fields to define ObjectBox queries.
class ConfigurationV1_ {
  /// See [ConfigurationV1.id].
  static final id =
      obx.QueryIntegerProperty<ConfigurationV1>(_entities[8].properties[0]);

  /// See [ConfigurationV1.name].
  static final name =
      obx.QueryStringProperty<ConfigurationV1>(_entities[8].properties[1]);

  /// See [ConfigurationV1.value].
  static final value =
      obx.QueryStringProperty<ConfigurationV1>(_entities[8].properties[2]);

  /// See [ConfigurationV1.role].
  static final role =
      obx.QueryStringProperty<ConfigurationV1>(_entities[8].properties[3]);

  /// See [ConfigurationV1.feature].
  static final feature =
      obx.QueryStringProperty<ConfigurationV1>(_entities[8].properties[4]);

  /// See [ConfigurationV1.domainType].
  static final domainType =
      obx.QueryStringProperty<ConfigurationV1>(_entities[8].properties[5]);
}

/// [ConsumerCatalogV1] entity fields to define ObjectBox queries.
class ConsumerCatalogV1_ {
  /// See [ConsumerCatalogV1.id].
  static final id =
      obx.QueryIntegerProperty<ConsumerCatalogV1>(_entities[9].properties[0]);

  /// See [ConsumerCatalogV1.skuOrdered].
  static final skuOrdered =
      obx.QueryStringProperty<ConsumerCatalogV1>(_entities[9].properties[1]);

  /// See [ConsumerCatalogV1.skuSelected].
  static final skuSelected =
      obx.QueryStringProperty<ConsumerCatalogV1>(_entities[9].properties[2]);
}

/// [Coupons] entity fields to define ObjectBox queries.
class Coupons_ {
  /// See [Coupons.id].
  static final id =
      obx.QueryIntegerProperty<Coupons>(_entities[10].properties[0]);

  /// See [Coupons.discountId].
  static final discountId =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[1]);

  /// See [Coupons.batchCode].
  static final batchCode =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[2]);

  /// See [Coupons.priority].
  static final priority =
      obx.QueryIntegerProperty<Coupons>(_entities[10].properties[3]);

  /// See [Coupons.schemeDescription].
  static final schemeDescription =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[4]);

  /// See [Coupons.supplier].
  static final supplier =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[5]);

  /// See [Coupons.startDate].
  static final startDate =
      obx.QueryIntegerProperty<Coupons>(_entities[10].properties[6]);

  /// See [Coupons.endDate].
  static final endDate =
      obx.QueryIntegerProperty<Coupons>(_entities[10].properties[7]);

  /// See [Coupons.type].
  static final type =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[8]);

  /// See [Coupons.criteria].
  static final criteria =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[9]);

  /// See [Coupons.maxBudget].
  static final maxBudget =
      obx.QueryDoubleProperty<Coupons>(_entities[10].properties[10]);

  /// See [Coupons.maxTerm].
  static final maxTerm =
      obx.QueryDoubleProperty<Coupons>(_entities[10].properties[11]);

  /// See [Coupons.programLevel].
  static final programLevel =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[12]);

  /// See [Coupons.mustBuyQty].
  static final mustBuyQty =
      obx.QueryIntegerProperty<Coupons>(_entities[10].properties[13]);

  /// See [Coupons.discountedBatchCode].
  static final discountedBatchCode =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[14]);

  /// See [Coupons.programNumber].
  static final programNumber =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[15]);

  /// See [Coupons.slabsInfo].
  static final slabsInfo =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[16]);

  /// See [Coupons.minMaxCond].
  static final minMaxCond =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[17]);

  /// See [Coupons.overNAbove].
  static final overNAbove =
      obx.QueryBooleanProperty<Coupons>(_entities[10].properties[18]);

  /// See [Coupons.mustBuyAttributes].
  static final mustBuyAttributes =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[19]);

  /// See [Coupons.channel].
  static final channel =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[20]);

  /// See [Coupons.distributionChannel].
  static final distributionChannel =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[21]);

  /// See [Coupons.subChannel].
  static final subChannel =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[22]);

  /// See [Coupons.outletType].
  static final outletType =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[23]);

  /// See [Coupons.outletCategory].
  static final outletCategory =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[24]);

  /// See [Coupons.outletDivision].
  static final outletDivision =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[25]);

  /// See [Coupons.outletClass].
  static final outletClass =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[26]);

  /// See [Coupons.outletCode].
  static final outletCode =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[27]);

  /// See [Coupons.marketId].
  static final marketId =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[28]);

  /// See [Coupons.marketName].
  static final marketName =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[29]);

  /// See [Coupons.bannerBlob].
  static final bannerBlob =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[30]);

  /// See [Coupons.bannerPriority].
  static final bannerPriority =
      obx.QueryIntegerProperty<Coupons>(_entities[10].properties[31]);

  /// See [Coupons.loginId].
  static final loginId =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[32]);

  /// See [Coupons.color].
  static final color =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[33]);

  /// See [Coupons.outletExclusionKey].
  static final outletExclusionKey =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[34]);

  /// See [Coupons.outletExclusionValues].
  static final outletExclusionValues =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[35]);

  /// See [Coupons.itemEach].
  static final itemEach =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[36]);

  /// See [Coupons.extendedAttributes].
  static final extendedAttributes =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[37]);

  /// See [Coupons.activeStatus].
  static final activeStatus =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[38]);

  /// See [Coupons.skuCode].
  static final skuCode =
      obx.QueryStringProperty<Coupons>(_entities[10].properties[39]);
}

/// [CreditModel] entity fields to define ObjectBox queries.
class CreditModel_ {
  /// See [CreditModel.id].
  static final id =
      obx.QueryIntegerProperty<CreditModel>(_entities[11].properties[0]);

  /// See [CreditModel.outletCode].
  static final outletCode =
      obx.QueryStringProperty<CreditModel>(_entities[11].properties[1]);

  /// See [CreditModel.creditAmount].
  static final creditAmount =
      obx.QueryDoubleProperty<CreditModel>(_entities[11].properties[2]);

  /// See [CreditModel.creditAvailable].
  static final creditAvailable =
      obx.QueryDoubleProperty<CreditModel>(_entities[11].properties[3]);

  /// See [CreditModel.creditStatus].
  static final creditStatus =
      obx.QueryStringProperty<CreditModel>(_entities[11].properties[4]);
}

/// [DataSyncV1] entity fields to define ObjectBox queries.
class DataSyncV1_ {
  /// See [DataSyncV1.id].
  static final id =
      obx.QueryIntegerProperty<DataSyncV1>(_entities[12].properties[0]);

  /// See [DataSyncV1.name].
  static final name =
      obx.QueryStringProperty<DataSyncV1>(_entities[12].properties[1]);

  /// See [DataSyncV1.description].
  static final description =
      obx.QueryStringProperty<DataSyncV1>(_entities[12].properties[2]);

  /// See [DataSyncV1.startTime].
  static final startTime =
      obx.QueryDateProperty<DataSyncV1>(_entities[12].properties[3]);

  /// See [DataSyncV1.endTime].
  static final endTime =
      obx.QueryDateProperty<DataSyncV1>(_entities[12].properties[4]);

  /// See [DataSyncV1.status].
  static final status =
      obx.QueryStringProperty<DataSyncV1>(_entities[12].properties[5]);

  /// See [DataSyncV1.syncType].
  static final syncType =
      obx.QueryStringProperty<DataSyncV1>(_entities[12].properties[6]);

  /// See [DataSyncV1.size].
  static final size =
      obx.QueryDoubleProperty<DataSyncV1>(_entities[12].properties[7]);

  /// See [DataSyncV1.records].
  static final records =
      obx.QueryDoubleProperty<DataSyncV1>(_entities[12].properties[8]);

  /// See [DataSyncV1.syncTime].
  static final syncTime =
      obx.QueryIntegerProperty<DataSyncV1>(_entities[12].properties[9]);

  /// See [DataSyncV1.expiryTime].
  static final expiryTime =
      obx.QueryDateProperty<DataSyncV1>(_entities[12].properties[10]);
}

/// [DeliveryPjpV1] entity fields to define ObjectBox queries.
class DeliveryPjpV1_ {
  /// See [DeliveryPjpV1.id].
  static final id =
      obx.QueryIntegerProperty<DeliveryPjpV1>(_entities[13].properties[0]);

  /// See [DeliveryPjpV1.pjpDate].
  static final pjpDate =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[1]);

  /// See [DeliveryPjpV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[2]);

  /// See [DeliveryPjpV1.deliveryPjpDateList].
  static final deliveryPjpDateList =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[3]);

  /// See [DeliveryPjpV1.month].
  static final month =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[4]);

  /// See [DeliveryPjpV1.year].
  static final year =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[5]);

  /// See [DeliveryPjpV1.expiryTime].
  static final expiryTime =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[6]);

  /// See [DeliveryPjpV1.deliveryDate].
  static final deliveryDate =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[7]);

  /// See [DeliveryPjpV1.shippingAddressList].
  static final shippingAddressList =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[8]);

  /// See [DeliveryPjpV1.type].
  static final type =
      obx.QueryStringProperty<DeliveryPjpV1>(_entities[13].properties[9]);
}

/// [DynamicPricingV1] entity fields to define ObjectBox queries.
class DynamicPricingV1_ {
  /// See [DynamicPricingV1.id].
  static final id =
      obx.QueryIntegerProperty<DynamicPricingV1>(_entities[14].properties[0]);

  /// See [DynamicPricingV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<DynamicPricingV1>(_entities[14].properties[1]);

  /// See [DynamicPricingV1.ysur].
  static final ysur =
      obx.QueryStringProperty<DynamicPricingV1>(_entities[14].properties[2]);

  /// See [DynamicPricingV1.ypp0].
  static final ypp0 =
      obx.QueryStringProperty<DynamicPricingV1>(_entities[14].properties[3]);

  /// See [DynamicPricingV1.ytdn].
  static final ytdn =
      obx.QueryStringProperty<DynamicPricingV1>(_entities[14].properties[4]);

  /// See [DynamicPricingV1.ytdr].
  static final ytdr =
      obx.QueryStringProperty<DynamicPricingV1>(_entities[14].properties[5]);

  /// See [DynamicPricingV1.yrrd].
  static final yrrd =
      obx.QueryStringProperty<DynamicPricingV1>(_entities[14].properties[6]);

  /// See [DynamicPricingV1.yelp].
  static final yelp =
      obx.QueryStringProperty<DynamicPricingV1>(_entities[14].properties[7]);
}

/// [FaqV1] entity fields to define ObjectBox queries.
class FaqV1_ {
  /// See [FaqV1.id].
  static final id =
      obx.QueryIntegerProperty<FaqV1>(_entities[15].properties[0]);

  /// See [FaqV1.question].
  static final question =
      obx.QueryStringProperty<FaqV1>(_entities[15].properties[1]);

  /// See [FaqV1.answer].
  static final answer =
      obx.QueryStringProperty<FaqV1>(_entities[15].properties[2]);
}

/// [Incentive] entity fields to define ObjectBox queries.
class Incentive_ {
  /// See [Incentive.id].
  static final id =
      obx.QueryIntegerProperty<Incentive>(_entities[16].properties[0]);

  /// See [Incentive.outletCode].
  static final outletCode =
      obx.QueryStringProperty<Incentive>(_entities[16].properties[1]);

  /// See [Incentive.type].
  static final type =
      obx.QueryStringProperty<Incentive>(_entities[16].properties[2]);

  /// See [Incentive.typeCode].
  static final typeCode =
      obx.QueryStringProperty<Incentive>(_entities[16].properties[3]);

  /// See [Incentive.potentialPoints].
  static final potentialPoints =
      obx.QueryIntegerProperty<Incentive>(_entities[16].properties[4]);

  /// See [Incentive.earnedPoints].
  static final earnedPoints =
      obx.QueryIntegerProperty<Incentive>(_entities[16].properties[5]);

  /// See [Incentive.availablePoints].
  static final availablePoints =
      obx.QueryIntegerProperty<Incentive>(_entities[16].properties[6]);
}

/// [IntentInfoV1] entity fields to define ObjectBox queries.
class IntentInfoV1_ {
  /// See [IntentInfoV1.id].
  static final id =
      obx.QueryIntegerProperty<IntentInfoV1>(_entities[17].properties[0]);

  /// See [IntentInfoV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<IntentInfoV1>(_entities[17].properties[1]);

  /// See [IntentInfoV1.intent].
  static final intent =
      obx.QueryStringProperty<IntentInfoV1>(_entities[17].properties[2]);

  /// See [IntentInfoV1.suggestions].
  static final suggestions =
      obx.QueryStringProperty<IntentInfoV1>(_entities[17].properties[3]);

  /// See [IntentInfoV1.template].
  static final template =
      obx.QueryStringProperty<IntentInfoV1>(_entities[17].properties[4]);

  /// See [IntentInfoV1.data].
  static final data =
      obx.QueryStringProperty<IntentInfoV1>(_entities[17].properties[5]);

  /// See [IntentInfoV1.templateAttributes].
  static final templateAttributes =
      obx.QueryStringProperty<IntentInfoV1>(_entities[17].properties[6]);

  /// See [IntentInfoV1.queryName].
  static final queryName =
      obx.QueryStringProperty<IntentInfoV1>(_entities[17].properties[7]);
}

/// [InventoryModelV1] entity fields to define ObjectBox queries.
class InventoryModelV1_ {
  /// See [InventoryModelV1.id].
  static final id =
      obx.QueryIntegerProperty<InventoryModelV1>(_entities[18].properties[0]);

  /// See [InventoryModelV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[1]);

  /// See [InventoryModelV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[2]);

  /// See [InventoryModelV1.index].
  static final index =
      obx.QueryIntegerProperty<InventoryModelV1>(_entities[18].properties[3]);

  /// See [InventoryModelV1.csQty].
  static final csQty =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[4]);

  /// See [InventoryModelV1.pcQty].
  static final pcQty =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[5]);

  /// See [InventoryModelV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[6]);

  /// See [InventoryModelV1.expiryDateV1].
  static final expiryDateV1 =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[7]);

  /// See [InventoryModelV1.remainingShelfLifeV1].
  static final remainingShelfLifeV1 =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[8]);

  /// See [InventoryModelV1.mrpV1].
  static final mrpV1 =
      obx.QueryStringProperty<InventoryModelV1>(_entities[18].properties[9]);
}

/// [InventoryStatus] entity fields to define ObjectBox queries.
class InventoryStatus_ {
  /// See [InventoryStatus.id].
  static final id =
      obx.QueryIntegerProperty<InventoryStatus>(_entities[19].properties[0]);

  /// See [InventoryStatus.skuCode].
  static final skuCode =
      obx.QueryStringProperty<InventoryStatus>(_entities[19].properties[1]);

  /// See [InventoryStatus.outletCode].
  static final outletCode =
      obx.QueryStringProperty<InventoryStatus>(_entities[19].properties[2]);

  /// See [InventoryStatus.lastInvDate].
  static final lastInvDate =
      obx.QueryStringProperty<InventoryStatus>(_entities[19].properties[3]);

  /// See [InventoryStatus.lastInvQty].
  static final lastInvQty =
      obx.QueryStringProperty<InventoryStatus>(_entities[19].properties[4]);
}

/// [KibanaLog] entity fields to define ObjectBox queries.
class KibanaLog_ {
  /// See [KibanaLog.id].
  static final id =
      obx.QueryIntegerProperty<KibanaLog>(_entities[20].properties[0]);

  /// See [KibanaLog.uid].
  static final uid =
      obx.QueryStringProperty<KibanaLog>(_entities[20].properties[1]);

  /// See [KibanaLog.loginid].
  static final loginid =
      obx.QueryStringProperty<KibanaLog>(_entities[20].properties[2]);

  /// See [KibanaLog.error].
  static final error =
      obx.QueryStringProperty<KibanaLog>(_entities[20].properties[3]);

  /// See [KibanaLog.stacktrace].
  static final stacktrace =
      obx.QueryStringProperty<KibanaLog>(_entities[20].properties[4]);

  /// See [KibanaLog.message].
  static final message =
      obx.QueryStringProperty<KibanaLog>(_entities[20].properties[5]);

  /// See [KibanaLog.severity].
  static final severity =
      obx.QueryStringProperty<KibanaLog>(_entities[20].properties[6]);

  /// See [KibanaLog.feature].
  static final feature =
      obx.QueryStringProperty<KibanaLog>(_entities[20].properties[7]);

  /// See [KibanaLog.timestamp].
  static final timestamp =
      obx.QueryDateProperty<KibanaLog>(_entities[20].properties[8]);
}

/// [KpiV1] entity fields to define ObjectBox queries.
class KpiV1_ {
  /// See [KpiV1.id].
  static final id =
      obx.QueryIntegerProperty<KpiV1>(_entities[21].properties[0]);

  /// See [KpiV1.kpiName].
  static final kpiName =
      obx.QueryStringProperty<KpiV1>(_entities[21].properties[1]);

  /// See [KpiV1.data].
  static final data =
      obx.QueryStringProperty<KpiV1>(_entities[21].properties[2]);

  /// See [KpiV1.userId].
  static final userId =
      obx.QueryStringProperty<KpiV1>(_entities[21].properties[3]);

  /// See [KpiV1.userDesignation].
  static final userDesignation =
      obx.QueryStringProperty<KpiV1>(_entities[21].properties[4]);

  /// See [KpiV1.refKey].
  static final refKey =
      obx.QueryStringProperty<KpiV1>(_entities[21].properties[5]);
}

/// [LeaderboardIncentiveModel] entity fields to define ObjectBox queries.
class LeaderboardIncentiveModel_ {
  /// See [LeaderboardIncentiveModel.id].
  static final id = obx.QueryIntegerProperty<LeaderboardIncentiveModel>(
      _entities[22].properties[0]);

  /// See [LeaderboardIncentiveModel.loginId].
  static final loginId = obx.QueryStringProperty<LeaderboardIncentiveModel>(
      _entities[22].properties[1]);

  /// See [LeaderboardIncentiveModel.name].
  static final name = obx.QueryStringProperty<LeaderboardIncentiveModel>(
      _entities[22].properties[2]);

  /// See [LeaderboardIncentiveModel.previousRank].
  static final previousRank =
      obx.QueryIntegerProperty<LeaderboardIncentiveModel>(
          _entities[22].properties[3]);

  /// See [LeaderboardIncentiveModel.currentRank].
  static final currentRank =
      obx.QueryIntegerProperty<LeaderboardIncentiveModel>(
          _entities[22].properties[4]);

  /// See [LeaderboardIncentiveModel.potentialPoints].
  static final potentialPoints =
      obx.QueryDoubleProperty<LeaderboardIncentiveModel>(
          _entities[22].properties[5]);

  /// See [LeaderboardIncentiveModel.earnedPoints].
  static final earnedPoints =
      obx.QueryDoubleProperty<LeaderboardIncentiveModel>(
          _entities[22].properties[6]);
}

/// [LocateMeV1] entity fields to define ObjectBox queries.
class LocateMeV1_ {
  /// See [LocateMeV1.id].
  static final id =
      obx.QueryIntegerProperty<LocateMeV1>(_entities[23].properties[0]);

  /// See [LocateMeV1.latitude].
  static final latitude =
      obx.QueryStringProperty<LocateMeV1>(_entities[23].properties[1]);

  /// See [LocateMeV1.longitude].
  static final longitude =
      obx.QueryStringProperty<LocateMeV1>(_entities[23].properties[2]);

  /// See [LocateMeV1.address].
  static final address =
      obx.QueryStringProperty<LocateMeV1>(_entities[23].properties[3]);

  /// See [LocateMeV1.pincode].
  static final pincode =
      obx.QueryStringProperty<LocateMeV1>(_entities[23].properties[4]);

  /// See [LocateMeV1.landmark].
  static final landmark =
      obx.QueryStringProperty<LocateMeV1>(_entities[23].properties[5]);

  /// See [LocateMeV1.locality].
  static final locality =
      obx.QueryStringProperty<LocateMeV1>(_entities[23].properties[6]);

  /// See [LocateMeV1.loginId].
  static final loginId =
      obx.QueryStringProperty<LocateMeV1>(_entities[23].properties[7]);
}

/// [LoggerV1] entity fields to define ObjectBox queries.
class LoggerV1_ {
  /// See [LoggerV1.id].
  static final id =
      obx.QueryIntegerProperty<LoggerV1>(_entities[24].properties[0]);

  /// See [LoggerV1.info].
  static final info =
      obx.QueryStringProperty<LoggerV1>(_entities[24].properties[1]);

  /// See [LoggerV1.type].
  static final type =
      obx.QueryStringProperty<LoggerV1>(_entities[24].properties[2]);

  /// See [LoggerV1.logTime].
  static final logTime =
      obx.QueryDateProperty<LoggerV1>(_entities[24].properties[3]);
}

/// [MetadataV1] entity fields to define ObjectBox queries.
class MetadataV1_ {
  /// See [MetadataV1.id].
  static final id =
      obx.QueryIntegerProperty<MetadataV1>(_entities[25].properties[0]);

  /// See [MetadataV1.domainName].
  static final domainName =
      obx.QueryStringProperty<MetadataV1>(_entities[25].properties[1]);

  /// See [MetadataV1.domainType].
  static final domainType =
      obx.QueryStringProperty<MetadataV1>(_entities[25].properties[2]);

  /// See [MetadataV1.domainValue].
  static final domainValue =
      obx.QueryStringProperty<MetadataV1>(_entities[25].properties[3]);
}

/// [MoengageV1] entity fields to define ObjectBox queries.
class MoengageV1_ {
  /// See [MoengageV1.id].
  static final id =
      obx.QueryIntegerProperty<MoengageV1>(_entities[26].properties[0]);
}

/// [MonthlyIncentiveModel] entity fields to define ObjectBox queries.
class MonthlyIncentiveModel_ {
  /// See [MonthlyIncentiveModel.id].
  static final id = obx.QueryIntegerProperty<MonthlyIncentiveModel>(
      _entities[27].properties[0]);

  /// See [MonthlyIncentiveModel.taskName].
  static final taskName = obx.QueryStringProperty<MonthlyIncentiveModel>(
      _entities[27].properties[1]);

  /// See [MonthlyIncentiveModel.period].
  static final period = obx.QueryStringProperty<MonthlyIncentiveModel>(
      _entities[27].properties[2]);

  /// See [MonthlyIncentiveModel.potentialPoints].
  static final potentialPoints = obx.QueryDoubleProperty<MonthlyIncentiveModel>(
      _entities[27].properties[3]);

  /// See [MonthlyIncentiveModel.earnedPoints].
  static final earnedPoints = obx.QueryDoubleProperty<MonthlyIncentiveModel>(
      _entities[27].properties[4]);
}

/// [MslTasksModel] entity fields to define ObjectBox queries.
class MslTasksModel_ {
  /// See [MslTasksModel.id].
  static final id =
      obx.QueryIntegerProperty<MslTasksModel>(_entities[28].properties[0]);

  /// See [MslTasksModel.channel].
  static final channel =
      obx.QueryStringProperty<MslTasksModel>(_entities[28].properties[1]);

  /// See [MslTasksModel.outletCode].
  static final outletCode =
      obx.QueryStringProperty<MslTasksModel>(_entities[28].properties[2]);

  /// See [MslTasksModel.productCode].
  static final productCode =
      obx.QueryStringProperty<MslTasksModel>(_entities[28].properties[3]);

  /// See [MslTasksModel.skuCode].
  static final skuCode =
      obx.QueryStringProperty<MslTasksModel>(_entities[28].properties[4]);

  /// See [MslTasksModel.suggestedQty].
  static final suggestedQty =
      obx.QueryStringProperty<MslTasksModel>(_entities[28].properties[5]);
}

/// [NotificationModelV1] entity fields to define ObjectBox queries.
class NotificationModelV1_ {
  /// See [NotificationModelV1.id].
  static final id = obx.QueryIntegerProperty<NotificationModelV1>(
      _entities[29].properties[0]);

  /// See [NotificationModelV1.subject].
  static final subject =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[1]);

  /// See [NotificationModelV1.description].
  static final description =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[2]);

  /// See [NotificationModelV1.blobKey].
  static final blobKey =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[3]);

  /// See [NotificationModelV1.creationTime].
  static final creationTime =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[4]);

  /// See [NotificationModelV1.wasTapped].
  static final wasTapped = obx.QueryBooleanProperty<NotificationModelV1>(
      _entities[29].properties[5]);

  /// See [NotificationModelV1.notificationId].
  static final notificationId =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[6]);

  /// See [NotificationModelV1.mediaUrl].
  static final mediaUrl =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[7]);

  /// See [NotificationModelV1.subCategory].
  static final subCategory =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[8]);

  /// See [NotificationModelV1.category].
  static final category =
      obx.QueryStringProperty<NotificationModelV1>(_entities[29].properties[9]);

  /// See [NotificationModelV1.productCategory].
  static final productCategory = obx.QueryStringProperty<NotificationModelV1>(
      _entities[29].properties[10]);

  /// See [NotificationModelV1.selectedSKU].
  static final selectedSKU = obx.QueryStringProperty<NotificationModelV1>(
      _entities[29].properties[11]);

  /// See [NotificationModelV1.feature].
  static final feature = obx.QueryStringProperty<NotificationModelV1>(
      _entities[29].properties[12]);

  /// See [NotificationModelV1.intentV1].
  static final intentV1 = obx.QueryStringProperty<NotificationModelV1>(
      _entities[29].properties[13]);

  /// See [NotificationModelV1.intentParamV1].
  static final intentParamV1 = obx.QueryStringProperty<NotificationModelV1>(
      _entities[29].properties[14]);
}

/// [NpdV1] entity fields to define ObjectBox queries.
class NpdV1_ {
  /// See [NpdV1.id].
  static final id =
      obx.QueryIntegerProperty<NpdV1>(_entities[30].properties[0]);

  /// See [NpdV1.questionsList].
  static final questionsList =
      obx.QueryStringProperty<NpdV1>(_entities[30].properties[1]);
}

/// [OfflineSyncV1] entity fields to define ObjectBox queries.
class OfflineSyncV1_ {
  /// See [OfflineSyncV1.id].
  static final id =
      obx.QueryIntegerProperty<OfflineSyncV1>(_entities[31].properties[0]);

  /// See [OfflineSyncV1.requestBodyV1].
  static final requestBodyV1 =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[1]);

  /// See [OfflineSyncV1.api].
  static final api =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[2]);

  /// See [OfflineSyncV1.method].
  static final method =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[3]);

  /// See [OfflineSyncV1.lastModifiedTimeV1].
  static final lastModifiedTimeV1 =
      obx.QueryDateProperty<OfflineSyncV1>(_entities[31].properties[4]);

  /// See [OfflineSyncV1.status].
  static final status =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[5]);

  /// See [OfflineSyncV1.transactionIdV1].
  static final transactionIdV1 =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[6]);

  /// See [OfflineSyncV1.referenceNumberV1].
  static final referenceNumberV1 =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[7]);

  /// See [OfflineSyncV1.attempts].
  static final attempts =
      obx.QueryIntegerProperty<OfflineSyncV1>(_entities[31].properties[8]);

  /// See [OfflineSyncV1.response].
  static final response =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[9]);

  /// See [OfflineSyncV1.responseStatus].
  static final responseStatus =
      obx.QueryIntegerProperty<OfflineSyncV1>(_entities[31].properties[10]);

  /// See [OfflineSyncV1.loginId].
  static final loginId =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[11]);

  /// See [OfflineSyncV1.outletId].
  static final outletId =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[12]);

  /// See [OfflineSyncV1.featureV1].
  static final featureV1 =
      obx.QueryStringProperty<OfflineSyncV1>(_entities[31].properties[13]);

  /// See [OfflineSyncV1.creationTime].
  static final creationTime =
      obx.QueryDateProperty<OfflineSyncV1>(_entities[31].properties[14]);

  /// See [OfflineSyncV1.editV1].
  static final editV1 =
      obx.QueryBooleanProperty<OfflineSyncV1>(_entities[31].properties[15]);

  /// See [OfflineSyncV1.orderSeqNum].
  static final orderSeqNum =
      obx.QueryIntegerProperty<OfflineSyncV1>(_entities[31].properties[16]);
}

/// [OrderDetails] entity fields to define ObjectBox queries.
class OrderDetails_ {
  /// See [OrderDetails.id].
  static final id =
      obx.QueryIntegerProperty<OrderDetails>(_entities[32].properties[0]);

  /// See [OrderDetails.referenceNumber].
  static final referenceNumber =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[1]);

  /// See [OrderDetails.extendedAttributes].
  static final extendedAttributes =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[2]);

  /// See [OrderDetails.billAmount].
  static final billAmount =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[3]);

  /// See [OrderDetails.netAmount].
  static final netAmount =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[4]);

  /// See [OrderDetails.batchCode].
  static final batchCode =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[5]);

  /// See [OrderDetails.outletCode].
  static final outletCode =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[6]);

  /// See [OrderDetails.supplier].
  static final supplier =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[7]);

  /// See [OrderDetails.normalizedQuantity].
  static final normalizedQuantity =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[8]);

  /// See [OrderDetails.initialAmount].
  static final initialAmount =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[9]);

  /// See [OrderDetails.initialQuantity].
  static final initialQuantity =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[10]);

  /// See [OrderDetails.mrp].
  static final mrp =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[11]);

  /// See [OrderDetails.price].
  static final price =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[12]);

  /// See [OrderDetails.casePrice].
  static final casePrice =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[13]);

  /// See [OrderDetails.productInfo].
  static final productInfo =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[14]);

  /// See [OrderDetails.loginId].
  static final loginId =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[15]);

  /// See [OrderDetails.discountInfo].
  static final discountInfo =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[16]);

  /// See [OrderDetails.caseQuantity].
  static final caseQuantity =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[17]);

  /// See [OrderDetails.pieceQuantity].
  static final pieceQuantity =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[18]);

  /// See [OrderDetails.otherUnitQuantity].
  static final otherUnitQuantity =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[19]);

  /// See [OrderDetails.couponValue].
  static final couponValue =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[20]);

  /// See [OrderDetails.discountValue].
  static final discountValue =
      obx.QueryDoubleProperty<OrderDetails>(_entities[32].properties[21]);

  /// See [OrderDetails.orderNumber].
  static final orderNumber =
      obx.QueryStringProperty<OrderDetails>(_entities[32].properties[22]);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// See [OrderModel.id].
  static final id =
      obx.QueryIntegerProperty<OrderModel>(_entities[33].properties[0]);

  /// See [OrderModel.orderNumber].
  static final orderNumber =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[1]);

  /// See [OrderModel.creationTime].
  static final creationTime =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[2]);

  /// See [OrderModel.extendedAttributes].
  static final extendedAttributes =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[3]);

  /// See [OrderModel.billAmount].
  static final billAmount =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[4]);

  /// See [OrderModel.lineCount].
  static final lineCount =
      obx.QueryIntegerProperty<OrderModel>(_entities[33].properties[5]);

  /// See [OrderModel.netAmount].
  static final netAmount =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[6]);

  /// See [OrderModel.referenceNumber].
  static final referenceNumber =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[7]);

  /// See [OrderModel.remarks].
  static final remarks =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[8]);

  /// See [OrderModel.source].
  static final source =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[9]);

  /// See [OrderModel.totalAmount].
  static final totalAmount =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[10]);

  /// See [OrderModel.totalMrp].
  static final totalMrp =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[11]);

  /// See [OrderModel.totalQuantity].
  static final totalQuantity =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[12]);

  /// See [OrderModel.type].
  static final type =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[13]);

  /// See [OrderModel.outletCode].
  static final outletCode =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[14]);

  /// See [OrderModel.supplier].
  static final supplier =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[15]);

  /// See [OrderModel.status].
  static final status =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[16]);

  /// See [OrderModel.normalizedQuantity].
  static final normalizedQuantity =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[17]);

  /// See [OrderModel.loginId].
  static final loginId =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[18]);

  /// See [OrderModel.discountInfo].
  static final discountInfo =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[19]);

  /// See [OrderModel.supplierName].
  static final supplierName =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[20]);

  /// See [OrderModel.outletName].
  static final outletName =
      obx.QueryStringProperty<OrderModel>(_entities[33].properties[21]);

  /// See [OrderModel.totalCaseQuantity].
  static final totalCaseQuantity =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[22]);

  /// See [OrderModel.totalPieceQuantity].
  static final totalPieceQuantity =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[23]);

  /// See [OrderModel.totalOtherUnitQuantity].
  static final totalOtherUnitQuantity =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[24]);

  /// See [OrderModel.couponValue].
  static final couponValue =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[25]);

  /// See [OrderModel.discountValue].
  static final discountValue =
      obx.QueryDoubleProperty<OrderModel>(_entities[33].properties[26]);
}

/// [OrderTrackingModelV1] entity fields to define ObjectBox queries.
class OrderTrackingModelV1_ {
  /// See [OrderTrackingModelV1.id].
  static final id = obx.QueryIntegerProperty<OrderTrackingModelV1>(
      _entities[34].properties[0]);

  /// See [OrderTrackingModelV1.orderNumber].
  static final orderNumber = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[1]);

  /// See [OrderTrackingModelV1.creationTime].
  static final creationTime = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[2]);

  /// See [OrderTrackingModelV1.lastModifiedTime].
  static final lastModifiedTime = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[3]);

  /// See [OrderTrackingModelV1.extendedAttributes].
  static final extendedAttributes =
      obx.QueryStringProperty<OrderTrackingModelV1>(
          _entities[34].properties[4]);

  /// See [OrderTrackingModelV1.lob].
  static final lob = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[5]);

  /// See [OrderTrackingModelV1.billAmount].
  static final billAmount = obx.QueryDoubleProperty<OrderTrackingModelV1>(
      _entities[34].properties[6]);

  /// See [OrderTrackingModelV1.lineCount].
  static final lineCount = obx.QueryIntegerProperty<OrderTrackingModelV1>(
      _entities[34].properties[7]);

  /// See [OrderTrackingModelV1.netAmount].
  static final netAmount = obx.QueryDoubleProperty<OrderTrackingModelV1>(
      _entities[34].properties[8]);

  /// See [OrderTrackingModelV1.referenceNumber].
  static final referenceNumber = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[9]);

  /// See [OrderTrackingModelV1.remarks].
  static final remarks = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[10]);

  /// See [OrderTrackingModelV1.source].
  static final source = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[11]);

  /// See [OrderTrackingModelV1.totalAmount].
  static final totalAmount = obx.QueryDoubleProperty<OrderTrackingModelV1>(
      _entities[34].properties[12]);

  /// See [OrderTrackingModelV1.totalInitialAmt].
  static final totalInitialAmt = obx.QueryDoubleProperty<OrderTrackingModelV1>(
      _entities[34].properties[13]);

  /// See [OrderTrackingModelV1.totalInitialQuantity].
  static final totalInitialQuantity =
      obx.QueryDoubleProperty<OrderTrackingModelV1>(
          _entities[34].properties[14]);

  /// See [OrderTrackingModelV1.totalMrp].
  static final totalMrp = obx.QueryDoubleProperty<OrderTrackingModelV1>(
      _entities[34].properties[15]);

  /// See [OrderTrackingModelV1.totalQuantity].
  static final totalQuantity = obx.QueryDoubleProperty<OrderTrackingModelV1>(
      _entities[34].properties[16]);

  /// See [OrderTrackingModelV1.type].
  static final type = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[17]);

  /// See [OrderTrackingModelV1.outletCode].
  static final outletCode = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[18]);

  /// See [OrderTrackingModelV1.supplier].
  static final supplier = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[19]);

  /// See [OrderTrackingModelV1.status].
  static final status = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[20]);

  /// See [OrderTrackingModelV1.channel].
  static final channel = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[21]);

  /// See [OrderTrackingModelV1.normalizedQuantity].
  static final normalizedQuantity =
      obx.QueryDoubleProperty<OrderTrackingModelV1>(
          _entities[34].properties[22]);

  /// See [OrderTrackingModelV1.initialNormalizedQuantity].
  static final initialNormalizedQuantity =
      obx.QueryDoubleProperty<OrderTrackingModelV1>(
          _entities[34].properties[23]);

  /// See [OrderTrackingModelV1.systemTime].
  static final systemTime = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[24]);

  /// See [OrderTrackingModelV1.loginId].
  static final loginId = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[25]);

  /// See [OrderTrackingModelV1.discountInfo].
  static final discountInfo = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[26]);

  /// See [OrderTrackingModelV1.normalizedVolume].
  static final normalizedVolume = obx.QueryDoubleProperty<OrderTrackingModelV1>(
      _entities[34].properties[27]);

  /// See [OrderTrackingModelV1.processingStatus].
  static final processingStatus = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[28]);

  /// See [OrderTrackingModelV1.supplierName].
  static final supplierName = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[29]);

  /// See [OrderTrackingModelV1.outletName].
  static final outletName = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[30]);

  /// See [OrderTrackingModelV1.outletMobile].
  static final outletMobile = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[31]);

  /// See [OrderTrackingModelV1.orderDetails].
  static final orderDetails = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[32]);

  /// See [OrderTrackingModelV1.totalCaseQuantity].
  static final totalCaseQuantity =
      obx.QueryDoubleProperty<OrderTrackingModelV1>(
          _entities[34].properties[33]);

  /// See [OrderTrackingModelV1.totalPieceQuantity].
  static final totalPieceQuantity =
      obx.QueryDoubleProperty<OrderTrackingModelV1>(
          _entities[34].properties[34]);

  /// See [OrderTrackingModelV1.totalOtherUnitQuantity].
  static final totalOtherUnitQuantity =
      obx.QueryDoubleProperty<OrderTrackingModelV1>(
          _entities[34].properties[35]);

  /// See [OrderTrackingModelV1.orderHistory].
  static final orderHistory = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[36]);

  /// See [OrderTrackingModelV1.edit].
  static final edit = obx.QueryBooleanProperty<OrderTrackingModelV1>(
      _entities[34].properties[37]);

  /// See [OrderTrackingModelV1.statusReasonV1].
  static final statusReasonV1 = obx.QueryStringProperty<OrderTrackingModelV1>(
      _entities[34].properties[38]);
}

/// [OutletMappingChannelV1] entity fields to define ObjectBox queries.
class OutletMappingChannelV1_ {
  /// See [OutletMappingChannelV1.id].
  static final id = obx.QueryIntegerProperty<OutletMappingChannelV1>(
      _entities[35].properties[0]);

  /// See [OutletMappingChannelV1.channel].
  static final channel = obx.QueryStringProperty<OutletMappingChannelV1>(
      _entities[35].properties[1]);

  /// See [OutletMappingChannelV1.subChannelV1].
  static final subChannelV1 = obx.QueryStringProperty<OutletMappingChannelV1>(
      _entities[35].properties[2]);
}

/// [OutletMappingLocation] entity fields to define ObjectBox queries.
class OutletMappingLocation_ {
  /// See [OutletMappingLocation.id].
  static final id = obx.QueryIntegerProperty<OutletMappingLocation>(
      _entities[36].properties[0]);

  /// See [OutletMappingLocation.region].
  static final region = obx.QueryStringProperty<OutletMappingLocation>(
      _entities[36].properties[1]);

  /// See [OutletMappingLocation.salesTeritory].
  static final salesTeritory = obx.QueryStringProperty<OutletMappingLocation>(
      _entities[36].properties[2]);

  /// See [OutletMappingLocation.state].
  static final state = obx.QueryStringVectorProperty<OutletMappingLocation>(
      _entities[36].properties[3]);

  /// See [OutletMappingLocation.city].
  static final city = obx.QueryStringVectorProperty<OutletMappingLocation>(
      _entities[36].properties[4]);

  /// See [OutletMappingLocation.district].
  static final district = obx.QueryStringProperty<OutletMappingLocation>(
      _entities[36].properties[5]);

  /// See [OutletMappingLocation.cityClassification].
  static final cityClassification =
      obx.QueryStringProperty<OutletMappingLocation>(
          _entities[36].properties[6]);

  /// See [OutletMappingLocation.cityCluster].
  static final cityCluster = obx.QueryStringProperty<OutletMappingLocation>(
      _entities[36].properties[7]);

  /// See [OutletMappingLocation.routeName].
  static final routeName = obx.QueryStringVectorProperty<OutletMappingLocation>(
      _entities[36].properties[8]);
}

/// [OutletMappingV1] entity fields to define ObjectBox queries.
class OutletMappingV1_ {
  /// See [OutletMappingV1.id].
  static final id =
      obx.QueryIntegerProperty<OutletMappingV1>(_entities[37].properties[0]);

  /// See [OutletMappingV1.provinceV1].
  static final provinceV1 =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[1]);

  /// See [OutletMappingV1.cityV1].
  static final cityV1 =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[2]);

  /// See [OutletMappingV1.districtV1].
  static final districtV1 =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[3]);

  /// See [OutletMappingV1.customerChannel].
  static final customerChannel = obx.QueryStringVectorProperty<OutletMappingV1>(
      _entities[37].properties[4]);

  /// See [OutletMappingV1.channelCode].
  static final channelCode =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[5]);

  /// See [OutletMappingV1.customerType].
  static final customerType = obx.QueryStringVectorProperty<OutletMappingV1>(
      _entities[37].properties[6]);

  /// See [OutletMappingV1.outletType].
  static final outletType = obx.QueryStringVectorProperty<OutletMappingV1>(
      _entities[37].properties[7]);

  /// See [OutletMappingV1.region].
  static final region =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[8]);

  /// See [OutletMappingV1.salesTeritory].
  static final salesTeritory =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[9]);

  /// See [OutletMappingV1.state].
  static final state = obx.QueryStringVectorProperty<OutletMappingV1>(
      _entities[37].properties[10]);

  /// See [OutletMappingV1.city].
  static final city =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[11]);

  /// See [OutletMappingV1.district].
  static final district =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[12]);

  /// See [OutletMappingV1.cityClassification].
  static final cityClassification =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[13]);

  /// See [OutletMappingV1.cityCluster].
  static final cityCluster =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[14]);

  /// See [OutletMappingV1.routeName].
  static final routeName = obx.QueryStringVectorProperty<OutletMappingV1>(
      _entities[37].properties[15]);

  /// See [OutletMappingV1.aseTerritory].
  static final aseTerritory =
      obx.QueryStringProperty<OutletMappingV1>(_entities[37].properties[16]);

  /// See [OutletMappingV1.distributorId].
  static final distributorId = obx.QueryStringVectorProperty<OutletMappingV1>(
      _entities[37].properties[17]);

  /// See [OutletMappingV1.distributorName].
  static final distributorName = obx.QueryStringVectorProperty<OutletMappingV1>(
      _entities[37].properties[18]);
}

/// [OutletPricing] entity fields to define ObjectBox queries.
class OutletPricing_ {
  /// See [OutletPricing.id].
  static final id =
      obx.QueryIntegerProperty<OutletPricing>(_entities[38].properties[0]);

  /// See [OutletPricing.outletCode].
  static final outletCode =
      obx.QueryStringProperty<OutletPricing>(_entities[38].properties[1]);

  /// See [OutletPricing.productInfo].
  static final productInfo =
      obx.QueryStringProperty<OutletPricing>(_entities[38].properties[2]);
}

/// [OutletSubscriptionV1] entity fields to define ObjectBox queries.
class OutletSubscriptionV1_ {
  /// See [OutletSubscriptionV1.id].
  static final id = obx.QueryIntegerProperty<OutletSubscriptionV1>(
      _entities[39].properties[0]);

  /// See [OutletSubscriptionV1.activeStatus].
  static final activeStatus = obx.QueryStringProperty<OutletSubscriptionV1>(
      _entities[39].properties[1]);

  /// See [OutletSubscriptionV1.activeStatusReason].
  static final activeStatusReason =
      obx.QueryStringProperty<OutletSubscriptionV1>(
          _entities[39].properties[2]);

  /// See [OutletSubscriptionV1.principalLoginId].
  static final principalLoginId = obx.QueryStringProperty<OutletSubscriptionV1>(
      _entities[39].properties[3]);

  /// See [OutletSubscriptionV1.principalOutletCode].
  static final principalOutletCode =
      obx.QueryStringProperty<OutletSubscriptionV1>(
          _entities[39].properties[4]);

  /// See [OutletSubscriptionV1.targetLob].
  static final targetLob = obx.QueryStringProperty<OutletSubscriptionV1>(
      _entities[39].properties[5]);

  /// See [OutletSubscriptionV1.targetLoginId].
  static final targetLoginId = obx.QueryStringProperty<OutletSubscriptionV1>(
      _entities[39].properties[6]);

  /// See [OutletSubscriptionV1.targetOutletCode].
  static final targetOutletCode = obx.QueryStringProperty<OutletSubscriptionV1>(
      _entities[39].properties[7]);

  /// See [OutletSubscriptionV1.mobileNumber].
  static final mobileNumber = obx.QueryStringProperty<OutletSubscriptionV1>(
      _entities[39].properties[8]);
}

/// [OutletSurveyQuestionModel] entity fields to define ObjectBox queries.
class OutletSurveyQuestionModel_ {
  /// See [OutletSurveyQuestionModel.id].
  static final id = obx.QueryIntegerProperty<OutletSurveyQuestionModel>(
      _entities[40].properties[0]);

  /// See [OutletSurveyQuestionModel.quesId].
  static final quesId = obx.QueryStringProperty<OutletSurveyQuestionModel>(
      _entities[40].properties[1]);

  /// See [OutletSurveyQuestionModel.question].
  static final question = obx.QueryStringProperty<OutletSurveyQuestionModel>(
      _entities[40].properties[2]);

  /// See [OutletSurveyQuestionModel.options].
  static final options =
      obx.QueryStringVectorProperty<OutletSurveyQuestionModel>(
          _entities[40].properties[3]);

  /// See [OutletSurveyQuestionModel.qid].
  static final qid = obx.QueryStringProperty<OutletSurveyQuestionModel>(
      _entities[40].properties[4]);

  /// See [OutletSurveyQuestionModel.eventId].
  static final eventId = obx.QueryStringProperty<OutletSurveyQuestionModel>(
      _entities[40].properties[5]);

  /// See [OutletSurveyQuestionModel.responseType].
  static final responseType =
      obx.QueryStringProperty<OutletSurveyQuestionModel>(
          _entities[40].properties[6]);

  /// See [OutletSurveyQuestionModel.eventType].
  static final eventType = obx.QueryStringProperty<OutletSurveyQuestionModel>(
      _entities[40].properties[7]);
}

/// [OutletSurveyResponseModel] entity fields to define ObjectBox queries.
class OutletSurveyResponseModel_ {
  /// See [OutletSurveyResponseModel.id].
  static final id = obx.QueryIntegerProperty<OutletSurveyResponseModel>(
      _entities[41].properties[0]);

  /// See [OutletSurveyResponseModel.outletCode].
  static final outletCode = obx.QueryStringProperty<OutletSurveyResponseModel>(
      _entities[41].properties[1]);

  /// See [OutletSurveyResponseModel.answerId].
  static final answerId = obx.QueryStringProperty<OutletSurveyResponseModel>(
      _entities[41].properties[2]);

  /// See [OutletSurveyResponseModel.answer].
  static final answer =
      obx.QueryStringVectorProperty<OutletSurveyResponseModel>(
          _entities[41].properties[3]);

  /// See [OutletSurveyResponseModel.responseType].
  static final responseType =
      obx.QueryStringProperty<OutletSurveyResponseModel>(
          _entities[41].properties[4]);

  /// See [OutletSurveyResponseModel.lastModifiedTime].
  static final lastModifiedTime =
      obx.QueryStringProperty<OutletSurveyResponseModel>(
          _entities[41].properties[5]);
}

/// [OutletV1] entity fields to define ObjectBox queries.
class OutletV1_ {
  /// See [OutletV1.id].
  static final id =
      obx.QueryIntegerProperty<OutletV1>(_entities[42].properties[0]);

  /// See [OutletV1.lastModified].
  static final lastModified =
      obx.QueryDateProperty<OutletV1>(_entities[42].properties[1]);

  /// See [OutletV1.outletName].
  static final outletName =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[2]);

  /// See [OutletV1.activeStatus].
  static final activeStatus =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[3]);

  /// See [OutletV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[4]);

  /// See [OutletV1.beatName].
  static final beatName =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[5]);

  /// See [OutletV1.beat].
  static final beat =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[6]);

  /// See [OutletV1.address].
  static final address =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[7]);

  /// See [OutletV1.contactno].
  static final contactno =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[8]);

  /// See [OutletV1.displayAddress].
  static final displayAddress =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[9]);

  /// See [OutletV1.channel].
  static final channel =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[10]);

  /// See [OutletV1.location].
  static final location =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[11]);

  /// See [OutletV1.hierarchy].
  static final hierarchy =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[12]);

  /// See [OutletV1.subChannel].
  static final subChannel =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[13]);

  /// See [OutletV1.immediateParent].
  static final immediateParent =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[14]);

  /// See [OutletV1.userName].
  static final userName =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[15]);

  /// See [OutletV1.lastOrderDate].
  static final lastOrderDate =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[16]);

  /// See [OutletV1.outletType].
  static final outletType =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[17]);

  /// See [OutletV1.mapped].
  static final mapped =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[18]);

  /// See [OutletV1.latitude].
  static final latitude =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[19]);

  /// See [OutletV1.longitude].
  static final longitude =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[20]);

  /// See [OutletV1.ownerName].
  static final ownerName =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[21]);

  /// See [OutletV1.dob].
  static final dob =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[22]);

  /// See [OutletV1.doa].
  static final doa =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[23]);

  /// See [OutletV1.outletClass].
  static final outletClass =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[24]);

  /// See [OutletV1.foodsTier].
  static final foodsTier =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[25]);

  /// See [OutletV1.blobkey].
  static final blobkey =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[26]);

  /// See [OutletV1.recommendationData].
  static final recommendationData =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[27]);

  /// See [OutletV1.pjp].
  static final pjp =
      obx.QueryBooleanProperty<OutletV1>(_entities[42].properties[28]);

  /// See [OutletV1.crossSell].
  static final crossSell =
      obx.QueryBooleanProperty<OutletV1>(_entities[42].properties[29]);

  /// See [OutletV1.recover].
  static final recover =
      obx.QueryBooleanProperty<OutletV1>(_entities[42].properties[30]);

  /// See [OutletV1.mustOrder].
  static final mustOrder =
      obx.QueryBooleanProperty<OutletV1>(_entities[42].properties[31]);

  /// See [OutletV1.focusProduct].
  static final focusProduct =
      obx.QueryBooleanProperty<OutletV1>(_entities[42].properties[32]);

  /// See [OutletV1.searchableString].
  static final searchableString =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[33]);

  /// See [OutletV1.branch].
  static final branch =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[34]);

  /// See [OutletV1.supplier].
  static final supplier =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[35]);

  /// See [OutletV1.outletCategory].
  static final outletCategory =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[36]);

  /// See [OutletV1.outletProbabilityV1].
  static final outletProbabilityV1 =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[37]);

  /// See [OutletV1.marketIdV1].
  static final marketIdV1 =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[38]);

  /// See [OutletV1.payoutSmsLink].
  static final payoutSmsLink =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[39]);

  /// See [OutletV1.expiryDate].
  static final expiryDate =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[40]);

  /// See [OutletV1.ondcProvider].
  static final ondcProvider =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[41]);

  /// See [OutletV1.outletDivision].
  static final outletDivision =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[42]);

  /// See [OutletV1.clientBe].
  static final clientBe =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[43]);

  /// See [OutletV1.acoholCheck].
  static final acoholCheck =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[44]);

  /// See [OutletV1.distributionChannel].
  static final distributionChannel =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[45]);

  /// See [OutletV1.incentivePoints].
  static final incentivePoints =
      obx.QueryIntegerProperty<OutletV1>(_entities[42].properties[46]);

  /// See [OutletV1.salesRep].
  static final salesRep =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[47]);

  /// See [OutletV1.availableCredit].
  static final availableCredit =
      obx.QueryDoubleProperty<OutletV1>(_entities[42].properties[48]);

  /// See [OutletV1.totalCredit].
  static final totalCredit =
      obx.QueryDoubleProperty<OutletV1>(_entities[42].properties[49]);

  /// See [OutletV1.creditStatus].
  static final creditStatus =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[50]);

  /// See [OutletV1.customerType].
  static final customerType =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[51]);

  /// See [OutletV1.deliveryplant].
  static final deliveryplant =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[52]);

  /// See [OutletV1.srName].
  static final srName =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[53]);

  /// See [OutletV1.srId].
  static final srId =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[54]);

  /// See [OutletV1.emtDiscount].
  static final emtDiscount =
      obx.QueryStringProperty<OutletV1>(_entities[42].properties[55]);
}

/// [OutletWiseProductInfo] entity fields to define ObjectBox queries.
class OutletWiseProductInfo_ {
  /// See [OutletWiseProductInfo.id].
  static final id = obx.QueryIntegerProperty<OutletWiseProductInfo>(
      _entities[43].properties[0]);

  /// See [OutletWiseProductInfo.outletCode].
  static final outletCode = obx.QueryStringProperty<OutletWiseProductInfo>(
      _entities[43].properties[1]);

  /// See [OutletWiseProductInfo.productInfo].
  static final productInfo = obx.QueryStringProperty<OutletWiseProductInfo>(
      _entities[43].properties[2]);
}

/// [PopularQuestionUIV1] entity fields to define ObjectBox queries.
class PopularQuestionUIV1_ {
  /// See [PopularQuestionUIV1.id].
  static final id = obx.QueryIntegerProperty<PopularQuestionUIV1>(
      _entities[44].properties[0]);

  /// See [PopularQuestionUIV1.question].
  static final question =
      obx.QueryStringProperty<PopularQuestionUIV1>(_entities[44].properties[1]);

  /// See [PopularQuestionUIV1.answer].
  static final answer =
      obx.QueryStringProperty<PopularQuestionUIV1>(_entities[44].properties[2]);

  /// See [PopularQuestionUIV1.template].
  static final template =
      obx.QueryStringProperty<PopularQuestionUIV1>(_entities[44].properties[3]);

  /// See [PopularQuestionUIV1.url].
  static final url =
      obx.QueryStringProperty<PopularQuestionUIV1>(_entities[44].properties[4]);

  /// See [PopularQuestionUIV1.embedLink].
  static final embedLink =
      obx.QueryStringProperty<PopularQuestionUIV1>(_entities[44].properties[5]);

  /// See [PopularQuestionUIV1.activeStatus].
  static final activeStatus =
      obx.QueryStringProperty<PopularQuestionUIV1>(_entities[44].properties[6]);

  /// See [PopularQuestionUIV1.trainingText].
  static final trainingText =
      obx.QueryStringProperty<PopularQuestionUIV1>(_entities[44].properties[7]);

  /// See [PopularQuestionUIV1.intent].
  static final intent = obx.QueryIntegerProperty<PopularQuestionUIV1>(
      _entities[44].properties[8]);
}

/// [ProductAttributes] entity fields to define ObjectBox queries.
class ProductAttributes_ {
  /// See [ProductAttributes.id].
  static final id =
      obx.QueryIntegerProperty<ProductAttributes>(_entities[45].properties[0]);

  /// See [ProductAttributes.productTypes].
  static final productTypes = obx.QueryStringVectorProperty<ProductAttributes>(
      _entities[45].properties[1]);
}

/// [ProductFiltersV1] entity fields to define ObjectBox queries.
class ProductFiltersV1_ {
  /// See [ProductFiltersV1.id].
  static final id =
      obx.QueryIntegerProperty<ProductFiltersV1>(_entities[46].properties[0]);

  /// See [ProductFiltersV1.filters].
  static final filters =
      obx.QueryStringProperty<ProductFiltersV1>(_entities[46].properties[1]);
}

/// [ProductMetadataV1] entity fields to define ObjectBox queries.
class ProductMetadataV1_ {
  /// See [ProductMetadataV1.id].
  static final id =
      obx.QueryIntegerProperty<ProductMetadataV1>(_entities[47].properties[0]);

  /// See [ProductMetadataV1.lastModified].
  static final lastModified =
      obx.QueryDateProperty<ProductMetadataV1>(_entities[47].properties[1]);

  /// See [ProductMetadataV1.manufacturingDateV1].
  static final manufacturingDateV1 =
      obx.QueryDateProperty<ProductMetadataV1>(_entities[47].properties[2]);

  /// See [ProductMetadataV1.name].
  static final name =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[3]);

  /// See [ProductMetadataV1.packPtr].
  static final packPtr =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[4]);

  /// See [ProductMetadataV1.casePtr].
  static final casePtr =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[5]);

  /// See [ProductMetadataV1.packMrp].
  static final packMrp =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[6]);

  /// See [ProductMetadataV1.caseMrp].
  static final caseMrp =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[7]);

  /// See [ProductMetadataV1.srp].
  static final srp =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[8]);

  /// See [ProductMetadataV1.description].
  static final description =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[9]);

  /// See [ProductMetadataV1.quantity].
  static final quantity =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[10]);

  /// See [ProductMetadataV1.case2Piece].
  static final case2Piece =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[11]);

  /// See [ProductMetadataV1.supplier].
  static final supplier =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[12]);

  /// See [ProductMetadataV1.activeStatus].
  static final activeStatus =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[13]);

  /// See [ProductMetadataV1.otherUnitMrp].
  static final otherUnitMrp =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[14]);

  /// See [ProductMetadataV1.otherUnitPtr].
  static final otherUnitPtr =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[15]);

  /// See [ProductMetadataV1.groupIdV1].
  static final groupIdV1 =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[16]);

  /// See [ProductMetadataV1.buttonDescriptionV1].
  static final buttonDescriptionV1 =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[17]);

  /// See [ProductMetadataV1.discountMargin].
  static final discountMargin =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[18]);

  /// See [ProductMetadataV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[19]);

  /// See [ProductMetadataV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[20]);

  /// See [ProductMetadataV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<ProductMetadataV1>(_entities[47].properties[21]);

  /// See [ProductMetadataV1.tax].
  static final tax =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[22]);

  /// See [ProductMetadataV1.specialPrice].
  static final specialPrice =
      obx.QueryDoubleProperty<ProductMetadataV1>(_entities[47].properties[23]);

  /// See [ProductMetadataV1.caseToPieceQuantity].
  static final caseToPieceQuantity =
      obx.QueryIntegerProperty<ProductMetadataV1>(_entities[47].properties[24]);

  /// See [ProductMetadataV1.caseToOtherUnitQuantity].
  static final caseToOtherUnitQuantity =
      obx.QueryIntegerProperty<ProductMetadataV1>(_entities[47].properties[25]);

  /// See [ProductMetadataV1.otherUnitToPieceQuantity].
  static final otherUnitToPieceQuantity =
      obx.QueryIntegerProperty<ProductMetadataV1>(_entities[47].properties[26]);

  /// See [ProductMetadataV1.pieceToOtherUnitQuantity].
  static final pieceToOtherUnitQuantity =
      obx.QueryIntegerProperty<ProductMetadataV1>(_entities[47].properties[27]);
}

/// [ProductPricingV1] entity fields to define ObjectBox queries.
class ProductPricingV1_ {
  /// See [ProductPricingV1.id].
  static final id =
      obx.QueryIntegerProperty<ProductPricingV1>(_entities[48].properties[0]);

  /// See [ProductPricingV1.lastModified].
  static final lastModified =
      obx.QueryDateProperty<ProductPricingV1>(_entities[48].properties[1]);

  /// See [ProductPricingV1.price].
  static final price =
      obx.QueryDoubleProperty<ProductPricingV1>(_entities[48].properties[2]);

  /// See [ProductPricingV1.casePrice].
  static final casePrice =
      obx.QueryDoubleProperty<ProductPricingV1>(_entities[48].properties[3]);

  /// See [ProductPricingV1.type].
  static final type =
      obx.QueryStringProperty<ProductPricingV1>(_entities[48].properties[4]);

  /// See [ProductPricingV1.typeValue].
  static final typeValue =
      obx.QueryStringProperty<ProductPricingV1>(_entities[48].properties[5]);

  /// See [ProductPricingV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<ProductPricingV1>(_entities[48].properties[6]);

  /// See [ProductPricingV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<ProductPricingV1>(_entities[48].properties[7]);

  /// See [ProductPricingV1.priority].
  static final priority =
      obx.QueryIntegerProperty<ProductPricingV1>(_entities[48].properties[8]);

  /// See [ProductPricingV1.product].
  static final product = obx.QueryRelationToOne<ProductPricingV1, ProductV1>(
      _entities[48].properties[9]);
}

/// [ProductV1] entity fields to define ObjectBox queries.
class ProductV1_ {
  /// See [ProductV1.id].
  static final id =
      obx.QueryIntegerProperty<ProductV1>(_entities[49].properties[0]);

  /// See [ProductV1.lastModified].
  static final lastModified =
      obx.QueryDateProperty<ProductV1>(_entities[49].properties[1]);

  /// See [ProductV1.name].
  static final name =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[2]);

  /// See [ProductV1.description].
  static final description =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[3]);

  /// See [ProductV1.productDescription].
  static final productDescription =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[4]);

  /// See [ProductV1.suggestedQty].
  static final suggestedQty =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[5]);

  /// See [ProductV1.suggestedCaseQty].
  static final suggestedCaseQty =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[6]);

  /// See [ProductV1.case2Piece].
  static final case2Piece =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[7]);

  /// See [ProductV1.images].
  static final images =
      obx.QueryStringVectorProperty<ProductV1>(_entities[49].properties[8]);

  /// See [ProductV1.category].
  static final category =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[9]);

  /// See [ProductV1.subCategory].
  static final subCategory =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[10]);

  /// See [ProductV1.subCategoryCode].
  static final subCategoryCode =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[11]);

  /// See [ProductV1.brand].
  static final brand =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[12]);

  /// See [ProductV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[13]);

  /// See [ProductV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[14]);

  /// See [ProductV1.priority].
  static final priority =
      obx.QueryIntegerProperty<ProductV1>(_entities[49].properties[15]);

  /// See [ProductV1.pieceSize].
  static final pieceSize =
      obx.QueryIntegerProperty<ProductV1>(_entities[49].properties[16]);

  /// See [ProductV1.pieceSizeDesc].
  static final pieceSizeDesc =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[17]);

  /// See [ProductV1.suggestionText].
  static final suggestionText =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[18]);

  /// See [ProductV1.productTag].
  static final productTag =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[19]);

  /// See [ProductV1.itemClass].
  static final itemClass =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[20]);

  /// See [ProductV1.packPtr].
  static final packPtr =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[21]);

  /// See [ProductV1.casePtr].
  static final casePtr =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[22]);

  /// See [ProductV1.packMrp].
  static final packMrp =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[23]);

  /// See [ProductV1.mrp].
  static final mrp =
      obx.QueryIntegerProperty<ProductV1>(_entities[49].properties[24]);

  /// See [ProductV1.caseMrp].
  static final caseMrp =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[25]);

  /// See [ProductV1.skuPriority].
  static final skuPriority =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[26]);

  /// See [ProductV1.supplier].
  static final supplier =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[27]);

  /// See [ProductV1.tax].
  static final tax =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[28]);

  /// See [ProductV1.marketSkuCode].
  static final marketSkuCode =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[29]);

  /// See [ProductV1.otherUnitMrp].
  static final otherUnitMrp =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[30]);

  /// See [ProductV1.otherUnitToPieceQuantity].
  static final otherUnitToPieceQuantity =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[31]);

  /// See [ProductV1.pieceToOtherUnitQuantity].
  static final pieceToOtherUnitQuantity =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[32]);

  /// See [ProductV1.otherUnitPtr].
  static final otherUnitPtr =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[33]);

  /// See [ProductV1.otherUnitName].
  static final otherUnitName =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[34]);

  /// See [ProductV1.smartBuy].
  static final smartBuy =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[35]);

  /// See [ProductV1.groupIdV1].
  static final groupIdV1 =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[36]);

  /// See [ProductV1.itemDescV1].
  static final itemDescV1 =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[37]);

  /// See [ProductV1.uomV1].
  static final uomV1 =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[38]);

  /// See [ProductV1.manufacturingDateV1].
  static final manufacturingDateV1 =
      obx.QueryDateProperty<ProductV1>(_entities[49].properties[39]);

  /// See [ProductV1.buttonDescriptionV1].
  static final buttonDescriptionV1 =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[40]);

  /// See [ProductV1.basePackPtrV1].
  static final basePackPtrV1 =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[41]);

  /// See [ProductV1.baseCasePtrV1].
  static final baseCasePtrV1 =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[42]);

  /// See [ProductV1.translation].
  static final translation =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[43]);

  /// See [ProductV1.productType].
  static final productType =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[44]);

  /// See [ProductV1.productCode].
  static final productCode =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[45]);

  /// See [ProductV1.srp].
  static final srp =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[46]);

  /// See [ProductV1.returnCode].
  static final returnCode =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[47]);

  /// See [ProductV1.discountMargin].
  static final discountMargin =
      obx.QueryDoubleProperty<ProductV1>(_entities[49].properties[48]);

  /// See [ProductV1.eb2bCode].
  static final eb2bCode =
      obx.QueryStringProperty<ProductV1>(_entities[49].properties[49]);
}

/// [RecommendedOrdersV1] entity fields to define ObjectBox queries.
class RecommendedOrdersV1_ {
  /// See [RecommendedOrdersV1.id].
  static final id = obx.QueryIntegerProperty<RecommendedOrdersV1>(
      _entities[50].properties[0]);

  /// See [RecommendedOrdersV1.isFavourite].
  static final isFavourite = obx.QueryBooleanProperty<RecommendedOrdersV1>(
      _entities[50].properties[1]);

  /// See [RecommendedOrdersV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<RecommendedOrdersV1>(_entities[50].properties[2]);

  /// See [RecommendedOrdersV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<RecommendedOrdersV1>(_entities[50].properties[3]);

  /// See [RecommendedOrdersV1.pieceQuantity].
  static final pieceQuantity = obx.QueryIntegerProperty<RecommendedOrdersV1>(
      _entities[50].properties[4]);

  /// See [RecommendedOrdersV1.caseQuantity].
  static final caseQuantity = obx.QueryIntegerProperty<RecommendedOrdersV1>(
      _entities[50].properties[5]);

  /// See [RecommendedOrdersV1.skuPriority].
  static final skuPriority =
      obx.QueryStringProperty<RecommendedOrdersV1>(_entities[50].properties[6]);

  /// See [RecommendedOrdersV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<RecommendedOrdersV1>(_entities[50].properties[7]);

  /// See [RecommendedOrdersV1.recommendationType].
  static final recommendationType =
      obx.QueryStringProperty<RecommendedOrdersV1>(_entities[50].properties[8]);

  /// See [RecommendedOrdersV1.underperformanceAttr].
  static final underperformanceAttr =
      obx.QueryStringProperty<RecommendedOrdersV1>(_entities[50].properties[9]);

  /// See [RecommendedOrdersV1.suggestQty].
  static final suggestQty = obx.QueryDoubleProperty<RecommendedOrdersV1>(
      _entities[50].properties[10]);

  /// See [RecommendedOrdersV1.priority].
  static final priority = obx.QueryIntegerProperty<RecommendedOrdersV1>(
      _entities[50].properties[11]);

  /// See [RecommendedOrdersV1.totalAmount].
  static final totalAmount = obx.QueryDoubleProperty<RecommendedOrdersV1>(
      _entities[50].properties[12]);

  /// See [RecommendedOrdersV1.supportKPI].
  static final supportKPI = obx.QueryStringProperty<RecommendedOrdersV1>(
      _entities[50].properties[13]);

  /// See [RecommendedOrdersV1.extendedAttributesV1].
  static final extendedAttributesV1 =
      obx.QueryStringProperty<RecommendedOrdersV1>(
          _entities[50].properties[14]);

  /// See [RecommendedOrdersV1.skuProbabilityV1].
  static final skuProbabilityV1 = obx.QueryDoubleProperty<RecommendedOrdersV1>(
      _entities[50].properties[15]);

  /// See [RecommendedOrdersV1.startDateV1].
  static final startDateV1 = obx.QueryIntegerProperty<RecommendedOrdersV1>(
      _entities[50].properties[16]);

  /// See [RecommendedOrdersV1.endDateV1].
  static final endDateV1 = obx.QueryIntegerProperty<RecommendedOrdersV1>(
      _entities[50].properties[17]);

  /// See [RecommendedOrdersV1.activeStatusV1].
  static final activeStatusV1 = obx.QueryStringProperty<RecommendedOrdersV1>(
      _entities[50].properties[18]);

  /// See [RecommendedOrdersV1.recommendationId].
  static final recommendationId = obx.QueryStringProperty<RecommendedOrdersV1>(
      _entities[50].properties[19]);

  /// See [RecommendedOrdersV1.recommendationTag].
  static final recommendationTag = obx.QueryStringProperty<RecommendedOrdersV1>(
      _entities[50].properties[20]);

  /// See [RecommendedOrdersV1.basketId].
  static final basketId = obx.QueryStringProperty<RecommendedOrdersV1>(
      _entities[50].properties[21]);
}

/// [ReturnModelV1] entity fields to define ObjectBox queries.
class ReturnModelV1_ {
  /// See [ReturnModelV1.id].
  static final id =
      obx.QueryIntegerProperty<ReturnModelV1>(_entities[51].properties[0]);

  /// See [ReturnModelV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[1]);

  /// See [ReturnModelV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[2]);

  /// See [ReturnModelV1.reasonIdV1].
  static final reasonIdV1 =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[3]);

  /// See [ReturnModelV1.reasonV1].
  static final reasonV1 =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[4]);

  /// See [ReturnModelV1.otherReasonV1].
  static final otherReasonV1 =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[5]);

  /// See [ReturnModelV1.csQty].
  static final csQty =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[6]);

  /// See [ReturnModelV1.pcQty].
  static final pcQty =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[7]);

  /// See [ReturnModelV1.invoiceV1].
  static final invoiceV1 =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[8]);

  /// See [ReturnModelV1.mrpV1].
  static final mrpV1 =
      obx.QueryStringProperty<ReturnModelV1>(_entities[51].properties[9]);
}

/// [RewardsDisbursmentV1] entity fields to define ObjectBox queries.
class RewardsDisbursmentV1_ {
  /// See [RewardsDisbursmentV1.id].
  static final id = obx.QueryIntegerProperty<RewardsDisbursmentV1>(
      _entities[52].properties[0]);

  /// See [RewardsDisbursmentV1.lastModified].
  static final lastModified =
      obx.QueryDateProperty<RewardsDisbursmentV1>(_entities[52].properties[1]);

  /// See [RewardsDisbursmentV1.amount].
  static final amount = obx.QueryStringProperty<RewardsDisbursmentV1>(
      _entities[52].properties[2]);

  /// See [RewardsDisbursmentV1.tds].
  static final tds = obx.QueryStringProperty<RewardsDisbursmentV1>(
      _entities[52].properties[3]);

  /// See [RewardsDisbursmentV1.total].
  static final total = obx.QueryStringProperty<RewardsDisbursmentV1>(
      _entities[52].properties[4]);

  /// See [RewardsDisbursmentV1.invoiceNumber].
  static final invoiceNumber = obx.QueryStringProperty<RewardsDisbursmentV1>(
      _entities[52].properties[5]);

  /// See [RewardsDisbursmentV1.monthNumber].
  static final monthNumber = obx.QueryIntegerProperty<RewardsDisbursmentV1>(
      _entities[52].properties[6]);

  /// See [RewardsDisbursmentV1.payoutYear].
  static final payoutYear = obx.QueryIntegerProperty<RewardsDisbursmentV1>(
      _entities[52].properties[7]);

  /// See [RewardsDisbursmentV1.transactionID].
  static final transactionID = obx.QueryStringProperty<RewardsDisbursmentV1>(
      _entities[52].properties[8]);

  /// See [RewardsDisbursmentV1.bankName].
  static final bankName = obx.QueryStringProperty<RewardsDisbursmentV1>(
      _entities[52].properties[9]);
}

/// [SalesRepOutletsV1] entity fields to define ObjectBox queries.
class SalesRepOutletsV1_ {
  /// See [SalesRepOutletsV1.id].
  static final id =
      obx.QueryIntegerProperty<SalesRepOutletsV1>(_entities[53].properties[0]);

  /// See [SalesRepOutletsV1.outletCode].
  static final outletCode =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[1]);

  /// See [SalesRepOutletsV1.loginId].
  static final loginId =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[2]);

  /// See [SalesRepOutletsV1.outletName].
  static final outletName =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[3]);

  /// See [SalesRepOutletsV1.name].
  static final name =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[4]);

  /// See [SalesRepOutletsV1.contactNo].
  static final contactNo =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[5]);

  /// See [SalesRepOutletsV1.currentPJPUsersV1].
  static final currentPJPUsersV1 =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[6]);

  /// See [SalesRepOutletsV1.totalClicked].
  static final totalClicked =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[7]);

  /// See [SalesRepOutletsV1.todayClicked].
  static final todayClicked =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[8]);

  /// See [SalesRepOutletsV1.lastOrderDateV1].
  static final lastOrderDateV1 =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[9]);

  /// See [SalesRepOutletsV1.appLink].
  static final appLink =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[10]);

  /// See [SalesRepOutletsV1.totalOrder].
  static final totalOrder =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[11]);

  /// See [SalesRepOutletsV1.todayOrder].
  static final todayOrder =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[12]);

  /// See [SalesRepOutletsV1.registered].
  static final registered =
      obx.QueryStringProperty<SalesRepOutletsV1>(_entities[53].properties[13]);
}

/// [Schemes] entity fields to define ObjectBox queries.
class Schemes_ {
  /// See [Schemes.id].
  static final id =
      obx.QueryIntegerProperty<Schemes>(_entities[54].properties[0]);

  /// See [Schemes.discountId].
  static final discountId =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[1]);

  /// See [Schemes.batchCode].
  static final batchCode =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[2]);

  /// See [Schemes.priority].
  static final priority =
      obx.QueryIntegerProperty<Schemes>(_entities[54].properties[3]);

  /// See [Schemes.schemeDescription].
  static final schemeDescription =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[4]);

  /// See [Schemes.supplier].
  static final supplier =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[5]);

  /// See [Schemes.startDate].
  static final startDate =
      obx.QueryIntegerProperty<Schemes>(_entities[54].properties[6]);

  /// See [Schemes.endDate].
  static final endDate =
      obx.QueryIntegerProperty<Schemes>(_entities[54].properties[7]);

  /// See [Schemes.type].
  static final type =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[8]);

  /// See [Schemes.criteria].
  static final criteria =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[9]);

  /// See [Schemes.maxBudget].
  static final maxBudget =
      obx.QueryDoubleProperty<Schemes>(_entities[54].properties[10]);

  /// See [Schemes.maxTerm].
  static final maxTerm =
      obx.QueryDoubleProperty<Schemes>(_entities[54].properties[11]);

  /// See [Schemes.programLevel].
  static final programLevel =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[12]);

  /// See [Schemes.mustBuyQty].
  static final mustBuyQty =
      obx.QueryIntegerProperty<Schemes>(_entities[54].properties[13]);

  /// See [Schemes.discountedBatchCode].
  static final discountedBatchCode =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[14]);

  /// See [Schemes.programNumber].
  static final programNumber =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[15]);

  /// See [Schemes.slabsInfo].
  static final slabsInfo =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[16]);

  /// See [Schemes.minMaxCond].
  static final minMaxCond =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[17]);

  /// See [Schemes.overNAbove].
  static final overNAbove =
      obx.QueryBooleanProperty<Schemes>(_entities[54].properties[18]);

  /// See [Schemes.mustBuyAttributes].
  static final mustBuyAttributes =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[19]);

  /// See [Schemes.channel].
  static final channel =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[20]);

  /// See [Schemes.distributionChannel].
  static final distributionChannel =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[21]);

  /// See [Schemes.subChannel].
  static final subChannel =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[22]);

  /// See [Schemes.outletType].
  static final outletType =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[23]);

  /// See [Schemes.outletCategory].
  static final outletCategory =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[24]);

  /// See [Schemes.outletDivision].
  static final outletDivision =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[25]);

  /// See [Schemes.outletClass].
  static final outletClass =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[26]);

  /// See [Schemes.outletCode].
  static final outletCode =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[27]);

  /// See [Schemes.marketId].
  static final marketId =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[28]);

  /// See [Schemes.marketName].
  static final marketName =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[29]);

  /// See [Schemes.bannerBlob].
  static final bannerBlob =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[30]);

  /// See [Schemes.bannerPriority].
  static final bannerPriority =
      obx.QueryIntegerProperty<Schemes>(_entities[54].properties[31]);

  /// See [Schemes.loginId].
  static final loginId =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[32]);

  /// See [Schemes.color].
  static final color =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[33]);

  /// See [Schemes.outletExclusionKey].
  static final outletExclusionKey =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[34]);

  /// See [Schemes.outletExclusionValues].
  static final outletExclusionValues =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[35]);

  /// See [Schemes.itemEach].
  static final itemEach =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[36]);

  /// See [Schemes.extendedAttributes].
  static final extendedAttributes =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[37]);

  /// See [Schemes.activeStatus].
  static final activeStatus =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[38]);

  /// See [Schemes.skuCode].
  static final skuCode =
      obx.QueryStringProperty<Schemes>(_entities[54].properties[39]);
}

/// [SearchHistoryModelV1] entity fields to define ObjectBox queries.
class SearchHistoryModelV1_ {
  /// See [SearchHistoryModelV1.id].
  static final id = obx.QueryIntegerProperty<SearchHistoryModelV1>(
      _entities[55].properties[0]);

  /// See [SearchHistoryModelV1.searchHistory].
  static final searchHistory = obx.QueryStringProperty<SearchHistoryModelV1>(
      _entities[55].properties[1]);
}

/// [SecondaryProductIntentV1] entity fields to define ObjectBox queries.
class SecondaryProductIntentV1_ {
  /// See [SecondaryProductIntentV1.id].
  static final id = obx.QueryIntegerProperty<SecondaryProductIntentV1>(
      _entities[56].properties[0]);

  /// See [SecondaryProductIntentV1.suggestedQtyV1].
  static final suggestedQtyV1 =
      obx.QueryStringProperty<SecondaryProductIntentV1>(
          _entities[56].properties[1]);

  /// See [SecondaryProductIntentV1.outletCodeWithBatchCodeV1].
  static final outletCodeWithBatchCodeV1 =
      obx.QueryStringProperty<SecondaryProductIntentV1>(
          _entities[56].properties[2]);

  /// See [SecondaryProductIntentV1.outletCode].
  static final outletCode = obx.QueryStringProperty<SecondaryProductIntentV1>(
      _entities[56].properties[3]);
}

/// [SecondaryProductV1] entity fields to define ObjectBox queries.
class SecondaryProductV1_ {
  /// See [SecondaryProductV1.id].
  static final id =
      obx.QueryIntegerProperty<SecondaryProductV1>(_entities[57].properties[0]);

  /// See [SecondaryProductV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<SecondaryProductV1>(_entities[57].properties[1]);

  /// See [SecondaryProductV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<SecondaryProductV1>(_entities[57].properties[2]);

  /// See [SecondaryProductV1.brand].
  static final brand =
      obx.QueryStringProperty<SecondaryProductV1>(_entities[57].properties[3]);

  /// See [SecondaryProductV1.feature].
  static final feature =
      obx.QueryStringProperty<SecondaryProductV1>(_entities[57].properties[4]);

  /// See [SecondaryProductV1.channel].
  static final channel =
      obx.QueryStringProperty<SecondaryProductV1>(_entities[57].properties[5]);

  /// See [SecondaryProductV1.tagVisibility].
  static final tagVisibility =
      obx.QueryBooleanProperty<SecondaryProductV1>(_entities[57].properties[6]);

  /// See [SecondaryProductV1.quantity].
  static final quantity =
      obx.QueryDoubleProperty<SecondaryProductV1>(_entities[57].properties[7]);

  /// See [SecondaryProductV1.minQtyForEarnPoints].
  static final minQtyForEarnPoints =
      obx.QueryIntegerProperty<SecondaryProductV1>(_entities[57].properties[8]);

  /// See [SecondaryProductV1.secondaryProductTag].
  static final secondaryProductTag =
      obx.QueryStringProperty<SecondaryProductV1>(_entities[57].properties[9]);
}

/// [SkuDescriptionV1] entity fields to define ObjectBox queries.
class SkuDescriptionV1_ {
  /// See [SkuDescriptionV1.id].
  static final id =
      obx.QueryIntegerProperty<SkuDescriptionV1>(_entities[58].properties[0]);

  /// See [SkuDescriptionV1.skuCode].
  static final skuCode =
      obx.QueryStringProperty<SkuDescriptionV1>(_entities[58].properties[1]);

  /// See [SkuDescriptionV1.skuDescription].
  static final skuDescription =
      obx.QueryStringProperty<SkuDescriptionV1>(_entities[58].properties[2]);
}

/// [StockQuantityV1] entity fields to define ObjectBox queries.
class StockQuantityV1_ {
  /// See [StockQuantityV1.id].
  static final id =
      obx.QueryIntegerProperty<StockQuantityV1>(_entities[59].properties[0]);

  /// See [StockQuantityV1.batchCode].
  static final batchCode =
      obx.QueryStringProperty<StockQuantityV1>(_entities[59].properties[1]);

  /// See [StockQuantityV1.qty].
  static final qty =
      obx.QueryIntegerProperty<StockQuantityV1>(_entities[59].properties[2]);

  /// See [StockQuantityV1.supplier].
  static final supplier =
      obx.QueryStringProperty<StockQuantityV1>(_entities[59].properties[3]);
}

/// [SupplierV1] entity fields to define ObjectBox queries.
class SupplierV1_ {
  /// See [SupplierV1.id].
  static final id =
      obx.QueryIntegerProperty<SupplierV1>(_entities[60].properties[0]);

  /// See [SupplierV1.supplierId].
  static final supplierId =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[1]);

  /// See [SupplierV1.name].
  static final name =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[2]);

  /// See [SupplierV1.mobile].
  static final mobile =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[3]);

  /// See [SupplierV1.loginId].
  static final loginId =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[4]);

  /// See [SupplierV1.min].
  static final min =
      obx.QueryIntegerProperty<SupplierV1>(_entities[60].properties[5]);

  /// See [SupplierV1.max].
  static final max =
      obx.QueryIntegerProperty<SupplierV1>(_entities[60].properties[6]);

  /// See [SupplierV1.level].
  static final level =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[7]);

  /// See [SupplierV1.type].
  static final type =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[8]);

  /// See [SupplierV1.orderFulfillmentTime].
  static final orderFulfillmentTime =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[9]);

  /// See [SupplierV1.rcsId].
  static final rcsId =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[10]);

  /// See [SupplierV1.sifyId].
  static final sifyId =
      obx.QueryStringProperty<SupplierV1>(_entities[60].properties[11]);
}

/// [TargetModel] entity fields to define ObjectBox queries.
class TargetModel_ {
  /// See [TargetModel.id].
  static final id =
      obx.QueryIntegerProperty<TargetModel>(_entities[61].properties[0]);

  /// See [TargetModel.loginId].
  static final loginId =
      obx.QueryStringProperty<TargetModel>(_entities[61].properties[1]);

  /// See [TargetModel.target].
  static final target =
      obx.QueryDoubleProperty<TargetModel>(_entities[61].properties[2]);
}

/// [UnavailableProductUIV1] entity fields to define ObjectBox queries.
class UnavailableProductUIV1_ {
  /// See [UnavailableProductUIV1.id].
  static final id = obx.QueryIntegerProperty<UnavailableProductUIV1>(
      _entities[62].properties[0]);

  /// See [UnavailableProductUIV1.lastModified].
  static final lastModified = obx.QueryDateProperty<UnavailableProductUIV1>(
      _entities[62].properties[1]);

  /// See [UnavailableProductUIV1.manufacturingDateV1].
  static final manufacturingDateV1 =
      obx.QueryDateProperty<UnavailableProductUIV1>(
          _entities[62].properties[2]);

  /// See [UnavailableProductUIV1.name].
  static final name = obx.QueryStringProperty<UnavailableProductUIV1>(
      _entities[62].properties[3]);

  /// See [UnavailableProductUIV1.batchCode].
  static final batchCode = obx.QueryStringProperty<UnavailableProductUIV1>(
      _entities[62].properties[4]);

  /// See [UnavailableProductUIV1.description].
  static final description = obx.QueryStringProperty<UnavailableProductUIV1>(
      _entities[62].properties[5]);

  /// See [UnavailableProductUIV1.images].
  static final images = obx.QueryStringVectorProperty<UnavailableProductUIV1>(
      _entities[62].properties[6]);

  /// See [UnavailableProductUIV1.category].
  static final category = obx.QueryStringProperty<UnavailableProductUIV1>(
      _entities[62].properties[7]);

  /// See [UnavailableProductUIV1.price].
  static final price = obx.QueryDoubleProperty<UnavailableProductUIV1>(
      _entities[62].properties[8]);

  /// See [UnavailableProductUIV1.casePrice].
  static final casePrice = obx.QueryDoubleProperty<UnavailableProductUIV1>(
      _entities[62].properties[9]);

  /// See [UnavailableProductUIV1.caseToPieceQty].
  static final caseToPieceQty = obx.QueryDoubleProperty<UnavailableProductUIV1>(
      _entities[62].properties[10]);

  /// See [UnavailableProductUIV1.caseMrp].
  static final caseMrp = obx.QueryIntegerProperty<UnavailableProductUIV1>(
      _entities[62].properties[11]);

  /// See [UnavailableProductUIV1.mrp].
  static final mrp = obx.QueryIntegerProperty<UnavailableProductUIV1>(
      _entities[62].properties[12]);

  /// See [UnavailableProductUIV1.pieceSize].
  static final pieceSize = obx.QueryIntegerProperty<UnavailableProductUIV1>(
      _entities[62].properties[13]);

  /// See [UnavailableProductUIV1.buttonDescriptionV1].
  static final buttonDescriptionV1 =
      obx.QueryStringProperty<UnavailableProductUIV1>(
          _entities[62].properties[14]);
}

/// [UserInfo] entity fields to define ObjectBox queries.
class UserInfo_ {
  /// See [UserInfo.id].
  static final id =
      obx.QueryIntegerProperty<UserInfo>(_entities[63].properties[0]);

  /// See [UserInfo.userAccountId].
  static final userAccountId =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[1]);

  /// See [UserInfo.loginId].
  static final loginId =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[2]);

  /// See [UserInfo.mobile].
  static final mobile =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[3]);

  /// See [UserInfo.designation].
  static final designation =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[4]);

  /// See [UserInfo.immediateParent].
  static final immediateParent =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[5]);

  /// See [UserInfo.locationHierarchy].
  static final locationHierarchy =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[6]);

  /// See [UserInfo.name].
  static final name =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[7]);

  /// See [UserInfo.email].
  static final email =
      obx.QueryStringProperty<UserInfo>(_entities[63].properties[8]);
}

/// [UserV1] entity fields to define ObjectBox queries.
class UserV1_ {
  /// See [UserV1.id].
  static final id =
      obx.QueryIntegerProperty<UserV1>(_entities[64].properties[0]);

  /// See [UserV1.lob].
  static final lob =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[1]);

  /// See [UserV1.userAccountId].
  static final userAccountId =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[2]);

  /// See [UserV1.loginId].
  static final loginId =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[3]);

  /// See [UserV1.mobile].
  static final mobile =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[4]);

  /// See [UserV1.designation].
  static final designation =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[5]);

  /// See [UserV1.immediateParent].
  static final immediateParent =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[6]);

  /// See [UserV1.locationHierarchy].
  static final locationHierarchy =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[7]);

  /// See [UserV1.name].
  static final name =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[8]);

  /// See [UserV1.dialCode].
  static final dialCode =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[9]);

  /// See [UserV1.verified].
  static final verified =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[10]);

  /// See [UserV1.email].
  static final email =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[11]);

  /// See [UserV1.address].
  static final address =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[12]);

  /// See [UserV1.status].
  static final status =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[13]);

  /// See [UserV1.orderSeqNumV1].
  static final orderSeqNumV1 =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[14]);

  /// See [UserV1.salesRepId].
  static final salesRepId =
      obx.QueryStringProperty<UserV1>(_entities[64].properties[15]);

  /// See [UserV1.roles].
  static final roles =
      obx.QueryStringVectorProperty<UserV1>(_entities[64].properties[16]);
}

/// [WorkWithSurveyTask] entity fields to define ObjectBox queries.
class WorkWithSurveyTask_ {
  /// See [WorkWithSurveyTask.id].
  static final id =
      obx.QueryIntegerProperty<WorkWithSurveyTask>(_entities[65].properties[0]);

  /// See [WorkWithSurveyTask.taskDescription].
  static final taskDescription =
      obx.QueryStringProperty<WorkWithSurveyTask>(_entities[65].properties[1]);

  /// See [WorkWithSurveyTask.taskStatus].
  static final taskStatus =
      obx.QueryStringProperty<WorkWithSurveyTask>(_entities[65].properties[2]);

  /// See [WorkWithSurveyTask.outletCode].
  static final outletCode =
      obx.QueryStringProperty<WorkWithSurveyTask>(_entities[65].properties[3]);

  /// See [WorkWithSurveyTask.taskId].
  static final taskId =
      obx.QueryStringProperty<WorkWithSurveyTask>(_entities[65].properties[4]);

  /// See [WorkWithSurveyTask.enabled].
  static final enabled =
      obx.QueryBooleanProperty<WorkWithSurveyTask>(_entities[65].properties[5]);
}
